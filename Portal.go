// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// PortalMetaData contains all meta data concerning the Portal contract.
var PortalMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"ApprovedRepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"RepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"RevertBurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequestSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"approveRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"createRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnburnRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnburnRequestToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"initializeFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chain2address\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"enumPortal.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxyCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnburn\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashMintSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"synthesize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_txStateBump\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"synthesizeToSolana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_approvalData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"synthesizeWithPermit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"internalType\":\"structPortal.SynthParams\",\"name\":\"_synth_params\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_transit_data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"}],\"internalType\":\"structPortal.PermitData[]\",\"name\":\"_permit_data\",\"type\":\"tuple[]\"}],\"name\":\"synthesize_batch_transit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_out\",\"type\":\"bytes\"}],\"name\":\"synthesize_transit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsynthesizeStates\",\"outputs\":[{\"internalType\":\"enumPortal.UnsynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// PortalABI is the input ABI used to generate the binding from.
// Deprecated: Use PortalMetaData.ABI instead.
var PortalABI = PortalMetaData.ABI

// PortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PortalMetaData.Bin instead.
var PortalBin = PortalMetaData.Bin

// DeployPortal deploys a new Ethereum contract, binding an instance of Portal to it.
func DeployPortal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portal, error) {
	parsed, err := PortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// Portal is an auto generated Go binding around an Ethereum contract.
type Portal struct {
	PortalCaller     // Read-only binding to the contract
	PortalTransactor // Write-only binding to the contract
	PortalFilterer   // Log filterer for contract events
}

// PortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type PortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Portal *PortalTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Portal.gsn = opts
}

// PortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PortalSession struct {
	Contract     *Portal           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PortalCallerSession struct {
	Contract *PortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PortalTransactorSession struct {
	Contract     *PortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type PortalRaw struct {
	Contract *Portal // Generic contract binding to access the raw methods on
}

// PortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PortalCallerRaw struct {
	Contract *PortalCaller // Generic read-only contract binding to access the raw methods on
}

// PortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PortalTransactorRaw struct {
	Contract *PortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPortal creates a new instance of Portal, bound to a specific deployed contract.
func NewPortal(address common.Address, backend bind.ContractBackend) (*Portal, error) {
	contract, err := bindPortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// NewPortalCaller creates a new read-only instance of Portal, bound to a specific deployed contract.
func NewPortalCaller(address common.Address, caller bind.ContractCaller) (*PortalCaller, error) {
	contract, err := bindPortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PortalCaller{contract: contract}, nil
}

// NewPortalTransactor creates a new write-only instance of Portal, bound to a specific deployed contract.
func NewPortalTransactor(address common.Address, transactor bind.ContractTransactor) (*PortalTransactor, error) {
	contract, err := bindPortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PortalTransactor{contract: contract}, nil
}

// NewPortalFilterer creates a new log filterer instance of Portal, bound to a specific deployed contract.
func NewPortalFilterer(address common.Address, filterer bind.ContractFilterer) (*PortalFilterer, error) {
	contract, err := bindPortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PortalFilterer{contract: contract}, nil
}

// bindPortal binds a generic wrapper to an already deployed contract.
func bindPortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PortalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.PortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCallerSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Portal *PortalCaller) GetTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "getTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Portal *PortalSession) GetTxId() ([32]byte, error) {
	return _Portal.Contract.GetTxId(&_Portal.CallOpts)
}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Portal *PortalCallerSession) GetTxId() ([32]byte, error) {
	return _Portal.Contract.GetTxId(&_Portal.CallOpts)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCallerSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Portal *PortalCaller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "proxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Portal *PortalSession) Proxy() (common.Address, error) {
	return _Portal.Contract.Proxy(&_Portal.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Portal *PortalCallerSession) Proxy() (common.Address, error) {
	return _Portal.Contract.Proxy(&_Portal.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Rtoken        [32]byte
	State         uint8
}, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		Recipient     [32]byte
		Chain2address [32]byte
		Amount        *big.Int
		Rtoken        [32]byte
		State         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Chain2address = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Rtoken = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.State = *abi.ConvertType(out[4], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Rtoken        [32]byte
	State         uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCallerSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Rtoken        [32]byte
	State         uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCaller) SighashEmergencyUnburn(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashEmergencyUnburn")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCallerSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCaller) SighashMintSyntheticToken(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashMintSyntheticToken")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCallerSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// TokenData is a free data retrieval call binding the contract method 0x27e45c2c.
//
// Solidity: function tokenData(address ) view returns(bytes)
func (_Portal *PortalCaller) TokenData(opts *bind.CallOpts, arg0 common.Address) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "tokenData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// TokenData is a free data retrieval call binding the contract method 0x27e45c2c.
//
// Solidity: function tokenData(address ) view returns(bytes)
func (_Portal *PortalSession) TokenData(arg0 common.Address) ([]byte, error) {
	return _Portal.Contract.TokenData(&_Portal.CallOpts, arg0)
}

// TokenData is a free data retrieval call binding the contract method 0x27e45c2c.
//
// Solidity: function tokenData(address ) view returns(bytes)
func (_Portal *PortalCallerSession) TokenData(arg0 common.Address) ([]byte, error) {
	return _Portal.Contract.TokenData(&_Portal.CallOpts, arg0)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCallerSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCaller) UnsynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "unsynthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCallerSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCallerSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xeb6cca38.
//
// Solidity: function approveRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactor) ApproveRepresentationRequest(opts *bind.TransactOpts, _rtoken common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "ApproveRepresentationRequest")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "approveRepresentationRequest" , _rtoken)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "approveRepresentationRequest", _rtoken)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xeb6cca38.
//
// Solidity: function approveRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalSession) ApproveRepresentationRequest(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xeb6cca38.
//
// Solidity: function approveRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactorSession) ApproveRepresentationRequest(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "ChangeBridge")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "changeBridge" , _bridge)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "changeBridge", _bridge)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalSession) ChangeBridge(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactorSession) ChangeBridge(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactor) CreateRepresentationRequest(opts *bind.TransactOpts, _rtoken common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "CreateRepresentationRequest")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "createRepresentationRequest" , _rtoken)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "createRepresentationRequest", _rtoken)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalSession) CreateRepresentationRequest(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactorSession) CreateRepresentationRequest(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x7ac3a7ad.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnburnRequest")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequest" , _txID, _receiveSide, _oppositeBridge, _chainId)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "emergencyUnburnRequest", _txID, _receiveSide, _oppositeBridge, _chainId)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x7ac3a7ad.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns()
func (_Portal *PortalSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x7ac3a7ad.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequestToSolana(opts *bind.TransactOpts, _txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnburnRequestToSolana")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequestToSolana" , _txID, _pubkeys, _chainId)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "emergencyUnburnRequestToSolana", _txID, _pubkeys, _chainId)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0xfc895869.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID) returns()
func (_Portal *PortalTransactor) EmergencyUnsynthesize(opts *bind.TransactOpts, _txID [32]byte) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnsynthesize")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnsynthesize" , _txID)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "emergencyUnsynthesize", _txID)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0xfc895869.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID) returns()
func (_Portal *PortalSession) EmergencyUnsynthesize(_txID [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0xfc895869.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID) returns()
func (_Portal *PortalTransactorSession) EmergencyUnsynthesize(_txID [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalTransactor) InitializeFunc(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "InitializeFunc")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "initializeFunc" , _bridge, _trustedForwarder)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "initializeFunc", _bridge, _trustedForwarder)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalTransactorSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactor) RenounceOwnership(opts *bind.TransactOpts) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "RenounceOwnership")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "renounceOwnership" )
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "renounceOwnership")
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalSession) RenounceOwnership() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactorSession) RenounceOwnership() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Portal *PortalTransactor) SetProxyCurve(opts *bind.TransactOpts, _proxy common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SetProxyCurve")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "setProxyCurve" , _proxy)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "setProxyCurve", _proxy)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Portal *PortalSession) SetProxyCurve(_proxy common.Address) (common.Hash, error) {
	return _Portal.Contract.SetProxyCurve(&_Portal.TransactOpts, _proxy)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Portal *PortalTransactorSession) SetProxyCurve(_proxy common.Address) (common.Hash, error) {
	return _Portal.Contract.SetProxyCurve(&_Portal.TransactOpts, _proxy)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SetTrustedForwarder")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "setTrustedForwarder" , _forwarder)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "setTrustedForwarder", _forwarder)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalSession) SetTrustedForwarder(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactorSession) SetTrustedForwarder(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}

// Synthesize is a paid mutator transaction binding the contract method 0x5bb8809f.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalTransactor) Synthesize(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "Synthesize")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesize" , _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "synthesize", _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// Synthesize is a paid mutator transaction binding the contract method 0x5bb8809f.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalSession) Synthesize(_token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// Synthesize is a paid mutator transaction binding the contract method 0x5bb8809f.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) Synthesize(_token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0x2c7eb5c0.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactor) SynthesizeToSolana(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SynthesizeToSolana")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesizeToSolana" , _token, _amount, _pubkeys, _txStateBump, _chainId)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "synthesizeToSolana", _token, _amount, _pubkeys, _txStateBump, _chainId)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0x2c7eb5c0.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0x2c7eb5c0.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeWithPermit is a paid mutator transaction binding the contract method 0x9a1962fb.
//
// Solidity: function synthesizeWithPermit(bytes _approvalData, address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalTransactor) SynthesizeWithPermit(opts *bind.TransactOpts, _approvalData []byte, _token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SynthesizeWithPermit")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesizeWithPermit" , _approvalData, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "synthesizeWithPermit", _approvalData, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SynthesizeWithPermit is a paid mutator transaction binding the contract method 0x9a1962fb.
//
// Solidity: function synthesizeWithPermit(bytes _approvalData, address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalSession) SynthesizeWithPermit(_approvalData []byte, _token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeWithPermit(&_Portal.TransactOpts, _approvalData, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// SynthesizeWithPermit is a paid mutator transaction binding the contract method 0x9a1962fb.
//
// Solidity: function synthesizeWithPermit(bytes _approvalData, address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) SynthesizeWithPermit(_approvalData []byte, _token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeWithPermit(&_Portal.TransactOpts, _approvalData, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// SynthesizeBatchTransit is a paid mutator transaction binding the contract method 0xfe4bc10f.
//
// Solidity: function synthesize_batch_transit(address[] _tokens, uint256[] _amounts, (address,address,address,uint256) _synth_params, bytes4 _selector, bytes _transit_data, (uint8,bytes32,bytes32,uint256,bool)[] _permit_data) returns()
func (_Portal *PortalTransactor) SynthesizeBatchTransit(opts *bind.TransactOpts, _tokens []common.Address, _amounts []*big.Int, _synth_params PortalSynthParams, _selector [4]byte, _transit_data []byte, _permit_data []PortalPermitData) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SynthesizeBatchTransit")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesize_batch_transit" , _tokens, _amounts, _synth_params, _selector, _transit_data, _permit_data)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "synthesize_batch_transit", _tokens, _amounts, _synth_params, _selector, _transit_data, _permit_data)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SynthesizeBatchTransit is a paid mutator transaction binding the contract method 0xfe4bc10f.
//
// Solidity: function synthesize_batch_transit(address[] _tokens, uint256[] _amounts, (address,address,address,uint256) _synth_params, bytes4 _selector, bytes _transit_data, (uint8,bytes32,bytes32,uint256,bool)[] _permit_data) returns()
func (_Portal *PortalSession) SynthesizeBatchTransit(_tokens []common.Address, _amounts []*big.Int, _synth_params PortalSynthParams, _selector [4]byte, _transit_data []byte, _permit_data []PortalPermitData) (common.Hash, error) {
	return _Portal.Contract.SynthesizeBatchTransit(&_Portal.TransactOpts, _tokens, _amounts, _synth_params, _selector, _transit_data, _permit_data)
}

// SynthesizeBatchTransit is a paid mutator transaction binding the contract method 0xfe4bc10f.
//
// Solidity: function synthesize_batch_transit(address[] _tokens, uint256[] _amounts, (address,address,address,uint256) _synth_params, bytes4 _selector, bytes _transit_data, (uint8,bytes32,bytes32,uint256,bool)[] _permit_data) returns()
func (_Portal *PortalTransactorSession) SynthesizeBatchTransit(_tokens []common.Address, _amounts []*big.Int, _synth_params PortalSynthParams, _selector [4]byte, _transit_data []byte, _permit_data []PortalPermitData) (common.Hash, error) {
	return _Portal.Contract.SynthesizeBatchTransit(&_Portal.TransactOpts, _tokens, _amounts, _synth_params, _selector, _transit_data, _permit_data)
}

// SynthesizeTransit is a paid mutator transaction binding the contract method 0x32f824ba.
//
// Solidity: function synthesize_transit(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txId)
func (_Portal *PortalTransactor) SynthesizeTransit(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "SynthesizeTransit")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesize_transit" , _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "synthesize_transit", _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// SynthesizeTransit is a paid mutator transaction binding the contract method 0x32f824ba.
//
// Solidity: function synthesize_transit(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txId)
func (_Portal *PortalSession) SynthesizeTransit(_token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	return _Portal.Contract.SynthesizeTransit(&_Portal.TransactOpts, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// SynthesizeTransit is a paid mutator transaction binding the contract method 0x32f824ba.
//
// Solidity: function synthesize_transit(address _token, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txId)
func (_Portal *PortalTransactorSession) SynthesizeTransit(_token common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	return _Portal.Contract.SynthesizeTransit(&_Portal.TransactOpts, _token, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "TransferOwnership")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "transferOwnership" , newOwner)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "transferOwnership", newOwner)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalSession) TransferOwnership(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactorSession) TransferOwnership(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactor) Unsynthesize(opts *bind.TransactOpts, _txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	//fmt.Printf("DBG: Wrapper run method = %s\n", "Unsynthesize")
	//if UseGsnFlag && _Portal.gsn != nil {
	//	fmt.Printf("DBG: GsnWrap: Run gsn call\n")
	//	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "unsynthesize" , _txID, _token, _amount, _to)
	//}

	//fmt.Printf("DBG: GsnWrap: Direct call\n")
	tx, err := _Portal.contract.Transact(opts, "unsynthesize", _txID, _token, _amount, _to)
	if tx == nil {
		return common.Hash{}, err
	}

	return tx.Hash(), err
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactorSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// PortalApprovedRepresentationRequestIterator is returned from FilterApprovedRepresentationRequest and is used to iterate over the raw logs and unpacked data for ApprovedRepresentationRequest events raised by the Portal contract.
type PortalApprovedRepresentationRequestIterator struct {
	Event *PortalApprovedRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalApprovedRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalApprovedRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalApprovedRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalApprovedRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalApprovedRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalApprovedRepresentationRequest represents a ApprovedRepresentationRequest event raised by the Portal contract.
type PortalApprovedRepresentationRequest struct {
	Rtoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterApprovedRepresentationRequest is a free log retrieval operation binding the contract event 0xfef61564996448060d23dc50b784dd54e7ded6c1c4e24fb703cfbbe5f93508d9.
//
// Solidity: event ApprovedRepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) FilterApprovedRepresentationRequest(opts *bind.FilterOpts, _rtoken []common.Address) (*PortalApprovedRepresentationRequestIterator, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "ApprovedRepresentationRequest", _rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalApprovedRepresentationRequestIterator{contract: _Portal.contract, event: "ApprovedRepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchApprovedRepresentationRequest is a free log subscription operation binding the contract event 0xfef61564996448060d23dc50b784dd54e7ded6c1c4e24fb703cfbbe5f93508d9.
//
// Solidity: event ApprovedRepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) WatchApprovedRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalApprovedRepresentationRequest, _rtoken []common.Address) (event.Subscription, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "ApprovedRepresentationRequest", _rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalApprovedRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovedRepresentationRequest is a log parse operation binding the contract event 0xfef61564996448060d23dc50b784dd54e7ded6c1c4e24fb703cfbbe5f93508d9.
//
// Solidity: event ApprovedRepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) ParseApprovedRepresentationRequest(log types.Log) (*PortalApprovedRepresentationRequest, error) {
	event := new(PortalApprovedRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalBurnCompletedIterator is returned from FilterBurnCompleted and is used to iterate over the raw logs and unpacked data for BurnCompleted events raised by the Portal contract.
type PortalBurnCompletedIterator struct {
	Event *PortalBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalBurnCompleted represents a BurnCompleted event raised by the Portal contract.
type PortalBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnCompleted is a free log retrieval operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) FilterBurnCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*PortalBurnCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "BurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &PortalBurnCompletedIterator{contract: _Portal.contract, event: "BurnCompleted", logs: logs, sub: sub}, nil
}

// WatchBurnCompleted is a free log subscription operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) WatchBurnCompleted(opts *bind.WatchOpts, sink chan<- *PortalBurnCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "BurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalBurnCompleted)
				if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnCompleted is a log parse operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) ParseBurnCompleted(log types.Log) (*PortalBurnCompleted, error) {
	event := new(PortalBurnCompleted)
	if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Portal contract.
type PortalOwnershipTransferredIterator struct {
	Event *PortalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalOwnershipTransferred represents a OwnershipTransferred event raised by the Portal contract.
type PortalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PortalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PortalOwnershipTransferredIterator{contract: _Portal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PortalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalOwnershipTransferred)
				if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) ParseOwnershipTransferred(log types.Log) (*PortalOwnershipTransferred, error) {
	event := new(PortalOwnershipTransferred)
	if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRepresentationRequestIterator is returned from FilterRepresentationRequest and is used to iterate over the raw logs and unpacked data for RepresentationRequest events raised by the Portal contract.
type PortalRepresentationRequestIterator struct {
	Event *PortalRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRepresentationRequest represents a RepresentationRequest event raised by the Portal contract.
type PortalRepresentationRequest struct {
	Rtoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRepresentationRequest is a free log retrieval operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) FilterRepresentationRequest(opts *bind.FilterOpts, _rtoken []common.Address) (*PortalRepresentationRequestIterator, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RepresentationRequest", _rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalRepresentationRequestIterator{contract: _Portal.contract, event: "RepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchRepresentationRequest is a free log subscription operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) WatchRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalRepresentationRequest, _rtoken []common.Address) (event.Subscription, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RepresentationRequest", _rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepresentationRequest is a log parse operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed _rtoken)
func (_Portal *PortalFilterer) ParseRepresentationRequest(log types.Log) (*PortalRepresentationRequest, error) {
	event := new(PortalRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertBurnRequestIterator is returned from FilterRevertBurnRequest and is used to iterate over the raw logs and unpacked data for RevertBurnRequest events raised by the Portal contract.
type PortalRevertBurnRequestIterator struct {
	Event *PortalRevertBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertBurnRequest represents a RevertBurnRequest event raised by the Portal contract.
type PortalRevertBurnRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnRequest is a free log retrieval operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed _id, address indexed _to)
func (_Portal *PortalFilterer) FilterRevertBurnRequest(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*PortalRevertBurnRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertBurnRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertBurnRequestIterator{contract: _Portal.contract, event: "RevertBurnRequest", logs: logs, sub: sub}, nil
}

// WatchRevertBurnRequest is a free log subscription operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed _id, address indexed _to)
func (_Portal *PortalFilterer) WatchRevertBurnRequest(opts *bind.WatchOpts, sink chan<- *PortalRevertBurnRequest, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertBurnRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertBurnRequest)
				if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnRequest is a log parse operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed _id, address indexed _to)
func (_Portal *PortalFilterer) ParseRevertBurnRequest(log types.Log) (*PortalRevertBurnRequest, error) {
	event := new(PortalRevertBurnRequest)
	if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertSynthesizeCompletedIterator is returned from FilterRevertSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for RevertSynthesizeCompleted events raised by the Portal contract.
type PortalRevertSynthesizeCompletedIterator struct {
	Event *PortalRevertSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertSynthesizeCompleted represents a RevertSynthesizeCompleted event raised by the Portal contract.
type PortalRevertSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeCompleted is a free log retrieval operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) FilterRevertSynthesizeCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*PortalRevertSynthesizeCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertSynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertSynthesizeCompletedIterator{contract: _Portal.contract, event: "RevertSynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeCompleted is a free log subscription operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) WatchRevertSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *PortalRevertSynthesizeCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertSynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertSynthesizeCompleted)
				if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeCompleted is a log parse operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) ParseRevertSynthesizeCompleted(log types.Log) (*PortalRevertSynthesizeCompleted, error) {
	event := new(PortalRevertSynthesizeCompleted)
	if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestIterator is returned from FilterSynthesizeRequest and is used to iterate over the raw logs and unpacked data for SynthesizeRequest events raised by the Portal contract.
type PortalSynthesizeRequestIterator struct {
	Event *PortalSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequest represents a SynthesizeRequest event raised by the Portal contract.
type PortalSynthesizeRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequest is a free log retrieval operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) FilterSynthesizeRequest(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to []common.Address) (*PortalSynthesizeRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestIterator{contract: _Portal.contract, event: "SynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequest is a free log subscription operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) WatchSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequest, _id [][32]byte, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequest)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequest is a log parse operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) ParseSynthesizeRequest(log types.Log) (*PortalSynthesizeRequest, error) {
	event := new(PortalSynthesizeRequest)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestSolanaIterator is returned from FilterSynthesizeRequestSolana and is used to iterate over the raw logs and unpacked data for SynthesizeRequestSolana events raised by the Portal contract.
type PortalSynthesizeRequestSolanaIterator struct {
	Event *PortalSynthesizeRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequestSolana represents a SynthesizeRequestSolana event raised by the Portal contract.
type PortalSynthesizeRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequestSolana is a free log retrieval operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) FilterSynthesizeRequestSolana(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to [][32]byte) (*PortalSynthesizeRequestSolanaIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestSolanaIterator{contract: _Portal.contract, event: "SynthesizeRequestSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequestSolana is a free log subscription operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) WatchSynthesizeRequestSolana(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequestSolana, _id [][32]byte, _from []common.Address, _to [][32]byte) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequestSolana)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequestSolana is a log parse operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Portal *PortalFilterer) ParseSynthesizeRequestSolana(log types.Log) (*PortalSynthesizeRequestSolana, error) {
	event := new(PortalSynthesizeRequestSolana)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
