// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_listNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statFilterLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_newEpochParticipantsNum\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_newEpochNum\",\"type\":\"uint32\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613cbc806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636f352196116100de578063bd4a5e9011610097578063e27ad9a511610071578063e27ad9a5146103d9578063f21b79f9146103ec578063f2a0c8c0146103f4578063f2fde38b1461040757600080fd5b8063bd4a5e90146103a0578063c4d66de8146103b3578063da742228146103c657600080fd5b80636f352196146102f1578063715018a61461034c578063757991a8146103545780637da0a8771461036b5780638da5cb5b1461037c578063aa764d7c1461038d57600080fd5b80633e7e25c1116101305780633e7e25c1146102545780634162169f1461026e57806346dec6cb14610281578063486ff0cd14610294578063572b6c05146102a9578063579de075146102cb57600080fd5b806305e3c05b146101785780630e03e490146101a9578063135160af146101d25780632d0335ab146101e757806331b433f91461021e578063329ef45f14610241575b600080fd5b606f5461018f90600160a81b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6101ba6101b73660046131c3565b90565b6040516001600160a01b0390911681526020016101a0565b6101e56101e036600461321e565b61041a565b005b6102106101f5366004613301565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016101a0565b61023161022c36600461331c565b6108f7565b60405190151581526020016101a0565b61023161024f36600461339f565b6109e0565b610210610262366004613301565b6001600160a01b031690565b606f546101ba906001600160a01b031681565b6101e561028f366004613429565b610add565b61029c610c98565b6040516101a091906134a2565b6102316102b7366004613301565b6069546001600160a01b0391821691161490565b606f546102df90600160a01b900460ff1681565b60405160ff90911681526020016101a0565b6102106102ff3660046134b5565b6040805160208082019490945280820192909252606082019490945246608082015260a081019290925260c0808301949094528251808303909401845260e0909101909152815191012090565b6101e5610d26565b61035c610d7b565b6040516101a0939291906134f0565b6069546001600160a01b03166101ba565b6037546001600160a01b03166101ba565b6000546101ba906001600160a01b031681565b6101e56103ae366004613536565b610dc7565b6101e56103c1366004613301565b6111ec565b6101e56103d4366004613301565b611313565b6101e56103e7366004613601565b611368565b607154610210565b6101e5610402366004613301565b61142f565b6101e5610415366004613301565b6114fc565b606b5415158061042b5750606c5415155b6104745760405162461bcd60e51b8152602060048201526015602482015274109c9a5919d94e88195c1bd8da081b9bdd081cd95d605a1b60448201526064015b60405180910390fd5b606f5460039061048f90600160a01b900460ff166002613659565b610499919061368e565b6104a2826115b3565b10156104f05760405162461bcd60e51b815260206004820152601f60248201527f4272696467653a206e6f7420656e6f756768207061727469636970616e747300604482015260640161046b565b606f5460ff600160a01b90910416610100148061051c5750606f546001600160a01b90910460ff161b81105b6105625760405162461bcd60e51b81526020600482015260176024820152764272696467653a206269746d61736b20746f6f2062696760481b604482015260640161046b565b60006105a386868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115e292505050565b905060006105e685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170092505050565b604080516080810180835292935061069d929091606b918391820190839060029082845b81548152602001906001019080831161060a57505050918352505060408051808201918290526020909201919060028481019182845b81548152602001906001019080831161064057505050505081525050838d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792508991506117b99050565b6106e55760405162461bcd60e51b8152602060048201526019602482015278084e4d2c8ceca7440daead8e8d2e6d2ce40dad2e6dac2e8c6d603b1b604482015260640161046b565b600061073e8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107398e8e6119bb565b611a0f565b905060008060008061074f85611b44565b92965090945092509050610764607084611b90565b156107a05760405162461bcd60e51b815260206004820152600c60248201526b20b63932b0b23c9039b2b2b760a11b604482015260640161046b565b60006107f5836040518060400160405280602081526020017f4272696467653a20726563656976655265717565737456323a206661696c6564815250846001600160a01b0316611be19092919063ffffffff16565b905080516000148061081657508080602001905181019061081691906136a2565b6108885760405162461bcd60e51b815260206004820152603860248201527f4272696467653a20726563656976655265717565737456323a20756e61626c6560448201527f20746f206465636f64652072657475726e656420646174610000000000000000606482015260840161046b565b604080518581526001600160a01b0384166020820152606087811b6bffffffffffffffffffffffff1916928201929092527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2910160405180910390a15050505050505050505050505050505050565b600086866002600061090a610262611bf8565b815260208082019290925260409081016000908120848252835281812085825290925290205460ff1615156001146109845760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640161046b565b61098e8585611c2c565b7f2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea1330878d8d8c8c6040516109c7969594939291906136e8565b60405180910390a15060019a9950505050505050505050565b60008686600260006109f3610262611bf8565b81526020019081526020016000206000610a13836001600160a01b031690565b81526020019081526020016000206000610a33846001600160a01b031690565b815260208101919091526040016000205460ff161515600114610a985760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640161046b565b610aa28585611c2c565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878d8d8d8d8d6040516109c79796959493929190613747565b606f546001600160a01b0316610af1611bf8565b6001600160a01b031614610b3a5760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b604482015260640161046b565b6000606b604051602001610b4e91906137dd565b60405160208183030381529060405290508115610c4557606f8054600160a81b900463ffffffff16906015610b82836137fb565b91906101000a81548163ffffffff021916908363ffffffff16021790555050610ba9613060565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa925898282604051602001610bdc9190613842565b60408051808303601f1901815290829052606f54610c0b9392600191600160a81b900463ffffffff169061386e565b60405180910390a180518190606b90610c279082906002613085565b506020820151610c3d9060028084019190613085565b505050505050565b606f546040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258991610c8b9184918291600191600160a81b900463ffffffff169061386e565b60405180910390a15b5050565b606a8054610ca5906138b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd1906138b2565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b505050505081565b610d2e611bf8565b6001600160a01b0316610d496037546001600160a01b031690565b6001600160a01b031614610d6f5760405162461bcd60e51b815260040161046b906138ed565b610d796000611c9e565b565b6060600080606b604051602001610d9291906137dd565b60408051808303601f19018152919052606f549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b606f5463ffffffff80831691610de791600160a81b909104166001613922565b63ffffffff1614610e3a5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a2077726f6e672065706f6368206e756d626572000000000000604482015260640161046b565b6000610e7b8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115e292505050565b90506000610ebe89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115e292505050565b90506000610f0188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170092505050565b606b54909150151580610f155750606c5415155b156110f857606f54600390610f3590600160a01b900460ff166002613659565b610f3f919061368e565b610f48876115b3565b1015610f965760405162461bcd60e51b815260206004820152601f60248201527f4272696467653a206e6f7420656e6f756768207061727469636970616e747300604482015260640161046b565b606f5460ff600160a01b90910481161480610fc05750606f546001600160a01b90910460ff161b86105b6110065760405162461bcd60e51b81526020600482015260176024820152764272696467653a206269746d61736b20746f6f2062696760481b604482015260640161046b565b6000836000015184602001518787604051602001611027949392919061394a565b60408051808303601f19018152608083018083529093506110ae9291606b918391820190839060029082845b81548152602001906001019080831161105357505050918352505060408051808201918290526020909201919060028481019182845b815481526020019060010190808311611089575050505050815250508483858b6117b9565b6110f65760405162461bcd60e51b8152602060048201526019602482015278084e4d2c8ceca7440daead8e8d2e6d2ce40dad2e6dac2e8c6d603b1b604482015260640161046b565b505b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589606b60405160200161112b91906137dd565b6040516020818303038152906040528460405160200161114b9190613842565b60408051601f198184030181529082905261116b9291600090899061386e565b60405180910390a182518390606b906111879082906002613085565b50602082015161119d9060028084019190613085565b5050606f805464ffffffffff60a01b1916600160a01b60ff89160263ffffffff60a81b191617600160a81b63ffffffff881602179055506111de6070611cf0565b505050505050505050505050565b600454610100900460ff166112075760045460ff161561120b565b303b155b61126e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046b565b600454610100900460ff16158015611290576004805461ffff19166101011790555b611298611d6e565b6112a0611d95565b60408051808201909152600580825264322e322e3360d81b60209092019182526112cc91606a916130c3565b506112d5611bf8565b606f80546001600160a01b0319166001600160a01b03929092169190911790556112fe82611dcc565b8015610c94576004805461ff00191690555050565b61131b611bf8565b6001600160a01b03166113366037546001600160a01b031690565b6001600160a01b03161461135c5760405162461bcd60e51b815260040161046b906138ed565b61136581611dcc565b50565b806113b55760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e76616c69642027746f27206164647265737300000000604482015260640161046b565b826114025760405162461bcd60e51b815260206004820152601e60248201527f4272696467653a20696e76616c6964202766726f6d2720616464726573730000604482015260640161046b565b6000928352600260209081526040808520938552928152828420918452529020805460ff19166001179055565b606f546001600160a01b031615806114615750606f546001600160a01b0316611456611bf8565b6001600160a01b0316145b6114a05760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b604482015260640161046b565b606f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606f80546001600160a01b0319166001600160a01b0392909216919091179055565b611504611bf8565b6001600160a01b031661151f6037546001600160a01b031690565b6001600160a01b0316146115455760405162461bcd60e51b815260040161046b906138ed565b6001600160a01b0381166115aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046b565b61136581611c9e565b60005b81156115dd576115c7600183613991565b90911690806115d5816139a8565b9150506115b6565b919050565b6115ea613060565b60408051600480825260a082019092526000916020820160808036833701905050905060205b815161161d906020613659565b811161163d5783810151828201526116366020826139d9565b9050611610565b50806000815181106116515761165161362d565b60209081029190910101518251528051819060019081106116745761167461362d565b602090810291909101015182516001602002015280518190600290811061169d5761169d61362d565b602002602001015182602001516000600281106116bc576116bc61362d565b60200201528051819060039081106116d6576116d661362d565b602002602001015182602001516001600281106116f5576116f561362d565b602002015250919050565b6040805180820182526000808252602082018190528251600280825260608201909452919290919081602001602082028036833701905050905060205b815161174a906020613659565b811161176a5783810151828201526117636020826139d9565b905061173d565b508060008151811061177e5761177e61362d565b6020026020010151826000018181525050806001815181106117a2576117a261362d565b602002602001015182602001818152505050919050565b60408051808201909152600080825260208201819052908160015b8415611843578481161561182e576117ec8186613991565b945061182b836118268b600001518c6020015186604051602001611812939291906139f1565b604051602081830303815290604052611dee565b611eb1565b92505b60011b8161183b816139a8565b9250506117d4565b60408051600380825260808201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161185b5750506040805160038082526080820190925291925060009190602082015b6118a5613060565b81526020019060019003908161189d5790505090506118c388611f49565b826000815181106118d6576118d661362d565b60200260200101819052506119018b600001518c602001518b60405160200161181293929190613a19565b826001815181106119145761191461362d565b602002602001018190525084826002815181106119335761193361362d565b6020026020010181905250611946611fd7565b816000815181106119595761195961362d565b602002602001018190525089816001815181106119785761197861362d565b60200260200101819052508a816002815181106119975761199761362d565b60200260200101819052506119ac8282612097565b9b9a5050505050505050505050565b6000611a086119ce606860488587613a54565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123ed92505050565b9392505050565b606060006060611a1f8583612448565b925090506000611a2e82612556565b905060006021848851611a419190613991565b611a4b919061368e565b905060008060005b83811015611af257611a658a886125c8565b97509150611a738a88612683565b9750925060ff8216611a9057611a898386612711565b9450611ae0565b8160ff1660011415611aa657611a898584612711565b60405162461bcd60e51b815260206004820152600f60248201526e1b595c9adb19541c9bdd9948195bd9608a1b604482015260640161046b565b80611aea816139a8565b915050611a53565b50878414611b355760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19541c9bdd99481c9bdbdd60821b604482015260640161046b565b50929450505050505b92915050565b60008060608180611b55868261278f565b9095509050611b648682612683565b9094509050611b738682612448565b9093509050611b82868261278f565b509496939550919392915050565b60008181526020839052604081205460ff1615611baf57506001611b3e565b506000818152602083815260408220805460ff1916600190811790915593840180549485018155825281209092015590565b6060611bf08484600085612827565b949350505050565b600060143610801590611c1557506069546001600160a01b031633145b15611c27575060131936013560601c90565b503390565b6001600160a01b038216600090815260016020526040812080548392909190611c54836139a8565b9190505514610c945760405162461bcd60e51b8152602060048201526016602482015275084e4d2c8ceca7440dcdedcc6ca40dad2e6dac2e8c6d60531b604482015260640161046b565b603780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b6001820154811015611d5f576000826000016000846001018481548110611d1c57611d1c61362d565b9060005260206000200154815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611d57906139a8565b915050611cf3565b50611365600182016000613136565b600454610100900460ff16610d795760405162461bcd60e51b815260040161046b90613a7e565b600454610100900460ff16611dbc5760405162461bcd60e51b815260040161046b90613a7e565b610d79611dc7611bf8565b611c9e565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b60408051808201909152600080825260208201526000600283604051611e149190613ac9565b602060405180830381855afa158015611e31573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e549190613ae5565b90506000611e70600080516020613c6783398151915283613afe565b905060005b611e7e8261294f565b90508015611e9f576040805180820190915291825260208201529392505050565b611eaa6001836139d9565b9150611e75565b6040805180820190915260008082526020820152611ecd613154565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa905080611f415760405162461bcd60e51b8152602060048201526011602482015270105919081c1bda5b9d1cc819985a5b1959607a1b604482015260640161046b565b505092915050565b6040805180820190915260008082526020820152611f668261298b565b15611f84575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020613c678339815191528460200151611fb79190613afe565b611fcf90600080516020613c67833981519152613991565b905292915050565b611fdf613060565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b600081518351146120e25760405162461bcd60e51b81526020600482015260156024820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b604482015260640161046b565b825160006120f1826006613659565b905060008167ffffffffffffffff81111561210e5761210e6139c3565b604051908082528060200260200182016040528015612137578160200160208202803683370190505b50905060005b83811015612372578681815181106121575761215761362d565b602002602001015160000151828260066121719190613659565b61217c9060006139d9565b8151811061218c5761218c61362d565b6020026020010181815250508681815181106121aa576121aa61362d565b602002602001015160200151828260066121c49190613659565b6121cf9060016139d9565b815181106121df576121df61362d565b6020026020010181815250508581815181106121fd576121fd61362d565b6020908102919091010151515182612216836006613659565b6122219060026139d9565b815181106122315761223161362d565b60200260200101818152505085818151811061224f5761224f61362d565b6020908102919091018101515101518261226a836006613659565b6122759060036139d9565b815181106122855761228561362d565b6020026020010181815250508581815181106122a3576122a361362d565b6020026020010151602001516000600281106122c1576122c161362d565b6020020151826122d2836006613659565b6122dd9060046139d9565b815181106122ed576122ed61362d565b60200260200101818152505085818151811061230b5761230b61362d565b6020026020010151602001516001600281106123295761232961362d565b60200201518261233a836006613659565b6123459060056139d9565b815181106123555761235561362d565b60209081029190910101528061236a816139a8565b91505061213d565b5061237b613172565b6000602082602086026020860160086107d05a03fa9050806123df5760405162461bcd60e51b815260206004820152601960248201527f50616972696e67206f7065726174696f6e206661696c65642e00000000000000604482015260640161046b565b505115159695505050505050565b600081516020146124405760405162461bcd60e51b815260206004820152601760248201527f6279746573206c656e677468206973206e6f742033322e000000000000000000604482015260640161046b565b506020015190565b606060008061245785856129a1565b865190955090915061246982866139d9565b1115801561247f575061247c81856139d9565b84105b6124d75760405162461bcd60e51b8152602060048201526024808201527f4e65787456617242797465732c206f66667365742065786365656473206d6178604482015263696d756d60e01b606482015260840161046b565b6060811580156124f25760405191506020820160405261253c565b6040519150601f8316801560200281840101848101888315602002848c0101015b8183101561252b578051835260209283019201612513565b5050848452601f01601f1916604052505b508061254883876139d9565b9350935050505b9250929050565b6000600260008360405160200161256e929190613b12565b60408051601f198184030181529082905261258891613ac9565b602060405180830381855afa1580156125a5573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b3e9190613ae5565b60008083518360016125da91906139d9565b111580156125f157506125ee8360016139d9565b83105b6126475760405162461bcd60e51b815260206004820152602160248201527f4e65787455696e74382c204f66667365742065786365656473206d6178696d756044820152606d60f81b606482015260840161046b565b6000604051846020870101518060001a82535060018101604052601f8103519150508084600161267791906139d9565b92509250509250929050565b600080835183602061269591906139d9565b111580156126ac57506126a98360206139d9565b83105b6126f85760405162461bcd60e51b815260206004820181905260248201527f4e657874486173682c206f66667365742065786365656473206d6178696d756d604482015260640161046b565b60006020840185015190508084602061267791906139d9565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f198184030181529082905261274f91613ac9565b602060405180830381855afa15801561276c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611a089190613ae5565b60008083518360146127a191906139d9565b111580156127b857506127b58360146139d9565b83105b6128105760405162461bcd60e51b815260206004820152602360248201527f4e657874416464726573732c206f66667365742065786365656473206d6178696044820152626d756d60e81b606482015260840161046b565b83830160200151606081901c6126778560146139d9565b6060824710156128885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046b565b843b6128d65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046b565b600080866001600160a01b031685876040516128f29190613ac9565b60006040518083038185875af1925050503d806000811461292f576040519150601f19603f3d011682016040523d82523d6000602084013e612934565b606091505b5091509150612944828286612afc565b979650505050505050565b6000611b3e600080516020613c678339815191528061297085600383612b35565b61297b9060036139d9565b6129859190613afe565b90612b80565b8051600090158015611b3e575050602001511590565b60008060006129b085856125c8565b94509050600060fd60ff83161415612a3f576129cc8686612d61565b955061ffff16905060fd81108015906129e7575061ffff8111155b612a335760405162461bcd60e51b815260206004820152601f60248201527f4e65787455696e7431362c2076616c7565206f7574736964652072616e676500604482015260640161046b565b925083915061254f9050565b8160ff1660fe1415612a9057612a558686612e1a565b955063ffffffff16905061ffff81118015612a74575063ffffffff8111155b612a335760405162461bcd60e51b815260040161046b90613b41565b8160ff1660ff1415612ad757612aa68686612eeb565b955067ffffffffffffffff16905063ffffffff8111612a335760405162461bcd60e51b815260040161046b90613b41565b5060ff811660fd8110612a335760405162461bcd60e51b815260040161046b90613b41565b60608315612b0b575081611a08565b825115612b1b5782518084602001fd5b8160405162461bcd60e51b815260040161046b91906134a2565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa612b7657600080fd5b5051949350505050565b6000612b8c8383612fbc565b600114612b9b57506000611b3e565b82612ba857506000611b3e565b612bb3600483613afe565b60031415612be357612bdc836004612bcc8560016139d9565b612bd6919061368e565b84612b35565b9050611b3e565b6000612bf0600184613991565b905060005b612c00600283613afe565b612c2357612c0f60028361368e565b9150612c1c8160016139d9565b9050612bf5565b60025b612c308186612fbc565b60001914612c4a57612c438160016139d9565b9050612c26565b6000612c6d876002612c5d8760016139d9565b612c67919061368e565b88612b35565b90506000612c7c888689612b35565b90506000612c8b84878a612b35565b905084600080845b5060009050845b83821015612cd0578060011415612cb057612cd0565b612cbc8160028e612b35565b905081612cc8816139a8565b925050612c9a565b81612ce757869a5050505050505050505050611b3e565b612d12856001612cf78588613991565b612d019190613991565b612d0c906002613c5a565b8e612b35565b92508b612d1f8480613659565b612d299190613afe565b94508b612d368489613659565b612d409190613afe565b96508b612d4d8688613659565b612d579190613afe565b9550819350612c93565b6000808351836002612d7391906139d9565b11158015612d8a5750612d878360026139d9565b83105b612de15760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7431362c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840161046b565b6000604051846020870101518060011a82538060001a60018301535060028101604052601e8103519150508084600261267791906139d9565b6000808351836004612e2c91906139d9565b11158015612e435750612e408360046139d9565b83105b612e9a5760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7433322c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840161046b565b600060405160046000600182038760208a0101515b83831015612ecf5780821a83860153600183019250600182039150612eaf565b505050016040819052601f1901519050806126778560046139d9565b6000808351836008612efd91906139d9565b11158015612f145750612f118360086139d9565b83105b612f6b5760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7436342c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840161046b565b600060405160086000600182038760208a0101515b83831015612fa05780821a83860153600183019250600182039150612f80565b505050016040819052601f1901519050806126778560086139d9565b600080612fe0846002612fd0600187613991565b612fda919061368e565b85612b35565b9050801580612fef5750806001145b15612ffb579050611b3e565b613006600184613991565b81141561301857600019915050611b3e565b60405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e000000604482015260640161046b565b6040518060400160405280613073613190565b8152602001613080613190565b905290565b82600281019282156130b3579160200282015b828111156130b3578251825591602001919060010190613098565b506130bf9291506131ae565b5090565b8280546130cf906138b2565b90600052602060002090601f0160209004810192826130f157600085556130b3565b82601f1061310a57805160ff19168380011785556130b3565b828001600101855582156130b357918201828111156130b3578251825591602001919060010190613098565b508054600082559060005260206000209081019061136591906131ae565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5b808211156130bf57600081556001016131af565b6000602082840312156131d557600080fd5b5035919050565b60008083601f8401126131ee57600080fd5b50813567ffffffffffffffff81111561320657600080fd5b60208301915083602082850101111561254f57600080fd5b600080600080600080600080600060a08a8c03121561323c57600080fd5b893567ffffffffffffffff8082111561325457600080fd5b6132608d838e016131dc565b909b50995060208c013591508082111561327957600080fd5b6132858d838e016131dc565b909950975060408c013591508082111561329e57600080fd5b6132aa8d838e016131dc565b909750955060608c01359150808211156132c357600080fd5b506132d08c828d016131dc565b9a9d999c50979a9699959894979660800135949350505050565b80356001600160a01b03811681146115dd57600080fd5b60006020828403121561331357600080fd5b611a08826132ea565b60008060008060008060008060e0898b03121561333857600080fd5b883567ffffffffffffffff81111561334f57600080fd5b61335b8b828c016131dc565b9099509750506020890135955060408901359450606089013593506080890135925061338960a08a016132ea565b915060c089013590509295985092959890939650565b60008060008060008060008060e0898b0312156133bb57600080fd5b883567ffffffffffffffff8111156133d257600080fd5b6133de8b828c016131dc565b90995097506133f1905060208a016132ea565b95506133ff60408a016132ea565b9450606089013593506080890135925061338960a08a016132ea565b801515811461136557600080fd5b60006020828403121561343b57600080fd5b8135611a088161341b565b60005b83811015613461578181015183820152602001613449565b83811115613470576000848401525b50505050565b6000815180845261348e816020860160208601613446565b601f01601f19169290920160200192915050565b602081526000611a086020830184613476565b600080600080600060a086880312156134cd57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6060815260006135036060830186613476565b905060ff8416602083015263ffffffff83166040830152949350505050565b803563ffffffff811681146115dd57600080fd5b600080600080600080600080600060c08a8c03121561355457600080fd5b893567ffffffffffffffff8082111561356c57600080fd5b6135788d838e016131dc565b909b50995060208c013591508082111561359157600080fd5b61359d8d838e016131dc565b909950975060408c01359150808211156135b657600080fd5b506135c38c828d016131dc565b90965094505060608a0135925060808a013560ff811681146135e457600080fd5b91506135f260a08b01613522565b90509295985092959850929598565b60008060006060848603121561361657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561367357613673613643565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261369d5761369d613678565b500490565b6000602082840312156136b457600080fd5b8151611a088161341b565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c08152600061371260c08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b88602084015287604084015282810360608401526137318187896136bf565b6080840195909552505060a00152949350505050565b60e08152600061377160e08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b6001600160a01b038a81166020850152604084018a9052838203606085015261379b82898b6136bf565b96811660808501529490941660a08301525060c0015250949350505050565b8060005b60028110156134705781548452602090930192600191820191016137be565b608081016137eb82846137ba565b611b3e60408301600285016137ba565b600063ffffffff8083168181141561381557613815613643565b6001019392505050565b8060005b6002811015613470578151845260209384019390910190600101613823565b600060808201905061385582845161381f565b6020830151613867604084018261381f565b5092915050565b6080815260006138816080830187613476565b82810360208401526138938187613476565b9415156040840152505063ffffffff9190911660609091015292915050565b600181811c908216806138c657607f821691505b602082108114156138e757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600063ffffffff80831681851680830382111561394157613941613643565b01949350505050565b613954818661381f565b613961604082018561381f565b60f89290921b6001600160f81b031916608083015260e01b6001600160e01b031916608182015260850192915050565b6000828210156139a3576139a3613643565b500390565b60006000198214156139bc576139bc613643565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600082198211156139ec576139ec613643565b500190565b6139fb818561381f565b613a08604082018461381f565b608081019190915260a00192915050565b613a23818561381f565b613a30604082018461381f565b60008251613a45816080850160208701613446565b91909101608001949350505050565b60008085851115613a6457600080fd5b83861115613a7157600080fd5b5050820193919092039150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613adb818460208701613446565b9190910192915050565b600060208284031215613af757600080fd5b5051919050565b600082613b0d57613b0d613678565b500690565b60ff60f81b8360f81b16815260008251613b33816001850160208701613446565b919091016001019392505050565b6020808252818101527f4e65787456617255696e742c2076616c7565206f7574736964652072616e6765604082015260600190565b600181815b80851115613bb1578160001904821115613b9757613b97613643565b80851615613ba457918102915b93841c9390800290613b7b565b509250929050565b600082613bc857506001611b3e565b81613bd557506000611b3e565b8160018114613beb5760028114613bf557613c11565b6001915050611b3e565b60ff841115613c0657613c06613643565b50506001821b611b3e565b5060208310610133831016604e8410600b8410161715613c34575081810a611b3e565b613c3e8383613b76565b8060001904821115613c5257613c52613643565b029392505050565b6000611a088383613bb956fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220bcf0c4796ebddf0432049f08c6a790abe62e85588af4e860d4573519f8c8010664736f6c634300080a0033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Bridge *BridgeTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Bridge.gsn = opts
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCaller) ListNode(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_listNode")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCallerSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Bridge.Contract.CastToAddress(&_Bridge.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Bridge.Contract.CastToAddress(&_Bridge.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Bridge.Contract.CastToBytes32(&_Bridge.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Bridge.Contract.CastToBytes32(&_Bridge.CallOpts, a)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCallerSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCallerSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCallerSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeCaller) StatFilterLen(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "statFilterLen")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeSession) StatFilterLen() (*big.Int, error) {
	return _Bridge.Contract.StatFilterLen(&_Bridge.CallOpts)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeCallerSession) StatFilterLen() (*big.Int, error) {
	return _Bridge.Contract.StatFilterLen(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCallerSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCallerSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}
func (_Bridge *BridgeTransactor) AddContractBindOverGsn(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}
func (_Bridge *BridgeSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _Bridge.Contract.AddContractBindOverGsn(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}
func (_Bridge *BridgeTransactorSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _Bridge.Contract.AddContractBindOverGsn(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoTransferOwnership", newDao)
}
func (_Bridge *BridgeTransactor) DaoTransferOwnershipOverGsn(opts *bind.TransactOpts, newDao common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}
func (_Bridge *BridgeSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _Bridge.Contract.DaoTransferOwnershipOverGsn(&_Bridge.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}
func (_Bridge *BridgeTransactorSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _Bridge.Contract.DaoTransferOwnershipOverGsn(&_Bridge.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequestOverGsn(opts *bind.TransactOpts, resetEpoch bool) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}
func (_Bridge *BridgeSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _Bridge.Contract.DaoUpdateEpochRequestOverGsn(&_Bridge.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _Bridge.Contract.DaoUpdateEpochRequestOverGsn(&_Bridge.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "initialize", forwarder)
}
func (_Bridge *BridgeTransactor) InitializeOverGsn(opts *bind.TransactOpts, forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, forwarder)
}
func (_Bridge *BridgeSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.InitializeOverGsn(&_Bridge.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, forwarder)
}
func (_Bridge *BridgeTransactorSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.InitializeOverGsn(&_Bridge.TransactOpts, forwarder)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactor) ReceiveRequestV2OverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.ReceiveRequestV2OverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.ReceiveRequestV2OverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}
func (_Bridge *BridgeTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}
func (_Bridge *BridgeSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Bridge.Contract.RenounceOwnershipOverGsn(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}
func (_Bridge *BridgeTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Bridge.Contract.RenounceOwnershipOverGsn(&_Bridge.TransactOpts)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_Bridge *BridgeTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.SetTrustedForwarder(&_Bridge.TransactOpts, _forwarder)
}
func (_Bridge *BridgeSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.SetTrustedForwarderOverGsn(&_Bridge.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.SetTrustedForwarder(&_Bridge.TransactOpts, _forwarder)
}
func (_Bridge *BridgeTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.SetTrustedForwarderOverGsn(&_Bridge.TransactOpts, _forwarder)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_Bridge *BridgeTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}
func (_Bridge *BridgeSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Bridge.Contract.TransferOwnershipOverGsn(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}
func (_Bridge *BridgeTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Bridge.Contract.TransferOwnershipOverGsn(&_Bridge.TransactOpts, newOwner)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactor) TransmitRequestV2OverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2OverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactorSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2OverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactor) TransmitRequestV2ToSolanaOverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolanaOverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactorSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolanaOverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactor) UpdateEpoch(opts *bind.TransactOpts, _newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateEpoch", _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}
func (_Bridge *BridgeTransactor) UpdateEpochOverGsn(opts *bind.TransactOpts, _newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "updateEpoch", _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}
func (_Bridge *BridgeSession) UpdateEpochOverGsn(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (common.Hash, error) {
	return _Bridge.Contract.UpdateEpochOverGsn(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactorSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}
func (_Bridge *BridgeTransactorSession) UpdateEpochOverGsn(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (common.Hash, error) {
	return _Bridge.Contract.UpdateEpochOverGsn(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// BridgeNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Bridge contract.
type BridgeNewEpochIterator struct {
	Event *BridgeNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewEpoch represents a NewEpoch event raised by the Bridge contract.
type BridgeNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*BridgeNewEpochIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &BridgeNewEpochIterator{contract: _Bridge.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *BridgeNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewEpoch)
				if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) ParseNewEpoch(log types.Log) (*BridgeNewEpoch, error) {
	event := new(BridgeNewEpoch)
	if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the Bridge contract.
type BridgeOracleRequestIterator struct {
	Event *BridgeOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequest represents a OracleRequest event raised by the Bridge contract.
type BridgeOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*BridgeOracleRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestIterator{contract: _Bridge.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequest)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequest(log types.Log) (*BridgeOracleRequest, error) {
	event := new(BridgeOracleRequest)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the Bridge contract.
type BridgeOracleRequestSolanaIterator struct {
	Event *BridgeOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequestSolana represents a OracleRequestSolana event raised by the Bridge contract.
type BridgeOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*BridgeOracleRequestSolanaIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestSolanaIterator{contract: _Bridge.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequestSolana)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequestSolana(log types.Log) (*BridgeOracleRequestSolana, error) {
	event := new(BridgeOracleRequestSolana)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the Bridge contract.
type BridgeReceiveRequestIterator struct {
	Event *BridgeReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeReceiveRequest represents a ReceiveRequest event raised by the Bridge contract.
type BridgeReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*BridgeReceiveRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeReceiveRequestIterator{contract: _Bridge.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *BridgeReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeReceiveRequest)
				if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) ParseReceiveRequest(log types.Log) (*BridgeReceiveRequest, error) {
	event := new(BridgeReceiveRequest)
	if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
