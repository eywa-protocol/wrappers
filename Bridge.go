// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_listNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statFilterLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506139f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063579de075116100de578063aa764d7c11610097578063e27ad9a511610071578063e27ad9a5146103d9578063f21b79f9146103ec578063f2a0c8c0146103f4578063f2fde38b1461040757600080fd5b8063aa764d7c146103a0578063c4d66de8146103b3578063da742228146103c657600080fd5b8063579de075146102de5780636f35219614610304578063715018a61461035f578063757991a8146103675780637da0a8771461037e5780638da5cb5b1461038f57600080fd5b80633e7e25c1116101305780633e7e25c1146102545780634162169f1461026e57806346dec6cb14610281578063486ff0cd146102945780634f907a69146102a9578063572b6c05146102bc57600080fd5b806305e3c05b146101785780630e03e490146101a9578063135160af146101d25780632d0335ab146101e757806331b433f91461021e578063329ef45f14610241575b600080fd5b606f5461018f90600160a81b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6101ba6101b7366004613024565b90565b6040516001600160a01b0390911681526020016101a0565b6101e56101e036600461307f565b61041a565b005b6102106101f5366004613162565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016101a0565b61023161022c36600461317d565b6106f2565b60405190151581526020016101a0565b61023161024f366004613200565b6107db565b610210610262366004613162565b6001600160a01b031690565b606f546101ba906001600160a01b031681565b6101e561028f36600461328a565b6108d8565b61029c610a93565b6040516101a09190613303565b6101e56102b736600461307f565b610b21565b6102316102ca366004613162565b6069546001600160a01b0391821691161490565b606f546102f290600160a01b900460ff1681565b60405160ff90911681526020016101a0565b610210610312366004613316565b6040805160208082019490945280820192909252606082019490945246608082015260a081019290925260c0808301949094528251808303909401845260e0909101909152815191012090565b6101e5610d91565b61036f610de6565b6040516101a093929190613351565b6069546001600160a01b03166101ba565b6037546001600160a01b03166101ba565b6000546101ba906001600160a01b031681565b6101e56103c1366004613162565b610e32565b6101e56103d4366004613162565b610f59565b6101e56103e7366004613383565b610fae565b607154610210565b6101e5610402366004613162565b611075565b6101e5610415366004613162565b611142565b606b5415158061042b5750606c5415155b61046c5760405162461bcd60e51b815260206004820152600d60248201526c195c1bd8da081b9bdd081cd95d609a1b60448201526064015b60405180910390fd5b6040805160808101808352610501928c928c928a928a928a928a928a9291606b91839190820190839060029082845b81548152602001906001019080831161049b57505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116104d157505050919092525050606f54600160a01b900460ff1690506111f9565b600061054e88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054992508e91508d90506113d7565b61142b565b905060008060008061055f85611560565b929650909450925090506105746070856115ae565b156105b05760405162461bcd60e51b815260206004820152600c60248201526b20b63932b0b23c9039b2b2b760a11b6044820152606401610463565b6000610605826040518060400160405280602081526020017f4272696467653a20726563656976655265717565737456323a206661696c6564815250856001600160a01b03166115ff9092919063ffffffff16565b905080516000148061062657508080602001905181019061062691906133c5565b6106985760405162461bcd60e51b815260206004820152603860248201527f4272696467653a20726563656976655265717565737456323a20756e61626c6560448201527f20746f206465636f64652072657475726e6564206461746100000000000000006064820152608401610463565b604080518681526001600160a01b03851660208201529081018590527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f29060600160405180910390a1505050505050505050505050505050565b6000868660026000610705610262611616565b815260208082019290925260409081016000908120848252835281812085825290925290205460ff16151560011461077f5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e74726163740000000000006044820152606401610463565b610789858561164a565b7f2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea1330878d8d8c8c6040516107c29695949392919061340b565b60405180910390a15060019a9950505050505050505050565b60008686600260006107ee610262611616565b8152602001908152602001600020600061080e836001600160a01b031690565b8152602001908152602001600020600061082e846001600160a01b031690565b815260208101919091526040016000205460ff1615156001146108935760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e74726163740000000000006044820152606401610463565b61089d858561164a565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878d8d8d8d8d6040516107c2979695949392919061346a565b606f546001600160a01b03166108ec611616565b6001600160a01b0316146109355760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b6044820152606401610463565b6000606b6040516020016109499190613500565b60405160208183030381529060405290508115610a4057606f8054600160a81b900463ffffffff1690601561097d83613534565b91906101000a81548163ffffffff021916908363ffffffff160217905550506109a4612ec1565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258982826040516020016109d7919061357b565b60408051808303601f1901815290829052606f54610a069392600191600160a81b900463ffffffff16906135a7565b60405180910390a180518190606b90610a229082906002612ee6565b506020820151610a389060028084019190612ee6565b505050505050565b606f546040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258991610a869184918291600191600160a81b900463ffffffff16906135a7565b60405180910390a15b5050565b606a8054610aa0906135eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610acc906135eb565b8015610b195780601f10610aee57610100808354040283529160200191610b19565b820191906000526020600020905b815481529060010190602001808311610afc57829003601f168201915b505050505081565b606b54151580610b325750606c5415155b15610bc5576040805160808101808352606b8054938301938452610bc5938d938d938b938b938b938b938b93919283918390600290606c6060860180831161049b575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116104d157505050919092525050606f54600160a01b900460ff1690506111f9565b6000610c0d88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054992508e91508d90506113d7565b90506000806000610c1d846116bc565b606f54929550909350915063ffffffff80851691610c4591600160a81b909104166001613626565b63ffffffff1614610c8d5760405162461bcd60e51b81526020600482015260126024820152713bb937b7339032b837b1b410373ab6b132b960711b6044820152606401610463565b6000610c98836116f7565b80519091508190606b90610caf9082906002612ee6565b506020820151610cc59060028084019190612ee6565b5050606f805464ffffffffff60a01b1916600160a01b60ff86160263ffffffff60a81b191617600160a81b63ffffffff88160217905550610d066070611815565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589606b604051602001610d399190613500565b60405160208183030381529060405282604051602001610d59919061357b565b60408051601f1981840301815290829052610d79929160009089906135a7565b60405180910390a15050505050505050505050505050565b610d99611616565b6001600160a01b0316610db46037546001600160a01b031690565b6001600160a01b031614610dda5760405162461bcd60e51b81526004016104639061364e565b610de46000611893565b565b6060600080606b604051602001610dfd9190613500565b60408051808303601f19018152919052606f549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b600454610100900460ff16610e4d5760045460ff1615610e51565b303b155b610eb45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610463565b600454610100900460ff16158015610ed6576004805461ffff19166101011790555b610ede6118e5565b610ee661190c565b60408051808201909152600580825264322e322e3360d81b6020909201918252610f1291606a91612f24565b50610f1b611616565b606f80546001600160a01b0319166001600160a01b0392909216919091179055610f4482611943565b8015610a8f576004805461ff00191690555050565b610f61611616565b6001600160a01b0316610f7c6037546001600160a01b031690565b6001600160a01b031614610fa25760405162461bcd60e51b81526004016104639061364e565b610fab81611943565b50565b80610ffb5760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e76616c69642027746f272061646472657373000000006044820152606401610463565b826110485760405162461bcd60e51b815260206004820152601e60248201527f4272696467653a20696e76616c6964202766726f6d27206164647265737300006044820152606401610463565b6000928352600260209081526040808520938552928152828420918452529020805460ff19166001179055565b606f546001600160a01b031615806110a75750606f546001600160a01b031661109c611616565b6001600160a01b0316145b6110e65760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b6044820152606401610463565b606f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606f80546001600160a01b0319166001600160a01b0392909216919091179055565b61114a611616565b6001600160a01b03166111656037546001600160a01b031690565b6001600160a01b03161461118b5760405162461bcd60e51b81526004016104639061364e565b6001600160a01b0381166111f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b610fab81611893565b600061123a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116f792505050565b9050600061127d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061196592505050565b9050600361128f60ff85166002613683565b61129991906136b8565b6112a286611a1e565b10156112f05760405162461bcd60e51b815260206004820152601760248201527f6e6f7420656e6f756768207061727469636970616e74730000000000000000006044820152606401610463565b8260ff1660ff14806113075750600160ff84161b85105b6113455760405162461bcd60e51b815260206004820152600f60248201526e6269746d61736b20746f6f2062696760881b6044820152606401610463565b61138a84838d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792508b9150611a4d9050565b6113ca5760405162461bcd60e51b81526020600482015260116024820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b6044820152606401610463565b5050505050505050505050565b60006114246113ea6068604885876136cc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c4f92505050565b9392505050565b60606000606061143b8583611caa565b92509050600061144a82611db8565b90506000602184885161145d91906136f6565b61146791906136b8565b905060008060005b8381101561150e576114818a88611e2a565b9750915061148f8a88611ee5565b9750925060ff82166114ac576114a58386611f73565b94506114fc565b8160ff16600114156114c2576114a58584611f73565b60405162461bcd60e51b815260206004820152600f60248201526e1b595c9adb19541c9bdd9948195bd9608a1b6044820152606401610463565b806115068161370d565b91505061146f565b508784146115515760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19541c9bdd99481c9bdbdd60821b6044820152606401610463565b50929450505050505b92915050565b6000806000606060006115738682611ee5565b90955090506115828682611ee5565b90945090506115918682611ff1565b90935090506115a08682611caa565b509496939550919392915050565b60008181526020839052604081205460ff16156115cd5750600161155a565b506000818152602083815260408220805460ff1916600190811790915593840180549485018155825281209092015590565b606061160e8484600085612089565b949350505050565b60006014361080159061163357506069546001600160a01b031633145b15611645575060131936013560601c90565b503390565b6001600160a01b0382166000908152600160205260408120805483929091906116728361370d565b9190505514610a8f5760405162461bcd60e51b8152602060048201526016602482015275084e4d2c8ceca7440dcdedcc6ca40dad2e6dac2e8c6d60531b6044820152606401610463565b6000606081806116cc85826121b1565b90945090506116db8582611e2a565b90925090506116ea8582611caa565b5093959394509092915050565b6116ff612ec1565b60408051600480825260a082019092526000916020820160808036833701905050905060205b8151611732906020613683565b811161175257838101518282015261174b60208261373e565b9050611725565b5080600081518110611766576117666133af565b6020908102919091010151825152805181906001908110611789576117896133af565b60209081029190910101518251600160200201528051819060029081106117b2576117b26133af565b602002602001015182602001516000600281106117d1576117d16133af565b60200201528051819060039081106117eb576117eb6133af565b6020026020010151826020015160016002811061180a5761180a6133af565b602002015250919050565b60005b6001820154811015611884576000826000016000846001018481548110611841576118416133af565b9060005260206000200154815260200190815260200160002060006101000a81548160ff021916908315150217905550808061187c9061370d565b915050611818565b50610fab600182016000612f97565b603780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600454610100900460ff16610de45760405162461bcd60e51b815260040161046390613756565b600454610100900460ff166119335760405162461bcd60e51b815260040161046390613756565b610de461193e611616565b611893565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6040805180820182526000808252602082018190528251600280825260608201909452919290919081602001602082028036833701905050905060205b81516119af906020613683565b81116119cf5783810151828201526119c860208261373e565b90506119a2565b50806000815181106119e3576119e36133af565b602002602001015182600001818152505080600181518110611a0757611a076133af565b602002602001015182602001818152505050919050565b60005b8115611a4857611a326001836136f6565b9091169080611a408161370d565b915050611a21565b919050565b60408051808201909152600080825260208201819052908160015b8415611ad75784811615611ac257611a8081866136f6565b9450611abf83611aba8b600001518c6020015186604051602001611aa6939291906137a1565b604051602081830303815290604052612282565b612345565b92505b60011b81611acf8161370d565b925050611a68565b60408051600380825260808201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611aef5750506040805160038082526080820190925291925060009190602082015b611b39612ec1565b815260200190600190039081611b31579050509050611b57886123dd565b82600081518110611b6a57611b6a6133af565b6020026020010181905250611b958b600001518c602001518b604051602001611aa6939291906137c9565b82600181518110611ba857611ba86133af565b60200260200101819052508482600281518110611bc757611bc76133af565b6020026020010181905250611bda61246b565b81600081518110611bed57611bed6133af565b60200260200101819052508981600181518110611c0c57611c0c6133af565b60200260200101819052508a81600281518110611c2b57611c2b6133af565b6020026020010181905250611c40828261252b565b9b9a5050505050505050505050565b60008151602014611ca25760405162461bcd60e51b815260206004820152601760248201527f6279746573206c656e677468206973206e6f742033322e0000000000000000006044820152606401610463565b506020015190565b6060600080611cb98585612881565b8651909550909150611ccb828661373e565b11158015611ce15750611cde818561373e565b84105b611d395760405162461bcd60e51b8152602060048201526024808201527f4e65787456617242797465732c206f66667365742065786365656473206d6178604482015263696d756d60e01b6064820152608401610463565b606081158015611d5457604051915060208201604052611d9e565b6040519150601f8316801560200281840101848101888315602002848c0101015b81831015611d8d578051835260209283019201611d75565b5050848452601f01601f1916604052505b5080611daa838761373e565b9350935050505b9250929050565b60006002600083604051602001611dd0929190613804565b60408051601f1981840301815290829052611dea91613833565b602060405180830381855afa158015611e07573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061155a919061384f565b6000808351836001611e3c919061373e565b11158015611e535750611e5083600161373e565b83105b611ea95760405162461bcd60e51b815260206004820152602160248201527f4e65787455696e74382c204f66667365742065786365656473206d6178696d756044820152606d60f81b6064820152608401610463565b6000604051846020870101518060001a82535060018101604052601f81035191505080846001611ed9919061373e565b92509250509250929050565b6000808351836020611ef7919061373e565b11158015611f0e5750611f0b83602061373e565b83105b611f5a5760405162461bcd60e51b815260206004820181905260248201527f4e657874486173682c206f66667365742065786365656473206d6178696d756d6044820152606401610463565b600060208401850151905080846020611ed9919061373e565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f1981840301815290829052611fb191613833565b602060405180830381855afa158015611fce573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611424919061384f565b6000808351836014612003919061373e565b1115801561201a575061201783601461373e565b83105b6120725760405162461bcd60e51b815260206004820152602360248201527f4e657874416464726573732c206f66667365742065786365656473206d6178696044820152626d756d60e81b6064820152608401610463565b83830160200151606081901c611ed985601461373e565b6060824710156120ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610463565b843b6121385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b600080866001600160a01b031685876040516121549190613833565b60006040518083038185875af1925050503d8060008114612191576040519150601f19603f3d011682016040523d82523d6000602084013e612196565b606091505b50915091506121a68282866129dc565b979650505050505050565b60008083518360046121c3919061373e565b111580156121da57506121d783600461373e565b83105b6122315760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7433322c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401610463565b600060405160046000600182038760208a0101515b838310156122665780821a83860153600183019250600182039150612246565b505050016040819052601f190151905080611ed985600461373e565b604080518082019091526000808252602082015260006002836040516122a89190613833565b602060405180830381855afa1580156122c5573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906122e8919061384f565b905060006123046000805160206139a283398151915283613868565b905060005b61231282612a15565b90508015612333576040805180820190915291825260208201529392505050565b61233e60018361373e565b9150612309565b6040805180820190915260008082526020820152612361612fb5565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050806123d55760405162461bcd60e51b8152602060048201526011602482015270105919081c1bda5b9d1cc819985a5b1959607a1b6044820152606401610463565b505092915050565b60408051808201909152600080825260208201526123fa82612a51565b15612418575050604080518082019091526000808252602082015290565b6040518060400160405280836000015181526020016000805160206139a2833981519152846020015161244b9190613868565b612463906000805160206139a28339815191526136f6565b905292915050565b612473612ec1565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b600081518351146125765760405162461bcd60e51b81526020600482015260156024820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b6044820152606401610463565b82516000612585826006613683565b905060008167ffffffffffffffff8111156125a2576125a2613728565b6040519080825280602002602001820160405280156125cb578160200160208202803683370190505b50905060005b83811015612806578681815181106125eb576125eb6133af565b602002602001015160000151828260066126059190613683565b61261090600061373e565b81518110612620576126206133af565b60200260200101818152505086818151811061263e5761263e6133af565b602002602001015160200151828260066126589190613683565b61266390600161373e565b81518110612673576126736133af565b602002602001018181525050858181518110612691576126916133af565b60209081029190910101515151826126aa836006613683565b6126b590600261373e565b815181106126c5576126c56133af565b6020026020010181815250508581815181106126e3576126e36133af565b602090810291909101810151510151826126fe836006613683565b61270990600361373e565b81518110612719576127196133af565b602002602001018181525050858181518110612737576127376133af565b602002602001015160200151600060028110612755576127556133af565b602002015182612766836006613683565b61277190600461373e565b81518110612781576127816133af565b60200260200101818152505085818151811061279f5761279f6133af565b6020026020010151602001516001600281106127bd576127bd6133af565b6020020151826127ce836006613683565b6127d990600561373e565b815181106127e9576127e96133af565b6020908102919091010152806127fe8161370d565b9150506125d1565b5061280f612fd3565b6000602082602086026020860160086107d05a03fa9050806128735760405162461bcd60e51b815260206004820152601960248201527f50616972696e67206f7065726174696f6e206661696c65642e000000000000006044820152606401610463565b505115159695505050505050565b60008060006128908585611e2a565b94509050600060fd60ff8316141561291f576128ac8686612a67565b955061ffff16905060fd81108015906128c7575061ffff8111155b6129135760405162461bcd60e51b815260206004820152601f60248201527f4e65787455696e7431362c2076616c7565206f7574736964652072616e6765006044820152606401610463565b9250839150611db19050565b8160ff1660fe14156129705761293586866121b1565b955063ffffffff16905061ffff81118015612954575063ffffffff8111155b6129135760405162461bcd60e51b81526004016104639061387c565b8160ff1660ff14156129b7576129868686612b20565b955067ffffffffffffffff16905063ffffffff81116129135760405162461bcd60e51b81526004016104639061387c565b5060ff811660fd81106129135760405162461bcd60e51b81526004016104639061387c565b606083156129eb575081611424565b8251156129fb5782518084602001fd5b8160405162461bcd60e51b81526004016104639190613303565b600061155a6000805160206139a283398151915280612a3685600383612bf1565b612a4190600361373e565b612a4b9190613868565b90612c3c565b805160009015801561155a575050602001511590565b6000808351836002612a79919061373e565b11158015612a905750612a8d83600261373e565b83105b612ae75760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7431362c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401610463565b6000604051846020870101518060011a82538060001a60018301535060028101604052601e81035191505080846002611ed9919061373e565b6000808351836008612b32919061373e565b11158015612b495750612b4683600861373e565b83105b612ba05760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7436342c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401610463565b600060405160086000600182038760208a0101515b83831015612bd55780821a83860153600183019250600182039150612bb5565b505050016040819052601f190151905080611ed985600861373e565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa612c3257600080fd5b5051949350505050565b6000612c488383612e1d565b600114612c575750600061155a565b82612c645750600061155a565b612c6f600483613868565b60031415612c9f57612c98836004612c8885600161373e565b612c9291906136b8565b84612bf1565b905061155a565b6000612cac6001846136f6565b905060005b612cbc600283613868565b612cdf57612ccb6002836136b8565b9150612cd881600161373e565b9050612cb1565b60025b612cec8186612e1d565b60001914612d0657612cff81600161373e565b9050612ce2565b6000612d29876002612d1987600161373e565b612d2391906136b8565b88612bf1565b90506000612d38888689612bf1565b90506000612d4784878a612bf1565b905084600080845b5060009050845b83821015612d8c578060011415612d6c57612d8c565b612d788160028e612bf1565b905081612d848161370d565b925050612d56565b81612da357869a505050505050505050505061155a565b612dce856001612db385886136f6565b612dbd91906136f6565b612dc8906002613995565b8e612bf1565b92508b612ddb8480613683565b612de59190613868565b94508b612df28489613683565b612dfc9190613868565b96508b612e098688613683565b612e139190613868565b9550819350612d4f565b600080612e41846002612e316001876136f6565b612e3b91906136b8565b85612bf1565b9050801580612e505750806001145b15612e5c57905061155a565b612e676001846136f6565b811415612e795760001991505061155a565b60405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e0000006044820152606401610463565b6040518060400160405280612ed4612ff1565b8152602001612ee1612ff1565b905290565b8260028101928215612f14579160200282015b82811115612f14578251825591602001919060010190612ef9565b50612f2092915061300f565b5090565b828054612f30906135eb565b90600052602060002090601f016020900481019282612f525760008555612f14565b82601f10612f6b57805160ff1916838001178555612f14565b82800160010185558215612f145791820182811115612f14578251825591602001919060010190612ef9565b5080546000825590600052602060002090810190610fab919061300f565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5b80821115612f205760008155600101613010565b60006020828403121561303657600080fd5b5035919050565b60008083601f84011261304f57600080fd5b50813567ffffffffffffffff81111561306757600080fd5b602083019150836020828501011115611db157600080fd5b600080600080600080600080600060a08a8c03121561309d57600080fd5b893567ffffffffffffffff808211156130b557600080fd5b6130c18d838e0161303d565b909b50995060208c01359150808211156130da57600080fd5b6130e68d838e0161303d565b909950975060408c01359150808211156130ff57600080fd5b61310b8d838e0161303d565b909750955060608c013591508082111561312457600080fd5b506131318c828d0161303d565b9a9d999c50979a9699959894979660800135949350505050565b80356001600160a01b0381168114611a4857600080fd5b60006020828403121561317457600080fd5b6114248261314b565b60008060008060008060008060e0898b03121561319957600080fd5b883567ffffffffffffffff8111156131b057600080fd5b6131bc8b828c0161303d565b909950975050602089013595506040890135945060608901359350608089013592506131ea60a08a0161314b565b915060c089013590509295985092959890939650565b60008060008060008060008060e0898b03121561321c57600080fd5b883567ffffffffffffffff81111561323357600080fd5b61323f8b828c0161303d565b9099509750613252905060208a0161314b565b955061326060408a0161314b565b945060608901359350608089013592506131ea60a08a0161314b565b8015158114610fab57600080fd5b60006020828403121561329c57600080fd5b81356114248161327c565b60005b838110156132c25781810151838201526020016132aa565b838111156132d1576000848401525b50505050565b600081518084526132ef8160208601602086016132a7565b601f01601f19169290920160200192915050565b60208152600061142460208301846132d7565b600080600080600060a0868803121561332e57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60608152600061336460608301866132d7565b905060ff8416602083015263ffffffff83166040830152949350505050565b60008060006060848603121561339857600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133d757600080fd5b81516114248161327c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c08152600061343560c08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b88602084015287604084015282810360608401526134548187896133e2565b6080840195909552505060a00152949350505050565b60e08152600061349460e08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b6001600160a01b038a81166020850152604084018a905283820360608501526134be82898b6133e2565b96811660808501529490941660a08301525060c0015250949350505050565b8060005b60028110156132d15781548452602090930192600191820191016134e1565b6080810161350e82846134dd565b61155a60408301600285016134dd565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181141561354e5761354e61351e565b6001019392505050565b8060005b60028110156132d157815184526020938401939091019060010161355c565b600060808201905061358e828451613558565b60208301516135a06040840182613558565b5092915050565b6080815260006135ba60808301876132d7565b82810360208401526135cc81876132d7565b9415156040840152505063ffffffff9190911660609091015292915050565b600181811c908216806135ff57607f821691505b6020821081141561362057634e487b7160e01b600052602260045260246000fd5b50919050565b600063ffffffff8083168185168083038211156136455761364561351e565b01949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600081600019048311821515161561369d5761369d61351e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826136c7576136c76136a2565b500490565b600080858511156136dc57600080fd5b838611156136e957600080fd5b5050820193919092039150565b6000828210156137085761370861351e565b500390565b60006000198214156137215761372161351e565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600082198211156137515761375161351e565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6137ab8185613558565b6137b86040820184613558565b608081019190915260a00192915050565b6137d38185613558565b6137e06040820184613558565b600082516137f58160808501602087016132a7565b91909101608001949350505050565b60ff60f81b8360f81b168152600082516138258160018501602087016132a7565b919091016001019392505050565b600082516138458184602087016132a7565b9190910192915050565b60006020828403121561386157600080fd5b5051919050565b600082613877576138776136a2565b500690565b6020808252818101527f4e65787456617255696e742c2076616c7565206f7574736964652072616e6765604082015260600190565b600181815b808511156138ec5781600019048211156138d2576138d261351e565b808516156138df57918102915b93841c93908002906138b6565b509250929050565b6000826139035750600161155a565b816139105750600061155a565b816001811461392657600281146139305761394c565b600191505061155a565b60ff8411156139415761394161351e565b50506001821b61155a565b5060208310610133831016604e8410600b841016171561396f575081810a61155a565b61397983836138b1565b806000190482111561398d5761398d61351e565b029392505050565b600061142483836138f456fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220d5d3ff992d362d921d5fd2f70dd964933bf67e7267babf3ac7d811e708f42e2164736f6c634300080a0033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Bridge *BridgeTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Bridge.gsn = opts
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCaller) ListNode(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_listNode")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCallerSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Bridge.Contract.CastToAddress(&_Bridge.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Bridge *BridgeCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Bridge.Contract.CastToAddress(&_Bridge.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Bridge.Contract.CastToBytes32(&_Bridge.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Bridge *BridgeCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Bridge.Contract.CastToBytes32(&_Bridge.CallOpts, a)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCallerSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCallerSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCallerSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeCaller) StatFilterLen(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "statFilterLen")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeSession) StatFilterLen() (*big.Int, error) {
	return _Bridge.Contract.StatFilterLen(&_Bridge.CallOpts)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_Bridge *BridgeCallerSession) StatFilterLen() (*big.Int, error) {
	return _Bridge.Contract.StatFilterLen(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCallerSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCallerSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}
func (_Bridge *BridgeTransactor) AddContractBindOverGsn(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}
func (_Bridge *BridgeSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _Bridge.Contract.AddContractBindOverGsn(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}
func (_Bridge *BridgeTransactorSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _Bridge.Contract.AddContractBindOverGsn(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoTransferOwnership", newDao)
}
func (_Bridge *BridgeTransactor) DaoTransferOwnershipOverGsn(opts *bind.TransactOpts, newDao common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}
func (_Bridge *BridgeSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _Bridge.Contract.DaoTransferOwnershipOverGsn(&_Bridge.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}
func (_Bridge *BridgeTransactorSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _Bridge.Contract.DaoTransferOwnershipOverGsn(&_Bridge.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequestOverGsn(opts *bind.TransactOpts, resetEpoch bool) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}
func (_Bridge *BridgeSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _Bridge.Contract.DaoUpdateEpochRequestOverGsn(&_Bridge.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _Bridge.Contract.DaoUpdateEpochRequestOverGsn(&_Bridge.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "initialize", forwarder)
}
func (_Bridge *BridgeTransactor) InitializeOverGsn(opts *bind.TransactOpts, forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, forwarder)
}
func (_Bridge *BridgeSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.InitializeOverGsn(&_Bridge.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_Bridge *BridgeTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, forwarder)
}
func (_Bridge *BridgeTransactorSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.InitializeOverGsn(&_Bridge.TransactOpts, forwarder)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactor) ReceiveRequestV2OverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.ReceiveRequestV2OverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.ReceiveRequestV2OverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}
func (_Bridge *BridgeTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}
func (_Bridge *BridgeSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Bridge.Contract.RenounceOwnershipOverGsn(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}
func (_Bridge *BridgeTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Bridge.Contract.RenounceOwnershipOverGsn(&_Bridge.TransactOpts)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_Bridge *BridgeTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.SetTrustedForwarder(&_Bridge.TransactOpts, _forwarder)
}
func (_Bridge *BridgeSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.SetTrustedForwarderOverGsn(&_Bridge.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Bridge *BridgeTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.SetTrustedForwarder(&_Bridge.TransactOpts, _forwarder)
}
func (_Bridge *BridgeTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Bridge.Contract.SetTrustedForwarderOverGsn(&_Bridge.TransactOpts, _forwarder)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_Bridge *BridgeTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}
func (_Bridge *BridgeSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Bridge.Contract.TransferOwnershipOverGsn(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}
func (_Bridge *BridgeTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Bridge.Contract.TransferOwnershipOverGsn(&_Bridge.TransactOpts, newOwner)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactor) TransmitRequestV2OverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2OverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactorSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2OverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactor) TransmitRequestV2ToSolanaOverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolanaOverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_Bridge *BridgeTransactorSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _Bridge.Contract.TransmitRequestV2ToSolanaOverGsn(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactor) UpdateEpoch(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactor) UpdateEpochOverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_Bridge.gsn, BridgeMetaData.ABI, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeSession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeSession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.UpdateEpochOverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactorSession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_Bridge *BridgeTransactorSession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _Bridge.Contract.UpdateEpochOverGsn(&_Bridge.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// BridgeNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Bridge contract.
type BridgeNewEpochIterator struct {
	Event *BridgeNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewEpoch represents a NewEpoch event raised by the Bridge contract.
type BridgeNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*BridgeNewEpochIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &BridgeNewEpochIterator{contract: _Bridge.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *BridgeNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewEpoch)
				if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) ParseNewEpoch(log types.Log) (*BridgeNewEpoch, error) {
	event := new(BridgeNewEpoch)
	if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the Bridge contract.
type BridgeOracleRequestIterator struct {
	Event *BridgeOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequest represents a OracleRequest event raised by the Bridge contract.
type BridgeOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*BridgeOracleRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestIterator{contract: _Bridge.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequest)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequest(log types.Log) (*BridgeOracleRequest, error) {
	event := new(BridgeOracleRequest)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the Bridge contract.
type BridgeOracleRequestSolanaIterator struct {
	Event *BridgeOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequestSolana represents a OracleRequestSolana event raised by the Bridge contract.
type BridgeOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*BridgeOracleRequestSolanaIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestSolanaIterator{contract: _Bridge.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequestSolana)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequestSolana(log types.Log) (*BridgeOracleRequestSolana, error) {
	event := new(BridgeOracleRequestSolana)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the Bridge contract.
type BridgeReceiveRequestIterator struct {
	Event *BridgeReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeReceiveRequest represents a ReceiveRequest event raised by the Bridge contract.
type BridgeReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*BridgeReceiveRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeReceiveRequestIterator{contract: _Bridge.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *BridgeReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeReceiveRequest)
				if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) ParseReceiveRequest(log types.Log) (*BridgeReceiveRequest, error) {
	event := new(BridgeReceiveRequest)
	if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
