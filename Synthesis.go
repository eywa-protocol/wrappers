// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SolanaSerializeSolanaAccountMeta is an auto generated low-level Go binding around an user-defined struct.
type SolanaSerializeSolanaAccountMeta struct {
	Pubkey     [32]byte
	IsSigner   bool
	IsWritable bool
}

// SolanaSerializeSolanaStandaloneInstruction is an auto generated low-level Go binding around an user-defined struct.
type SolanaSerializeSolanaStandaloneInstruction struct {
	ProgramId [32]byte
	Accounts  []SolanaSerializeSolanaAccountMeta
	Data      []byte
}

// SynthesisABI is the input ABI used to generate the binding from.
const SynthesisABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BurnRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"}],\"name\":\"CreatedRepresentation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RevertBurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"SynthesizeCompletedSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticToken_solana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_out\",\"type\":\"bytes\"}],\"name\":\"burnSyntheticToken_transit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createRepresentation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"emergencyUnsyntesizeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_bumpSynthesizeRequest\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnsyntesizeRequest_solana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListRepresentation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"}],\"name\":\"getRepresentation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenReal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenReal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintSyntheticToken_solana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"representationReal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"representationSynt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chain2address\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"stoken\",\"type\":\"address\"},{\"internalType\":\"enumSynthesis.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxyCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synthesizeStates\",\"outputs\":[{\"internalType\":\"enumSynthesis.SynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SynthesisBin is the compiled bytecode used for deploying new contracts.
var SynthesisBin = "0x60806040523480156200001157600080fd5b506040516200595c3803806200595c833981016040819052620000349162000133565b80600062000041620000c2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039283166001600160a01b0319918216179091556007805494909216931692909217909155506200016a565b6000620000cf3362000100565b15620000e5575060131936013560601c620000fd565b620000fa6200011760201b62002cfe1760201c565b90505b90565b6001546001600160a01b038281169116145b919050565b3390565b80516001600160a01b03811681146200011257600080fd5b6000806040838503121562000146578182fd5b62000151836200011b565b915062000161602084016200011b565b90509250929050565b6157e2806200017a6000396000f3fe60806040523480156200001157600080fd5b5060043610620002205760003560e01c80637c6a151b1162000129578063d23fd79611620000b1578063e9a71481116200007b578063e9a714811462000494578063ec55688914620004ab578063edff2c8214620004b5578063f2fde38b14620004bf5762000220565b8063d23fd7961462000443578063d32a991e1462000469578063e78cea921462000480578063e834e4ad146200048a5762000220565b80639d86698511620000f35780639d86698514620003d0578063a5ec526614620003fb578063bb5f3cca1462000415578063bca73823146200042c5762000220565b80637c6a151b14620003815780638b247be014620003985780638da5cb5b14620003af578063926ad0fe14620003b95762000220565b8063456eb8b811620001ad578063572b6c051162000177578063572b6c0514620003305780636034161214620003565780636f2258b3146200036d578063715018a614620003775762000220565b8063456eb8b814620002fb578063486ff0cd14620003055780634a00e323146200030f57806352dd22ee14620003265762000220565b8063286452f411620001ef578063286452f4146200029d5780632ab8c8b014620002b45780632b1106e314620002da57806334bfbfda14620002e45762000220565b8063067bd07a1462000225578063087744101462000247578063104ccf9a14620002605780632036f36e1462000277575b600080fd5b6200022f620004d6565b6040516200023e9190620034a5565b60405180910390f35b6200025e6200025836600462003027565b620004de565b005b6200025e620002713660046200333d565b6200054f565b6200028e6200028836600462003243565b6200072f565b6040516200023e91906200369b565b6200025e620002ae36600462003027565b6200074a565b620002cb620002c5366004620033ae565b620007b2565b6040516200023e9190620037e8565b6200022f620009ee565b6200025e620002f536600462003307565b62000a12565b620002cb62000b59565b620002cb62000b94565b6200025e62000320366004620031b8565b62000bb4565b6200022f62001331565b620003476200034136600462003027565b62001336565b6040516200023e91906200374f565b6200022f62000367366004620030ad565b6200134a565b6200022f620016e6565b6200025e62001718565b6200022f6200039236600462003027565b620017a8565b6200022f620003a936600462003044565b620017ba565b6200028e6200212b565b6200025e620003ca36600462003275565b6200213a565b620003e7620003e136600462003243565b6200246f565b6040516200023e969594939291906200377e565b62000405620024b3565b6040516200023e929190620036c8565b6200025e6200042636600462003243565b62002621565b6200028e6200043d36600462003243565b62002771565b6200045a6200045436600462003243565b6200278c565b6040516200023e91906200389e565b6200025e6200047a366004620032bd565b620027a1565b6200028e620028f2565b620002cb62002901565b6200022f620004a53660046200311b565b6200292a565b6200028e62002c01565b6200022f62002c10565b6200025e620004d036600462003027565b62002c34565b631de44e3d81565b620004e862002d02565b6001600160a01b0316620004fb6200212b565b6001600160a01b0316146200052d5760405162461bcd60e51b8152600401620005249062003ac5565b60405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6200055962002d02565b6001600160a01b03166200056c6200212b565b6001600160a01b031614620005955760405162461bcd60e51b8152600401620005249062003ac5565b6000838152600360205260409020546001600160a01b031615620005cd5760405162461bcd60e51b8152600401620005249062003b25565b6001600160a01b03831660009081526002602052604090205415620006065760405162461bcd60e51b8152600401620005249062003b25565b6000620006e5600085604051602001620006219190620034a5565b6040516020818303038152906040528051906020012060405180602001620006499062002e26565b601f1982820381018352601f9091011660408190526200066e908890602001620035e0565b60405160208183030381529060405286604051602001620006909190620035e0565b60408051601f1981840301815290829052620006b09291602001620038b3565b60408051601f1981840301815290829052620006d0929160200162003523565b60405160208183030381529060405262002d37565b9050620006f3848262002dba565b6040516001600160a01b0382169085907f0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac0290600090a350505050565b6003602052600090815260409020546001600160a01b031681565b6200075462002d02565b6001600160a01b0316620007676200212b565b6001600160a01b031614620007905760405162461bcd60e51b8152600401620005249062003ac5565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60606000826020015151905060088162ff00ff1663ffffffff16901b60088263ff00ff001663ffffffff16901c17905060108163ffffffff16901b60108263ffffffff16901c1790506000816040516020016200081091906200360b565b6040516020818303038152906040529050606060005b8560200151518110156200092857856020015181815181106200085957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151866020015182815181106200088a57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518381518110620008bb57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151604051602001620008db93929190620034ae565b604051602081830303815290604052915082826040516020016200090192919062003523565b604051602081830303815290604052925080806200091f9062003c18565b91505062000826565b5084516040516200093e918491602001620034ff565b6040516020818303038152906040529150846040015151925060088362ff00ff1663ffffffff16901b60088463ff00ff001663ffffffff16901c17925060108363ffffffff16901b60108463ffffffff16901c1792508183604051602001620009a992919062003556565b6040516020818303038152906040529150818560400151604051602001620009d392919062003523565b60408051601f1981840301815291905293505050505b919050565b7f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000081565b6007546001600160a01b0316331462000a2a57600080fd5b60008481526006602052604081205460ff16600281111562000a5c57634e487b7160e01b600052602160045260246000fd5b1462000a7c5760405162461bcd60e51b81526004016200052490620039d3565b600083815260036020526040908190205490516340c10f1960e01b81526001600160a01b03909116906340c10f199062000abd9084908690600401620036af565b600060405180830381600087803b15801562000ad857600080fd5b505af115801562000aed573d6000803e3d6000fd5b50505060008581526006602052604090819020805460ff19166001179055516001600160a01b038316915085907f830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e795529062000b4b908690889062003baa565b60405180910390a350505050565b607360ea606f606d608360a76025604660405160200162000b8298979695949392919062003623565b60405160208183030381529060405281565b604080518082019091526005815264322e302e3160d81b60208201525b90565b631de44e3d811462000bda5760405162461bcd60e51b8152600401620005249062003afa565b6007546000906001600160a01b0316632d0335ab62000bf862002d02565b6040518263ffffffff1660e01b815260040162000c1691906200369b565b60206040518083038186803b15801562000c2f57600080fd5b505afa15801562000c44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c6a91906200325c565b6007549091506000906001600160a01b0316636f3521968787600281811062000ca357634e487b7160e01b600052603260045260246000fd5b60200291909101359050631de44e3d8989600081811062000cd457634e487b7160e01b600052603260045260246000fd5b9050602002013562000ce562002d02565b6040516001600160e01b031960e087901b16815262000d16949392916001600160a01b0316908990600401620037c5565b60206040518083038186803b15801562000d2f57600080fd5b505afa15801562000d44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d6a91906200325c565b9050600160008281526006602052604090205460ff16600281111562000da057634e487b7160e01b600052602160045260246000fd5b141562000dc15760405162461bcd60e51b8152600401620005249062003a81565b600081815260066020526040808220805460ff1916600217905580516007808252610100820190925290816020015b62000dfa62002e34565b81526020019060019003908162000df05750506040805160608101909152909150808888600181811062000e3e57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600015158152508160008151811062000e7c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808888600481811062000eb557634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600115158152508160018151811062000ef357634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808888600781811062000f2c57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600015158152508160028151811062000f6a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808888600581811062000fa357634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600115158152508160038151811062000fe157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516060810190915280888860068181106200101a57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200160001515815260200160011515815250816004815181106200105857634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516060810190915280888860038181106200109157634e487b7160e01b600052603260045260246000fd5b9050602002013581526020016001151581526020016000151581525081600581518110620010cf57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b815260200160001515815260200160001515815250816006815181106200114057634e487b7160e01b600052603260045260246000fd5b602090810291909101015260075460408051606081019091526001600160a01b039091169063c02ae956906200120790808b8b60008181106200119357634e487b7160e01b600052603260045260246000fd5b9050602002013581526020018581526020016066606b60976032608d60ac60f4603f604051602001620011ce98979695949392919062003623565b60408051601f1981840301815290829052620011ef918c90602001620034ce565b604051602081830303815290604052815250620007b2565b898960008181106200122957634e487b7160e01b600052603260045260246000fd5b602002919091013590508a8a60028181106200125557634e487b7160e01b600052603260045260246000fd5b90506020020135631de44e3d876200126c62002d02565b8a6040518863ffffffff1660e01b81526004016200129197969594939291906200384f565b602060405180830381600087803b158015620012ac57600080fd5b505af1158015620012c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012e7919062003224565b50620012f262002d02565b6001600160a01b0316827f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050565b600081565b6001546001600160a01b0390811691161490565b6000866001600160a01b0316639dc29fac6200136562002d02565b886040518363ffffffff1660e01b815260040162001385929190620036af565b600060405180830381600087803b158015620013a057600080fd5b505af1158015620013b5573d6000803e3d6000fd5b5050600754600092506001600160a01b03169050632d0335ab620013d862002d02565b6040518263ffffffff1660e01b8152600401620013f691906200369b565b60206040518083038186803b1580156200140f57600080fd5b505afa15801562001424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200144a91906200325c565b6007549091506001600160a01b0390811690636f3521969086811690869089166200147462002d02565b6040516001600160e01b031960e087901b168152620014a5949392916001600160a01b0316908890600401620037c5565b60206040518083038186803b158015620014be57600080fd5b505afa158015620014d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014f991906200325c565b915060006040518060600160405280602d815260200162005780602d91398051906020012083600260008c6001600160a01b03166001600160a01b03168152602001908152602001600020548a8a6040516024016200155c94939291906200375a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526007549091506001600160a01b031663329ef45f8288888888620015b162002d02565b896040518863ffffffff1660e01b8152600401620015d69796959493929190620037fd565b602060405180830381600087803b158015620015f157600080fd5b505af115801562001606573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200162c919062003224565b5060008381526005602052604090206200164562002d02565b6001600160a01b03908116825588811660018301819055600483018054600285018d90556001600160a01b031916928d169290921760ff60a01b1916600160a01b179091556200169462002d02565b6001600160a01b0316857fc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f758c8e604051620016d192919062003b93565b60405180910390a45050509695505050505050565b60003042604051602001620016fd929190620035be565b60405160208183030381529060405280519060200120905090565b6200172262002d02565b6001600160a01b0316620017356200212b565b6001600160a01b0316146200175e5760405162461bcd60e51b8152600401620005249062003ac5565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026020526000908152604090205481565b6000631de44e3d8214620017e25760405162461bcd60e51b8152600401620005249062003afa565b67ffffffffffffffff83106200180c5760405162461bcd60e51b815260040162000524906200391a565b600883811b67ff00ff00ff00ff001666ff00ff00ff00ff9185901c9190911617601081811b67ffff0000ffff00001665ffff0000ffff9290911c9190911617602081811b6bffffffffffffffff000000001691901c63ffffffff16176001600160a01b038716639dc29fac6200188162002d02565b866040518363ffffffff1660e01b8152600401620018a1929190620036af565b600060405180830381600087803b158015620018bc57600080fd5b505af1158015620018d1573d6000803e3d6000fd5b5050600754600092506001600160a01b03169050632d0335ab620018f462002d02565b6040518263ffffffff1660e01b81526004016200191291906200369b565b60206040518083038186803b1580156200192b57600080fd5b505afa15801562001940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200196691906200325c565b6007549091506001600160a01b0316636f352196888860028181106200199c57634e487b7160e01b600052603260045260246000fd5b60200291909101359050631de44e3d8a8a6000818110620019cd57634e487b7160e01b600052603260045260246000fd5b90506020020135620019de62002d02565b6040516001600160e01b031960e087901b16815262001a0f949392916001600160a01b0316908890600401620037c5565b60206040518083038186803b15801562001a2857600080fd5b505afa15801562001a3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a6391906200325c565b604080516009808252610140820190925291945060009190816020015b62001a8a62002e34565b81526020019060019003908162001a805750506040805160608101909152909150808989600181811062001ace57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600015158152508160008151811062001b0c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808989600781811062001b4557634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600015158152508160018151811062001b8357634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808989600481811062001bbc57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600115158152508160028151811062001bfa57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808989600581811062001c3357634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600115158152508160038151811062001c7157634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808989600681811062001caa57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600015158152602001600115158152508160048151811062001ce857634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805160608101909152808989600381811062001d2157634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600115158152602001600015158152508160058151811062001d5f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160068151811062001dd057634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180606001604052807f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000060001b8152602001600015158152602001600015158152508160078151811062001e4157634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180606001604052806000801b8152602001600015158152602001600015158152508160088151811062001e9257634e487b7160e01b600052603260045260246000fd5b602090810291909101015260075460408051606081019091526001600160a01b039091169063c02ae9569062001f4190808c8c600081811062001ee557634e487b7160e01b600052603260045260246000fd5b905060200201358152602001858152602001607360ea606f606d608360a76025604660405160200162001f2098979695949392919062003623565b60408051601f1981840301815290829052620011ef918a906020016200358a565b8a8a600081811062001f6357634e487b7160e01b600052603260045260246000fd5b602002919091013590508b8b600281811062001f8f57634e487b7160e01b600052603260045260246000fd5b90506020020135631de44e3d8962001fa662002d02565b896040518863ffffffff1660e01b815260040162001fcb97969594939291906200384f565b602060405180830381600087803b15801562001fe657600080fd5b505af115801562001ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002021919062003224565b5060008481526005602052604090206200203a62002d02565b6001600160a01b03168155888860068181106200206757634e487b7160e01b600052603260045260246000fd5b6020029190910135600183015550600481018054600283018990556001600160a01b0319166001600160a01b038c161760ff60a01b1916600160a01b17905588886006818110620020c857634e487b7160e01b600052603260045260246000fd5b90506020020135620020d962002d02565b6001600160a01b0316867fc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c68a8e6040516200211692919062003b93565b60405180910390a45050505095945050505050565b6000546001600160a01b031690565b600160008581526006602052604090205460ff1660028111156200216e57634e487b7160e01b600052602160045260246000fd5b14156200218f5760405162461bcd60e51b8152600401620005249062003a81565b6000848152600660209081526040808320805460ff1916600217905580518082018252601e81527f656d657267656e6379556e73796e74686573697a652862797465733332290000920191909152517ffc895869ed76967ae97ecfdfb4e841c3c3291d8d9cd835c2248f1b65cbd38b089062002210908790602401620034a5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526007549091506000906001600160a01b0316632d0335ab6200226362002d02565b6040518263ffffffff1660e01b81526004016200228191906200369b565b60206040518083038186803b1580156200229a57600080fd5b505afa158015620022af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022d591906200325c565b6007549091506000906001600160a01b0390811690636f352196908781169087908a166200230262002d02565b6040516001600160e01b031960e087901b16815262002333949392916001600160a01b0316908990600401620037c5565b60206040518083038186803b1580156200234c57600080fd5b505afa15801562002361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200238791906200325c565b6007549091506001600160a01b031663329ef45f8488888886620023aa62002d02565b896040518863ffffffff1660e01b8152600401620023cf9796959493929190620037fd565b602060405180830381600087803b158015620023ea57600080fd5b505af1158015620023ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002425919062003224565b506200243062002d02565b6001600160a01b0316817f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050565b60056020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b03811690600160a01b900460ff1686565b600454606090819060008167ffffffffffffffff811115620024e557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200250f578160200160208202803683370190505b50905060005b82811015620025bf5760036000600483815481106200254457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b03168282815181106200259257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280620025b68162003c18565b91505062002515565b50600481818054806020026020016040519081016040528092919081815260200182805480156200261057602002820191906000526020600020905b815481526020019060010190808311620025fb575b505050505091509350935050509091565b6007546001600160a01b031633146200263957600080fd5b600081815260056020526040902060016004820154600160a01b900460ff1660028111156200267857634e487b7160e01b600052602160045260246000fd5b14620026985760405162461bcd60e51b815260040162000524906200398a565b6004818101805460ff60a01b1916600160a11b1790819055825460028401546040516340c10f1960e01b81526001600160a01b03909316936340c10f1993620026e493929101620036af565b600060405180830381600087803b158015620026ff57600080fd5b505af115801562002714573d6000803e3d6000fd5b50508254600284015460048501546040516001600160a01b0393841695508794507f9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac61593620027659392169062003b93565b60405180910390a35050565b6000908152600360205260409020546001600160a01b031690565b60066020526000908152604090205460ff1681565b6007546001600160a01b0316331480620027c557506008546001600160a01b031633145b620027cf57600080fd5b60008481526006602052604081205460ff1660028111156200280157634e487b7160e01b600052602160045260246000fd5b14620028215760405162461bcd60e51b81526004016200052490620039d3565b6001600160a01b03808416600090815260036020526040908190205490516340c10f1960e01b81529116906340c10f1990620028649084908690600401620036af565b600060405180830381600087803b1580156200287f57600080fd5b505af115801562002894573d6000803e3d6000fd5b50505060008581526006602052604090819020805460ff19166001179055516001600160a01b038316915085907f95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb79062000b4b908690889062003b93565b6007546001600160a01b031681565b6066606b60976032608d60ac60f4603f60405160200162000b8298979695949392919062003623565b6000876001600160a01b0316639dc29fac6200294562002d02565b896040518363ffffffff1660e01b815260040162002965929190620036af565b600060405180830381600087803b1580156200298057600080fd5b505af115801562002995573d6000803e3d6000fd5b5050600754600092506001600160a01b03169050632d0335ab620029b862002d02565b6040518263ffffffff1660e01b8152600401620029d691906200369b565b60206040518083038186803b158015620029ef57600080fd5b505afa15801562002a04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a2a91906200325c565b6007549091506001600160a01b0390811690636f352196908781169087908a1662002a5462002d02565b6040516001600160e01b031960e087901b16815262002a85949392916001600160a01b0316908890600401620037c5565b60206040518083038186803b15801562002a9e57600080fd5b505afa15801562002ab3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ad991906200325c565b6007549092506001600160a01b031663329ef45f848888888762002afc62002d02565b886040518863ffffffff1660e01b815260040162002b219796959493929190620037fd565b602060405180830381600087803b15801562002b3c57600080fd5b505af115801562002b51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b77919062003224565b50600082815260056020526040902060048101805460ff60a01b1916600160a01b1790556001600160a01b03881662002baf62002d02565b6001600160a01b0316847fc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f758c8e60405162002bec92919062003b93565b60405180910390a45050979650505050505050565b6008546001600160a01b031681565b7f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a981565b62002c3e62002d02565b6001600160a01b031662002c516200212b565b6001600160a01b03161462002c7a5760405162461bcd60e51b8152600401620005249062003ac5565b6001600160a01b03811662002ca35760405162461bcd60e51b8152600401620005249062003944565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600062002d0f3362001336565b1562002d25575060131936013560601c62000bb1565b62002d2f62002cfe565b905062000bb1565b6000808447101562002d5d5760405162461bcd60e51b8152600401620005249062003b5c565b825162002d7e5760405162461bcd60e51b81526004016200052490620038e5565b8383516020850187f590506001600160a01b03811662002db25760405162461bcd60e51b8152600401620005249062003a4a565b949350505050565b600082815260036020908152604080832080546001600160a01b039095166001600160a01b031990951685179055928252600290529081208290556004805460018101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b611af88062003c8883390190565b604080516060810182526000808252602082018190529181019190915290565b600067ffffffffffffffff83111562002e715762002e7162003c40565b62002e86601f8401601f191660200162003bb8565b905082815283838301111562002e9b57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114620009e957600080fd5b60008083601f84011262002edc578182fd5b50813567ffffffffffffffff81111562002ef4578182fd5b602083019150836020808302850101111562002f0f57600080fd5b9250929050565b600082601f83011262002f27578081fd5b8135602067ffffffffffffffff8083111562002f475762002f4762003c40565b62002f56828385020162003bb8565b838152828101908684016060808702890186018a101562002f75578788fd5b875b8781101562002fef5781838c03121562002f8f578889fd5b60408051838101818110898211171562002fad5762002fad62003c40565b8252843581528885013562002fc28162003c78565b818a01528482013562002fd58162003c78565b918101919091528552938601939181019160010162002f77565b50919998505050505050505050565b600082601f8301126200300f578081fd5b620030208383356020850162002e54565b9392505050565b60006020828403121562003039578081fd5b620030208262002eb2565b6000806000806000608086880312156200305c578081fd5b620030678662002eb2565b9450602086013567ffffffffffffffff81111562003083578182fd5b620030918882890162002eca565b9699909850959660408101359660609091013595509350505050565b60008060008060008060c08789031215620030c6578081fd5b620030d18762002eb2565b955060208701359450620030e86040880162002eb2565b9350620030f86060880162002eb2565b9250620031086080880162002eb2565b915060a087013590509295509295509295565b600080600080600080600060e0888a03121562003136578081fd5b620031418862002eb2565b965060208801359550620031586040890162002eb2565b9450620031686060890162002eb2565b9350620031786080890162002eb2565b925060a0880135915060c088013567ffffffffffffffff8111156200319b578182fd5b620031a98a828b0162002ffe565b91505092959891949750929550565b60008060008060608587031215620031ce578182fd5b843567ffffffffffffffff811115620031e5578283fd5b620031f38782880162002eca565b90955093505060208501356001600160f81b03198116811462003214578283fd5b9396929550929360400135925050565b60006020828403121562003236578081fd5b8151620030208162003c78565b60006020828403121562003255578081fd5b5035919050565b6000602082840312156200326e578081fd5b5051919050565b600080600080608085870312156200328b578182fd5b843593506200329d6020860162002eb2565b9250620032ad6040860162002eb2565b9396929550929360600135925050565b60008060008060808587031215620032d3578182fd5b84359350620032e56020860162002eb2565b925060408501359150620032fc6060860162002eb2565b905092959194509250565b600080600080608085870312156200331d578182fd5b843593506020850135925060408501359150620032fc6060860162002eb2565b60008060006060848603121562003352578081fd5b83359250602084013567ffffffffffffffff8082111562003371578283fd5b6200337f8783880162002ffe565b9350604086013591508082111562003395578283fd5b50620033a48682870162002ffe565b9150509250925092565b600060208284031215620033c0578081fd5b813567ffffffffffffffff80821115620033d8578283fd5b9083019060608286031215620033ec578283fd5b6040516060810181811083821117156200340a576200340a62003c40565b6040528235815260208301358281111562003423578485fd5b620034318782860162002f16565b60208301525060408301358281111562003449578485fd5b620034578782860162002ffe565b60408301525095945050505050565b600081518084526200348081602086016020860162003be5565b601f01601f19169290920160200192915050565b60f81b6001600160f81b0319169052565b90815260200190565b92835290151560f890811b6020840152901515901b602182015260220190565b60008351620034e281846020880162003be5565b6001600160f81b0319939093169190920190815260010192915050565b600083516200351381846020880162003be5565b9190910191825250602001919050565b600083516200353781846020880162003be5565b8351908301906200354d81836020880162003be5565b01949350505050565b600083516200356a81846020880162003be5565b60e09390931b6001600160e01b0319169190920190815260040192915050565b600083516200359e81846020880162003be5565b60c09390931b6001600160c01b0319169190920190815260080192915050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6000606560f81b82528251620035fe81600185016020870162003be5565b9190910160010192915050565b60e09190911b6001600160e01b031916815260040190565b6001600160f81b031960f88a811b8216835289811b8216600184015288811b8216600284015287811b8216600384015286901b16600482015260006200366d600583018662003494565b6200367c600683018562003494565b6200368b600783018462003494565b5060080198975050505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156200370357815184529284019290840190600101620036e5565b50505083810382850152845180825285830191830190845b81811015620037425783516001600160a01b0316835292840192918401916001016200371b565b5090979650505050505050565b901515815260200190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b8681526020810186905260408101859052606081018490526001600160a01b038316608082015260c08101620037b48362003c56565b8260a0830152979650505050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60006020825262003020602083018462003466565b600060e082526200381260e083018a62003466565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c00191909152919050565b600060e082526200386460e083018a62003466565b6020830198909852506040810195909552606085019390935260808401919091526001600160a01b031660a083015260c090910152919050565b60208101620038ad8362003c56565b91905290565b600060408252620038c8604083018562003466565b8281036020840152620038dc818562003466565b95945050505050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526010908201526f616d6f756e7420746f6f206c6172676560801b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526029908201527f53796e743a207374617465206e6f74206f70656e206f7220747820646f6573206040820152681b9bdd08195e1a5cdd60ba1b606082015260800190565b60208082526051908201527f53796e743a20656d657267656e6379556e73796e74686573697a65645265717560408201527f6573742063616c6c6564206f7220746f6b656e7320686173206265656e20616c6060820152701c9958591e481cde5b9d1a195cda5e9959607a1b608082015260a00190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b60208082526024908201527f53796e743a2073796e746174696320746f6b656e7320616c7265616479206d696040820152631b9d195960e21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601190820152701a5b98dbdc9c9958dd0818da185a5b9259607a1b604082015260600190565b6020808252601d908201527f526570726573656e746174696f6e20616c726561647920657869737473000000604082015260600190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171562003bdd5762003bdd62003c40565b604052919050565b60005b8381101562003c0257818101518382015260200162003be8565b8381111562003c12576000848401525b50505050565b600060001982141562003c3957634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6003811062003c7557634e487b7160e01b600052602160045260246000fd5b50565b801515811462003c7557600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162001af838038062001af88339810160408190526200005a916200031e565b6040518060400160405280600c81526020016b29bcb6b134b7b9b4b9a3a9a760a11b81525080604051806040016040528060018152602001603160f81b81525084846000620000ae6200018d60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081516200010d906004906020850190620001cd565b50805162000123906005906020840190620001cd565b5050825160208085019190912083519184019190912060c082905260e08190524660a0529091507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200017881848462000191565b60805261010052506200040495505050505050565b3390565b60008383834630604051602001620001ae95949392919062000385565b6040516020818303038152906040528051906020012090509392505050565b828054620001db90620003b1565b90600052602060002090601f016020900481019282620001ff57600085556200024a565b82601f106200021a57805160ff19168380011785556200024a565b828001600101855582156200024a579182015b828111156200024a5782518255916020019190600101906200022d565b50620002589291506200025c565b5090565b5b808211156200025857600081556001016200025d565b600082601f83011262000284578081fd5b81516001600160401b0380821115620002a157620002a1620003ee565b6040516020601f8401601f1916820181018381118382101715620002c957620002c9620003ee565b6040528382528584018101871015620002e0578485fd5b8492505b83831015620003035785830181015182840182015291820191620002e4565b838311156200031457848185840101525b5095945050505050565b6000806040838503121562000331578182fd5b82516001600160401b038082111562000348578384fd5b620003568683870162000273565b935060208501519150808211156200036c578283fd5b506200037b8582860162000273565b9150509250929050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b600281046001821680620003c657607f821691505b60208210811415620003e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516116a46200045460003960006107ad01526000610b8c01526000610bce01526000610bad01526000610b3a01526000610b6301526116a46000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ecebe00116100b8578063a457c2d71161007c578063a457c2d714610258578063a9059cbb1461026b578063a918adf51461027e578063d505accf14610291578063dd62ed3e146102a4578063f2fde38b146102b757610137565b80637ecebe00146102025780638da5cb5b1461021557806395d89b411461022a5780639be4e7b2146102325780639dc29fac1461024557610137565b80633644e515116100ff5780633644e515146101b757806339509351146101bf57806340c10f19146101d257806370a08231146101e7578063715018a6146101fa57610137565b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017a57806323b872dd1461018f578063313ce567146101a2575b600080fd5b6101446102ca565b6040516101519190611154565b60405180910390f35b61016d61016836600461106a565b61035d565b60405161015191906110c2565b61018261037a565b60405161015191906110cd565b61016d61019d366004610fbe565b610380565b6101aa610420565b60405161015191906115e6565b610182610425565b61016d6101cd36600461106a565b610434565b6101e56101e036600461106a565b610483565b005b6101826101f5366004610f6b565b6104d0565b6101e56104ef565b610182610210366004610f6b565b610578565b61021d61059f565b60405161015191906110ae565b6101446105ae565b6101e5610240366004610fbe565b6105bd565b6101e561025336600461106a565b610625565b61016d61026636600461106a565b61066e565b61016d61027936600461106a565b6106e9565b6101e561028c366004610fbe565b6106fd565b6101e561029f366004610ff9565b610789565b6101826102b2366004610f8c565b61086b565b6101e56102c5366004610f6b565b610896565b6060600480546102d990611623565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611623565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b505050505090505b90565b600061037161036a610956565b848461095a565b50600192915050565b60035490565b600061038d848484610a0e565b6001600160a01b0384166000908152600260205260408120816103ae610956565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156103fa5760405162461bcd60e51b81526004016103f190611423565b60405180910390fd5b61041585610406610956565b610410868561160c565b61095a565b506001949350505050565b601290565b600061042f610b36565b905090565b6000610371610441610956565b84846002600061044f610956565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461041091906115f4565b61048b610956565b6001600160a01b031661049c61059f565b6001600160a01b0316146104c25760405162461bcd60e51b81526004016103f19061146b565b6104cc8282610bf9565b5050565b6001600160a01b0381166000908152600160205260409020545b919050565b6104f7610956565b6001600160a01b031661050861059f565b6001600160a01b03161461052e5760405162461bcd60e51b81526004016103f19061146b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001600160a01b038116600090815260066020526040812061059990610cb9565b92915050565b6000546001600160a01b031690565b6060600580546102d990611623565b6105c5610956565b6001600160a01b03166105d661059f565b6001600160a01b0316146105fc5760405162461bcd60e51b81526004016103f19061146b565b6106068382610bf9565b610620838383610616878761086b565b61041091906115f4565b505050565b61062d610956565b6001600160a01b031661063e61059f565b6001600160a01b0316146106645760405162461bcd60e51b81526004016103f19061146b565b6104cc8282610cbd565b6000806002600061067d610956565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156106c95760405162461bcd60e51b81526004016103f19061156a565b6106df6106d4610956565b85610410868561160c565b5060019392505050565b60006103716106f6610956565b8484610a0e565b610705610956565b6001600160a01b031661071661059f565b6001600160a01b03161461073c5760405162461bcd60e51b81526004016103f19061146b565b6000610748848461086b565b90508181101561076a5760405162461bcd60e51b81526004016103f19061156a565b6107798484610410858561160c565b6107838483610cbd565b50505050565b834211156107a95760405162461bcd60e51b81526004016103f1906112eb565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107d88c610da3565b896040516020016107ee969594939291906110d6565b604051602081830303815290604052805190602001209050600061081182610dd5565b9050600061082182878787610de8565b9050896001600160a01b0316816001600160a01b0316146108545760405162461bcd60e51b81526004016103f1906113ec565b61085f8a8a8a61095a565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61089e610956565b6001600160a01b03166108af61059f565b6001600160a01b0316146108d55760405162461bcd60e51b81526004016103f19061146b565b6001600160a01b0381166108fb5760405162461bcd60e51b81526004016103f190611263565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b0383166109805760405162461bcd60e51b81526004016103f190611526565b6001600160a01b0382166109a65760405162461bcd60e51b81526004016103f1906112a9565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a019085906110cd565b60405180910390a3505050565b6001600160a01b038316610a345760405162461bcd60e51b81526004016103f1906114e1565b6001600160a01b038216610a5a5760405162461bcd60e51b81526004016103f1906111de565b610a65838383610620565b6001600160a01b03831660009081526001602052604090205481811015610a9e5760405162461bcd60e51b81526004016103f190611322565b610aa8828261160c565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290610ade9084906115f4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b2891906110cd565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610b8757507f000000000000000000000000000000000000000000000000000000000000000061035a565b610bf27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610ede565b905061035a565b6001600160a01b038216610c1f5760405162461bcd60e51b81526004016103f1906115af565b610c2b60008383610620565b8060036000828254610c3d91906115f4565b90915550506001600160a01b03821660009081526001602052604081208054839290610c6a9084906115f4565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610cad9085906110cd565b60405180910390a35050565b5490565b6001600160a01b038216610ce35760405162461bcd60e51b81526004016103f1906114a0565b610cef82600083610620565b6001600160a01b03821660009081526001602052604090205481811015610d285760405162461bcd60e51b81526004016103f190611221565b610d32828261160c565b6001600160a01b03841660009081526001602052604081209190915560038054849290610d6090849061160c565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a019086906110cd565b6001600160a01b0381166000908152600660205260408120610dc481610cb9565b9150610dcf81610f18565b50919050565b6000610599610de2610b36565b83610f21565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610e2a5760405162461bcd60e51b81526004016103f190611368565b8360ff16601b1480610e3f57508360ff16601c145b610e5b5760405162461bcd60e51b81526004016103f1906113aa565b600060018686868660405160008152602001604052604051610e809493929190611136565b6020604051602081039080840390855afa158015610ea2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ed55760405162461bcd60e51b81526004016103f1906111a7565b95945050505050565b60008383834630604051602001610ef995949392919061110a565b6040516020818303038152906040528051906020012090509392505050565b80546001019055565b60008282604051602001610f36929190611093565b60405160208183030381529060405280519060200120905092915050565b80356001600160a01b03811681146104ea57600080fd5b600060208284031215610f7c578081fd5b610f8582610f54565b9392505050565b60008060408385031215610f9e578081fd5b610fa783610f54565b9150610fb560208401610f54565b90509250929050565b600080600060608486031215610fd2578081fd5b610fdb84610f54565b9250610fe960208501610f54565b9150604084013590509250925092565b600080600080600080600060e0888a031215611013578283fd5b61101c88610f54565b965061102a60208901610f54565b95506040880135945060608801359350608088013560ff8116811461104d578384fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561107c578182fd5b61108583610f54565b946020939093013593505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561118057858101830151858201604001528201611164565b818111156111915783604083870101525b50601f01601f1916929092016040019392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601d908201527f45524332305065726d69743a206578706972656420646561646c696e65000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252601e908201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b6000821982111561160757611607611658565b500190565b60008282101561161e5761161e611658565b500390565b60028104600182168061163757607f821691505b60208210811415610dcf57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fdfea26469706673582212205da0e258785ac7ab657080245dbd9a3917e27c88f707a1283009fa8439f224e964736f6c63430008000033756e73796e74686573697a6528627974657333322c616464726573732c75696e743235362c6164647265737329a2646970667358221220d6acc0b62792e841a9d11f31b8476ab39ca93737164a1458ad378c64ef7610ef64736f6c63430008000033"

// DeploySynthesis deploys a new Ethereum contract, binding an instance of Synthesis to it.
func DeploySynthesis(auth *bind.TransactOpts, backend bind.ContractBackend, _bridge common.Address, _trustedForwarder common.Address) (common.Address, *types.Transaction, *Synthesis, error) {
	parsed, err := abi.JSON(strings.NewReader(SynthesisABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SynthesisBin), backend, _bridge, _trustedForwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// Synthesis is an auto generated Go binding around an Ethereum contract.
type Synthesis struct {
	SynthesisCaller     // Read-only binding to the contract
	SynthesisTransactor // Write-only binding to the contract
	SynthesisFilterer   // Log filterer for contract events
}

// SynthesisCaller is an auto generated read-only Go binding around an Ethereum contract.
type SynthesisCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SynthesisTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SynthesisFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SynthesisSession struct {
	Contract     *Synthesis        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SynthesisCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SynthesisCallerSession struct {
	Contract *SynthesisCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SynthesisTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SynthesisTransactorSession struct {
	Contract     *SynthesisTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SynthesisRaw is an auto generated low-level Go binding around an Ethereum contract.
type SynthesisRaw struct {
	Contract *Synthesis // Generic contract binding to access the raw methods on
}

// SynthesisCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SynthesisCallerRaw struct {
	Contract *SynthesisCaller // Generic read-only contract binding to access the raw methods on
}

// SynthesisTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SynthesisTransactorRaw struct {
	Contract *SynthesisTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSynthesis creates a new instance of Synthesis, bound to a specific deployed contract.
func NewSynthesis(address common.Address, backend bind.ContractBackend) (*Synthesis, error) {
	contract, err := bindSynthesis(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// NewSynthesisCaller creates a new read-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisCaller(address common.Address, caller bind.ContractCaller) (*SynthesisCaller, error) {
	contract, err := bindSynthesis(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisCaller{contract: contract}, nil
}

// NewSynthesisTransactor creates a new write-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisTransactor(address common.Address, transactor bind.ContractTransactor) (*SynthesisTransactor, error) {
	contract, err := bindSynthesis(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisTransactor{contract: contract}, nil
}

// NewSynthesisFilterer creates a new log filterer instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisFilterer(address common.Address, filterer bind.ContractFilterer) (*SynthesisFilterer, error) {
	contract, err := bindSynthesis(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SynthesisFilterer{contract: contract}, nil
}

// bindSynthesis binds a generic wrapper to an already deployed contract.
func bindSynthesis(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SynthesisABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.SynthesisCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCallerSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCaller) GetListRepresentation(opts *bind.CallOpts) ([][32]byte, []common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getListRepresentation")

	if err != nil {
		return *new([][32]byte), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)

	return out0, out1, err

}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCallerSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCaller) GetRepresentation(opts *bind.CallOpts, _rtoken [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getRepresentation", _rtoken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCallerSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCallerSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCaller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "proxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCallerSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCaller) RepresentationReal(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationReal", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCaller) RepresentationSynt(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationSynt", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCallerSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		Recipient     [32]byte
		Chain2address [32]byte
		Amount        *big.Int
		Token         [32]byte
		Stoken        common.Address
		State         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Chain2address = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Token = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Stoken = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.State = *abi.ConvertType(out[5], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCallerSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashEmergencyUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashEmergencyUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCaller) SynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "synthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCallerSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCallerSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticToken(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "burnSyntheticToken", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// BurnSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x8b247be0.
//
// Solidity: function burnSyntheticToken_solana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenSolana(opts *bind.TransactOpts, _stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "burnSyntheticToken_solana", _stoken, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x8b247be0.
//
// Solidity: function burnSyntheticToken_solana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticTokenSolana(_stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenSolana(&_Synthesis.TransactOpts, _stoken, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x8b247be0.
//
// Solidity: function burnSyntheticToken_solana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenSolana(_stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenSolana(&_Synthesis.TransactOpts, _stoken, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenTransit(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "burnSyntheticToken_transit", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticTokenTransit(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenTransit(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenTransit(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenTransit(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "changeBridge", _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactorSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisTransactor) CreateRepresentation(opts *bind.TransactOpts, _rtoken [32]byte, _name string, _symbol string) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "createRepresentation", _rtoken, _name, _symbol)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisSession) CreateRepresentation(_rtoken [32]byte, _name string, _symbol string) (*types.Transaction, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _name, _symbol)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisTransactorSession) CreateRepresentation(_rtoken [32]byte, _name string, _symbol string) (*types.Transaction, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _name, _symbol)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnburn(opts *bind.TransactOpts, _txID [32]byte) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnburn", _txID)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisSession) EmergencyUnburn(_txID [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnburn(_txID [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequest", _txID, _receiveSide, _oppositeBridge, _chainID)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainID)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainID)
}

// EmergencyUnsyntesizeRequestSolana is a paid mutator transaction binding the contract method 0x4a00e323.
//
// Solidity: function emergencyUnsyntesizeRequest_solana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequestSolana(opts *bind.TransactOpts, _pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequest_solana", _pubkeys, _bumpSynthesizeRequest, _chainId)
}

// EmergencyUnsyntesizeRequestSolana is a paid mutator transaction binding the contract method 0x4a00e323.
//
// Solidity: function emergencyUnsyntesizeRequest_solana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequestSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId)
}

// EmergencyUnsyntesizeRequestSolana is a paid mutator transaction binding the contract method 0x4a00e323.
//
// Solidity: function emergencyUnsyntesizeRequest_solana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequestSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId)
}

// GetTxId is a paid mutator transaction binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() returns(bytes32)
func (_Synthesis *SynthesisTransactor) GetTxId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "getTxId")
}

// GetTxId is a paid mutator transaction binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() returns(bytes32)
func (_Synthesis *SynthesisSession) GetTxId() (*types.Transaction, error) {
	return _Synthesis.Contract.GetTxId(&_Synthesis.TransactOpts)
}

// GetTxId is a paid mutator transaction binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() returns(bytes32)
func (_Synthesis *SynthesisTransactorSession) GetTxId() (*types.Transaction, error) {
	return _Synthesis.Contract.GetTxId(&_Synthesis.TransactOpts)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactor) MintSyntheticToken(opts *bind.TransactOpts, _txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "mintSyntheticToken", _txID, _tokenReal, _amount, _to)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactorSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x34bfbfda.
//
// Solidity: function mintSyntheticToken_solana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactor) MintSyntheticTokenSolana(opts *bind.TransactOpts, _txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "mintSyntheticToken_solana", _txID, _tokenReal, _amount, _to)
}

// MintSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x34bfbfda.
//
// Solidity: function mintSyntheticToken_solana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisSession) MintSyntheticTokenSolana(_txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticTokenSolana(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticTokenSolana is a paid mutator transaction binding the contract method 0x34bfbfda.
//
// Solidity: function mintSyntheticToken_solana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactorSession) MintSyntheticTokenSolana(_txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticTokenSolana(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisSession) RenounceOwnership() (*types.Transaction, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisTransactor) SetProxyCurve(opts *bind.TransactOpts, _proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "setProxyCurve", _proxy)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisSession) SetProxyCurve(_proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetProxyCurve(&_Synthesis.TransactOpts, _proxy)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisTransactorSession) SetProxyCurve(_proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetProxyCurve(&_Synthesis.TransactOpts, _proxy)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}

// SynthesisBurnRequestIterator is returned from FilterBurnRequest and is used to iterate over the raw logs and unpacked data for BurnRequest events raised by the Synthesis contract.
type SynthesisBurnRequestIterator struct {
	Event *SynthesisBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequest represents a BurnRequest event raised by the Synthesis contract.
type SynthesisBurnRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequest is a free log retrieval operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequest(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to []common.Address) (*SynthesisBurnRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestIterator{contract: _Synthesis.contract, event: "BurnRequest", logs: logs, sub: sub}, nil
}

// WatchBurnRequest is a free log subscription operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequest(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequest, _id [][32]byte, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequest)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequest is a log parse operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequest(log types.Log) (*SynthesisBurnRequest, error) {
	event := new(SynthesisBurnRequest)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisBurnRequestSolanaIterator is returned from FilterBurnRequestSolana and is used to iterate over the raw logs and unpacked data for BurnRequestSolana events raised by the Synthesis contract.
type SynthesisBurnRequestSolanaIterator struct {
	Event *SynthesisBurnRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequestSolana represents a BurnRequestSolana event raised by the Synthesis contract.
type SynthesisBurnRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequestSolana is a free log retrieval operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequestSolana(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to [][32]byte) (*SynthesisBurnRequestSolanaIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestSolanaIterator{contract: _Synthesis.contract, event: "BurnRequestSolana", logs: logs, sub: sub}, nil
}

// WatchBurnRequestSolana is a free log subscription operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequestSolana(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequestSolana, _id [][32]byte, _from []common.Address, _to [][32]byte) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequestSolana)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequestSolana is a log parse operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequestSolana(log types.Log) (*SynthesisBurnRequestSolana, error) {
	event := new(SynthesisBurnRequestSolana)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisCreatedRepresentationIterator is returned from FilterCreatedRepresentation and is used to iterate over the raw logs and unpacked data for CreatedRepresentation events raised by the Synthesis contract.
type SynthesisCreatedRepresentationIterator struct {
	Event *SynthesisCreatedRepresentation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisCreatedRepresentationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisCreatedRepresentation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisCreatedRepresentation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisCreatedRepresentationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisCreatedRepresentationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisCreatedRepresentation represents a CreatedRepresentation event raised by the Synthesis contract.
type SynthesisCreatedRepresentation struct {
	Rtoken [32]byte
	Stoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreatedRepresentation is a free log retrieval operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) FilterCreatedRepresentation(opts *bind.FilterOpts, _rtoken [][32]byte, _stoken []common.Address) (*SynthesisCreatedRepresentationIterator, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}
	var _stokenRule []interface{}
	for _, _stokenItem := range _stoken {
		_stokenRule = append(_stokenRule, _stokenItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "CreatedRepresentation", _rtokenRule, _stokenRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisCreatedRepresentationIterator{contract: _Synthesis.contract, event: "CreatedRepresentation", logs: logs, sub: sub}, nil
}

// WatchCreatedRepresentation is a free log subscription operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) WatchCreatedRepresentation(opts *bind.WatchOpts, sink chan<- *SynthesisCreatedRepresentation, _rtoken [][32]byte, _stoken []common.Address) (event.Subscription, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}
	var _stokenRule []interface{}
	for _, _stokenItem := range _stoken {
		_stokenRule = append(_stokenRule, _stokenItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "CreatedRepresentation", _rtokenRule, _stokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisCreatedRepresentation)
				if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRepresentation is a log parse operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) ParseCreatedRepresentation(log types.Log) (*SynthesisCreatedRepresentation, error) {
	event := new(SynthesisCreatedRepresentation)
	if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Synthesis contract.
type SynthesisOwnershipTransferredIterator struct {
	Event *SynthesisOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisOwnershipTransferred represents a OwnershipTransferred event raised by the Synthesis contract.
type SynthesisOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SynthesisOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisOwnershipTransferredIterator{contract: _Synthesis.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SynthesisOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisOwnershipTransferred)
				if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) ParseOwnershipTransferred(log types.Log) (*SynthesisOwnershipTransferred, error) {
	event := new(SynthesisOwnershipTransferred)
	if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertBurnCompletedIterator is returned from FilterRevertBurnCompleted and is used to iterate over the raw logs and unpacked data for RevertBurnCompleted events raised by the Synthesis contract.
type SynthesisRevertBurnCompletedIterator struct {
	Event *SynthesisRevertBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertBurnCompleted represents a RevertBurnCompleted event raised by the Synthesis contract.
type SynthesisRevertBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnCompleted is a free log retrieval operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterRevertBurnCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisRevertBurnCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertBurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertBurnCompletedIterator{contract: _Synthesis.contract, event: "RevertBurnCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertBurnCompleted is a free log subscription operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchRevertBurnCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisRevertBurnCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertBurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertBurnCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnCompleted is a log parse operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseRevertBurnCompleted(log types.Log) (*SynthesisRevertBurnCompleted, error) {
	event := new(SynthesisRevertBurnCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertSynthesizeRequestIterator is returned from FilterRevertSynthesizeRequest and is used to iterate over the raw logs and unpacked data for RevertSynthesizeRequest events raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequestIterator struct {
	Event *SynthesisRevertSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertSynthesizeRequest represents a RevertSynthesizeRequest event raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeRequest is a free log retrieval operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) FilterRevertSynthesizeRequest(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisRevertSynthesizeRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertSynthesizeRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertSynthesizeRequestIterator{contract: _Synthesis.contract, event: "RevertSynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeRequest is a free log subscription operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) WatchRevertSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *SynthesisRevertSynthesizeRequest, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertSynthesizeRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertSynthesizeRequest)
				if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeRequest is a log parse operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) ParseRevertSynthesizeRequest(log types.Log) (*SynthesisRevertSynthesizeRequest, error) {
	event := new(SynthesisRevertSynthesizeRequest)
	if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedIterator is returned from FilterSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for SynthesizeCompleted events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedIterator struct {
	Event *SynthesisSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompleted represents a SynthesizeCompleted event raised by the Synthesis contract.
type SynthesisSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompleted is a free log retrieval operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisSynthesizeCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedIterator{contract: _Synthesis.contract, event: "SynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompleted is a free log subscription operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompleted is a log parse operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompleted(log types.Log) (*SynthesisSynthesizeCompleted, error) {
	event := new(SynthesisSynthesizeCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedSolanaIterator is returned from FilterSynthesizeCompletedSolana and is used to iterate over the raw logs and unpacked data for SynthesizeCompletedSolana events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolanaIterator struct {
	Event *SynthesisSynthesizeCompletedSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompletedSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompletedSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompletedSolana represents a SynthesizeCompletedSolana event raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolana struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompletedSolana is a free log retrieval operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompletedSolana(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisSynthesizeCompletedSolanaIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompletedSolana", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedSolanaIterator{contract: _Synthesis.contract, event: "SynthesizeCompletedSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompletedSolana is a free log subscription operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompletedSolana(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompletedSolana, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompletedSolana", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompletedSolana)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompletedSolana is a log parse operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompletedSolana(log types.Log) (*SynthesisSynthesizeCompletedSolana, error) {
	event := new(SynthesisSynthesizeCompletedSolana)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
