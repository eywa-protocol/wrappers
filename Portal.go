// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// PortalMetaData contains all meta data concerning the Portal contract.

var PortalMetaData = &bind.MetaData{

	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"}],\"name\":\"ApprovedRepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rtoken\",\"type\":\"address\"}],\"name\":\"RepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevertBurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequestSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_ED25519_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_INSTRUCTIONS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approveRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"approveRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"createRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnburnRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaSignedMessage\",\"name\":\"_signedMessage\",\"type\":\"tuple\"}],\"name\":\"emergencyUnburnRequestToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedEmergencyExecuter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thisChainId\",\"type\":\"uint256\"}],\"name\":\"initializeFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"enumPortal.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnburn\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashMintSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"solAmount64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"solAmount\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structPortal.SynthParams\",\"name\":\"_synthParams\",\"type\":\"tuple\"}],\"name\":\"synthesize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_txStateBump\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"synthesizeToSolana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenDecimalsData\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsynthesizeStates\",\"outputs\":[{\"internalType\":\"enumPortal.UnsynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506136e8806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063d1ec85ed116100b8578063edff2c821161007c578063edff2c8214610591578063f2fde38b146105b8578063f55090da146105cb578063fab92894146105de578063fbe44d181461060e57600080fd5b8063d1ec85ed14610547578063da7422281461055a578063e3d29c5d1461056d578063e747c08514610576578063e78cea921461057e57600080fd5b8063a0a71aa3116100ff578063a0a71aa31461049d578063a6037a29146104b0578063ac5de43c146104c3578063ae1f59b6146104d6578063c4b553c41461051b57600080fd5b80638da5cb5b146104205780638e2e82c01461043157806399677c21146104395780639d8669851461044c57600080fd5b806343961668116101b3578063572b6c0511610182578063572b6c051461038e57806370a08231146103c0578063715018a6146103e05780637da0a877146103e8578063842ce88d146103f957600080fd5b8063439616681461033657806344aedc5f14610349578063486ff0cd1461037e57806352dd22ee1461038657600080fd5b80632ab8c8b0116101fa5780632ab8c8b0146102af5780632ae3ff5f146102cf5780632b1106e3146102e257806333feeaff146103095780633e7e25c11461031c57600080fd5b8063054aabee1461022c578063067bd07a1461026657806308774410146102715780630e03e49014610286575b600080fd5b6102537f037d46d67c93fbbe12f9428f838d40ff0570744927f48a64fcca70448000000081565b6040519081526020015b60405180910390f35b610253631de44e3d81565b61028461027f366004612b45565b610621565b005b610297610294366004612b67565b90565b6040516001600160a01b03909116815260200161025d565b6102c26102bd366004612c6e565b610695565b60405161025d9190612e06565b6102846102dd366004612e19565b610886565b6102537f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000081565b610284610317366004612e66565b6109a8565b61025361032a366004612b45565b6001600160a01b031690565b610284610344366004612eb4565b610c4c565b61036c610357366004612b67565b6000908152606c602052604090205460ff1690565b60405160ff909116815260200161025d565b6102c2610ec6565b610253600081565b6103b061039c366004612b45565b6065546001600160a01b0391821691161490565b604051901515815260200161025d565b6102536103ce366004612b45565b60666020526000908152604090205481565b610284610f54565b6065546001600160a01b0316610297565b6102537f06a7d517187bd16635dad40455fdc2c0c124c68f215675a5dbbacb5f0800000081565b6033546001600160a01b0316610297565b6102c2610fa9565b610284610447366004612b45565b610fe2565b61048c61045a366004612b67565b606a60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b60405161025d959493929190612f52565b6102846104ab366004612f88565b611019565b6102846104be366004612fc8565b6110b4565b6102536104d136600461305a565b611229565b6105026104e4366004612b67565b606c6020526000908152604090205460ff8082169161010090041682565b6040805160ff909316835290151560208301520161025d565b61052e610529366004612b67565b611887565b60405167ffffffffffffffff909116815260200161025d565b6102846105553660046130f3565b6118ea565b610284610568366004612b45565b61197e565b61025360695481565b6102c26119d3565b606854610297906001600160a01b031681565b6102537f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a981565b6102846105c6366004612b45565b6119fa565b6102536105d936600461311f565b611ab1565b6106016105ec366004612b67565b606b6020526000908152604090205460ff1681565b60405161025d9190613189565b61028461061c36600461319c565b611da2565b610629612411565b6001600160a01b03166106446033546001600160a01b031690565b6001600160a01b0316146106735760405162461bcd60e51b815260040161066a90613220565b60405180910390fd5b606880546001600160a01b0319166001600160a01b0392909216919091179055565b60208082015151604051606092600883811c62ff00ff1663ff00ff009490911b9390931692909217601081811c91901b17916000916106e99184910160e09190911b6001600160e01b031916815260040190565b6040516020818303038152906040529050606060005b8560200151518110156107e7578560200151818151811061072257610722613255565b6020026020010151600001518660200151828151811061074457610744613255565b6020026020010151602001518760200151838151811061076657610766613255565b60200260200101516040015160405160200161079f9392919092835290151560f890811b6020840152901515901b602182015260220190565b604051602081830303815290604052915082826040516020016107c392919061326b565b604051602081830303815290604052925080806107df906132b0565b9150506106ff565b5084516040516107fb9184916020016132cb565b60408051601f198184030181528282529087015151600881811c62ff00ff1663ff00ff009290911b9190911617601081811c91901b179450925061084590839085906020016132ed565b604051602081830303815290604052915081856040015160405160200161086d92919061326b565b60408051601f1981840301815291905295945050505050565b600054610100900460ff166108a15760005460ff16156108a5565b303b155b6109085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161066a565b600054610100900460ff1615801561092a576000805461ffff19166101011790555b610932612445565b61093a61246c565b60408051808201909152600580825264322e322e3360d81b602090920191825261096691606791612a90565b50606880546001600160a01b0319166001600160a01b03861617905561098b836124a3565b606982905580156109a2576000805461ff00191690555b50505050565b6068546001600160a01b031633146109f85760405162461bcd60e51b8152602060048201526013602482015272506f7274616c3a20627269646765206f6e6c7960681b604482015260640161066a565b6000858152606a6020908152604080832081518084018a90526bffffffffffffffffffffffff1960608a901b16818401524660548201527f656d657267656e6379556e73796e74686573697a6528627974657333322c616460748201527f64726573732c75696e74382c627974657333322c62797465733332290000000060948201528251808203609001815260b0820184528051908501207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060d083015260ec8083018290528451808403909101815261010c909201909352805193019290922091929091610aea908787876124c5565b90506001600484015460ff166002811115610b0757610b07612f1e565b14610b685760405162461bcd60e51b815260206004820152602b60248201527f506f7274616c3a207374617465206e6f74206f70656e206f7220747820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b606482015260840161066a565b6001600160a01b038116835414610bc15760405162461bcd60e51b815260206004820152601860248201527f506f7274616c3a20696e76616c6964207478206f776e65720000000000000000604482015260640161066a565b60048301805460ff191660021790556003830154610be5908454856002015461266e565b82546001600160a01b0316887f944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca98560020154610c22876003015490565b604080519283526001600160a01b0390911660208301520160405180910390a35050505050505050565b60016000888152606b602052604090205460ff166002811115610c7157610c71612f1e565b1415610c8f5760405162461bcd60e51b815260040161066a9061331f565b6000878152606b60209081526040808320805460ff191660021790558051606081019091526036808252909161364a908301398051906020012088610cd2612411565b60405160248101929092526001600160a01b0316604482015260ff861660648201526084810185905260a4810184905260c40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526068549091506000906001600160a01b0316632d0335ab610d56612411565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190613366565b90506000610df46001600160a01b03891688606954610de38d6001600160a01b031690565b610dee61032a612411565b8761279f565b6068549091506001600160a01b031663329ef45f848b8b8b86610e15612411565b896040518863ffffffff1660e01b8152600401610e38979695949392919061337f565b6020604051808303816000875af1158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b91906133cf565b50610e84612411565b6001600160a01b0316817f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a350505050505050505050565b60678054610ed3906133ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610eff906133ec565b8015610f4c5780601f10610f2157610100808354040283529160200191610f4c565b820191906000526020600020905b815481529060010190602001808311610f2f57829003601f168201915b505050505081565b610f5c612411565b6001600160a01b0316610f776033546001600160a01b031690565b6001600160a01b031614610f9d5760405162461bcd60e51b815260040161066a90613220565b610fa760006127ee565b565b602c60fd600160656082608b6012604e604051602001610fd0989796959493929190613427565b60405160208183030381529060405281565b6040516001600160a01b038216907f670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af85147090600090a250565b611021612411565b6001600160a01b031661103c6033546001600160a01b031690565b6001600160a01b0316146110625760405162461bcd60e51b815260040161066a90613220565b6000838152606c602052604080822080548415156101000261ffff1990911660ff8716171790555184917f658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e15012391a2505050565b6068546001600160a01b031633146111045760405162461bcd60e51b8152602060048201526013602482015272506f7274616c3a20627269646765206f6e6c7960681b604482015260640161066a565b6000848152606b602052604081205460ff16600281111561112757611127612f1e565b146111855760405162461bcd60e51b815260206004820152602860248201527f506f7274616c3a2073796e74686574696320746f6b656e7320656d657267656e60448201526731bcaab7313ab93760c11b606482015260840161066a565b61119083828461266e565b6001600160a01b038316600090815260666020526040812080548492906111b8908490613482565b90915550506000848152606b6020526040902080546001919060ff191682800217905550604080518381526001600160a01b03858116602083015283169186917f7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0910160405180910390a350505050565b6001600160a01b0387166000908152606c6020526040812054610100900460ff166112965760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a20746f6b656e206d7573742062652076657269666965640000604482015260640161066a565b6112a08888612840565b631de44e3d82146112f35760405162461bcd60e51b815260206004820152601960248201527f506f7274616c3a20696e636f727265637420636861696e494400000000000000604482015260640161066a565b67ffffffffffffffff871061134a5760405162461bcd60e51b815260206004820152601860248201527f506f7274616c3a20616d6f756e7420746f6f206c617267650000000000000000604482015260640161066a565b600061135588611887565b606854604051632d0335ab60e01b81526001600160a01b038a8116600483015292935060009290911690632d0335ab90602401602060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190613366565b9050611431878760038181106113e1576113e1613255565b90506020020135631de44e3d6069548a8a6001600781111561140557611405612f1e565b81811061141457611414613255565b9050602002013561142b8d6001600160a01b031690565b8661279f565b604080516009808252610140820190925291945060009190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161144e5750506040805160608101909152909150808989600281811061149c5761149c613255565b90506020020135815260200160001515815260200160011515815250816000815181106114cb576114cb613255565b6020908102919091010152604080516060810190915280898960058181106114f5576114f5613255565b905060200201358152602001600015158152602001600115158152508160018151811061152457611524613255565b60209081029190910101526040805160608101909152808989600681811061154e5761154e613255565b905060200201358152602001600015158152602001600015158152508160028151811061157d5761157d613255565b6020908102919091010152604080516060810190915280898960078181106115a7576115a7613255565b90506020020135815260200160001515815260200160011515815250816003815181106115d6576115d6613255565b60209081029190910101526040805160608101909152808989600081811061160057611600613255565b905060200201358152602001600015158152602001600115158152508160048151811061162f5761162f613255565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160058151811061169157611691613255565b602002602001018190525060405180606001604052806000801b815260200160001515815260200160001515815250816006815181106116d3576116d3613255565b602002602001018190525060405180606001604052807f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000060001b8152602001600015158152602001600015158152508160078151811061173557611735613255565b60209081029190910101526040805160608101909152808989600481811061175f5761175f613255565b905060200201358152602001600115158152602001600015158152508160088151811061178e5761178e613255565b60200260200101819052506117aa8b848a8a8a868f898c61294a565b506000838152606a602052604090206001600160a01b0389168155878760008181106117d8576117d8613255565b60200291909101356001830155506001600160a01b038b166003820155600281018a905560048101805460ff19166001179055878760008161181c5761181c613255565b90506020020135896001600160a01b0316857fa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad7438d8f6040516118719291909182526001600160a01b0316602082015260400190565b60405180910390a4505050979650505050505050565b65ff000000ff00600882811b91821664ff000000ff9390911c92831617601090811b67ff000000ff0000009290921666ff000000ff0000939093169290921790911c17602081811b6bffffffffffffffff000000001691901c63ffffffff161790565b6118f2612411565b6001600160a01b031661190d6033546001600160a01b031690565b6001600160a01b0316146119335760405162461bcd60e51b815260040161066a90613220565b6000828152606c6020526040808220805461ffff191660ff8516176101001790555183917f658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e15012391a25050565b611986612411565b6001600160a01b03166119a16033546001600160a01b031690565b6001600160a01b0316146119c75760405162461bcd60e51b815260040161066a90613220565b6119d0816124a3565b50565b609560846068607b609d6055601560a1604051602001610fd0989796959493929190613427565b611a02612411565b6001600160a01b0316611a1d6033546001600160a01b031690565b6001600160a01b031614611a435760405162461bcd60e51b815260040161066a90613220565b6001600160a01b038116611aa85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066a565b6119d0816127ee565b6001600160a01b0385166000908152606c6020526040812054610100900460ff16611b1e5760405162461bcd60e51b815260206004820152601e60248201527f506f7274616c3a20746f6b656e206d7573742062652076657269666965640000604482015260640161066a565b611b288686612840565b606854604051632d0335ab60e01b81526001600160a01b0386811660048301526000921690632d0335ab90602401602060405180830381865afa158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b979190613366565b9050611bd7611baf61032a6040860160208701612b45565b606954604086013590611bc861032a6020890189612b45565b6001600160a01b038a1661142b565b91506000604051806060016040528060338152602001613680603391398051602090910120604051602481018590526001600160a01b03808b166044830152606482018a90528716608482015260a40160408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b0319909416939093179092526068549092506001600160a01b03169063329ef45f908390611c7e90880188612b45565b611c8e6040890160208a01612b45565b8860400135888c896040518863ffffffff1660e01b8152600401611cb8979695949392919061337f565b6020604051808303816000875af1158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb91906133cf565b506000838152606a602052604090206001600160a01b03871681556001600160a01b03861660018201556001600160a01b03891660038201556002810188905560048101805460ff19166001179055604080518981526001600160a01b038b8116602083015280891692908a169187917f79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9910160405180910390a450505095945050505050565b631de44e3d8214611df55760405162461bcd60e51b815260206004820152601960248201527f506f7274616c3a20696e636f727265637420636861696e496400000000000000604482015260640161066a565b60016000868152606b602052604090205460ff166002811115611e1a57611e1a612f1e565b1415611e385760405162461bcd60e51b815260040161066a9061331f565b6000858152606b60205260408120805460ff191660021790556068546001600160a01b0316632d0335ab611e6a612411565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed29190613366565b90506000611f3186866003818110611eec57611eec613255565b90506020020135631de44e3d606954898960016007811115611f1057611f10612f1e565b818110611f1f57611f1f613255565b90506020020135610dee61032a612411565b604080516008808252610120820190925291925060009190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611f4e57505060408051606081019091529091508088886002818110611f9c57611f9c613255565b9050602002013581526020016000151581526020016000151581525081600081518110611fcb57611fcb613255565b602090810291909101015260408051606081019091528088886007818110611ff557611ff5613255565b905060200201358152602001600015158152602001600115158152508160018151811061202457612024613255565b60209081029190910101526040805160608101909152808888600581811061204e5761204e613255565b905060200201358152602001600015158152602001600115158152508160028151811061207d5761207d613255565b6020908102919091010152604080516060810190915280888860068181106120a7576120a7613255565b90506020020135815260200160001515815260200160001515815250816003815181106120d6576120d6613255565b60209081029190910101526040805160608101909152808888600081811061210057612100613255565b905060200201358152602001600015158152602001600115158152508160048151811061212f5761212f613255565b602002602001018190525060405180606001604052807f06a7d517187bd16635dad40455fdc2c0c124c68f215675a5dbbacb5f0800000060001b8152602001600015158152602001600015158152508160058151811061219157612191613255565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b815260200160001515815260200160001515815250816006815181106121f3576121f3613255565b60209081029190910101526040805160608101909152808888600481811061221d5761221d613255565b905060200201358152602001600115158152602001600015158152508160078151811061224c5761224c613255565b602090810291909101015260685460408051606081019091526001600160a01b03909116906331b433f99061231d90808b8b600181811061228f5761228f613255565b905060200201358152602001858152602001609560846068607b609d6055601560a16040516020016122c8989796959493929190613427565b60408051601f198184030181529181528a359060208c0135908c01356122f160608e018e613499565b604051602001612306969594939291906134e0565b604051602081830303815290604052815250610695565b8989600181811061233057612330613255565b602002919091013590508a8a600381811061234d5761234d613255565b90506020020135631de44e3d87612362612411565b8a6040518863ffffffff1660e01b81526004016123859796959493929190613522565b6020604051808303816000875af11580156123a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c891906133cf565b506123d1612411565b6001600160a01b0316827f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a35050505050505050565b60006014361080159061242e57506065546001600160a01b031633145b15612440575060131936013560601c90565b503390565b600054610100900460ff16610fa75760405162461bcd60e51b815260040161066a9061356f565b600054610100900460ff166124935760405162461bcd60e51b815260040161066a9061356f565b610fa761249e612411565b6127ee565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156125425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161066a565b8360ff16601b148061255757508360ff16601c145b6125ae5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161066a565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612602573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161066a565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916126ca91906135ba565b6000604051808303816000865af19150503d8060008114612707576040519150601f19603f3d011682016040523d82523d6000602084013e61270c565b606091505b509150915081801561273657508051158061273657508080602001905181019061273691906133cf565b6127985760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b606482015260840161066a565b5050505050565b60408051602080820194909452808201929092526060820195909552608081019390935260a083019190915260c0808301949094528251808303909401845260e0909101909152815191012090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260666020526040908190205490516370a0823160e01b8152306004820152909183918391906370a08231906024016020604051808303816000875af115801561289c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c09190613366565b6128ca9190613482565b10156129185760405162461bcd60e51b815260206004820152601c60248201527f506f7274616c3a20696e73756666696369656e742062616c616e636500000000604482015260640161066a565b6001600160a01b038316600090815260666020526040812080548492906129409084906135d6565b9091555050505050565b60685460408051606081019091526001600160a01b03909116906331b433f9906129e090808b8b600181811061298257612982613255565b905060200201358152602001888152602001602c60fd600160656082608b6012604e6040516020016129bb989796959493929190613427565b6040516020818303038152906040528a8f8f60405160200161230694939291906135ee565b898960018181106129f3576129f3613255565b602002919091013590508a8a6003818110612a1057612a10613255565b90506020020135631de44e3d8689896040518863ffffffff1660e01b8152600401612a419796959493929190613522565b6020604051808303816000875af1158015612a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8491906133cf565b50505050505050505050565b828054612a9c906133ec565b90600052602060002090601f016020900481019282612abe5760008555612b04565b82601f10612ad757805160ff1916838001178555612b04565b82800160010185558215612b04579182015b82811115612b04578251825591602001919060010190612ae9565b50612b10929150612b14565b5090565b5b80821115612b105760008155600101612b15565b80356001600160a01b0381168114612b4057600080fd5b919050565b600060208284031215612b5757600080fd5b612b6082612b29565b9392505050565b600060208284031215612b7957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612bb957612bb9612b80565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612be857612be8612b80565b604052919050565b80151581146119d057600080fd5b600082601f830112612c0f57600080fd5b813567ffffffffffffffff811115612c2957612c29612b80565b612c3c601f8201601f1916602001612bbf565b818152846020838601011115612c5157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215612c8157600080fd5b823567ffffffffffffffff80821115612c9957600080fd5b81850191506060808388031215612caf57600080fd5b612cb7612b96565b833581528484013583811115612ccc57600080fd5b8401601f81018913612cdd57600080fd5b803584811115612cef57612cef612b80565b612cfd878260051b01612bbf565b8181529084028201870190878101908b831115612d1957600080fd5b928801925b82841015612d755785848d031215612d365760008081fd5b612d3e612b96565b8435815289850135612d4f81612bf0565b818b0152604085810135612d6281612bf0565b9082015282529285019290880190612d1e565b8089860152505050506040840135945082851115612d9257600080fd5b612d9e88868601612bfe565b6040820152979650505050505050565b60005b83811015612dc9578181015183820152602001612db1565b838111156109a25750506000910152565b60008151808452612df2816020860160208601612dae565b601f01601f19169290920160200192915050565b602081526000612b606020830184612dda565b600080600060608486031215612e2e57600080fd5b612e3784612b29565b9250612e4560208501612b29565b9150604084013590509250925092565b803560ff81168114612b4057600080fd5b600080600080600060a08688031215612e7e57600080fd5b85359450612e8e60208701612b29565b9350612e9c60408701612e55565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a031215612ecf57600080fd5b87359650612edf60208901612b29565b9550612eed60408901612b29565b945060608801359350612f0260808901612e55565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b600381106119d057634e487b7160e01b600052602160045260246000fd5b600060a082019050868252856020830152846040830152836060830152612f7883612f34565b8260808301529695505050505050565b600080600060608486031215612f9d57600080fd5b83359250612fad60208501612e55565b91506040840135612fbd81612bf0565b809150509250925092565b60008060008060808587031215612fde57600080fd5b84359350612fee60208601612b29565b92506040850135915061300360608601612b29565b905092959194509250565b60008083601f84011261302057600080fd5b50813567ffffffffffffffff81111561303857600080fd5b6020830191508360208260051b850101111561305357600080fd5b9250929050565b600080600080600080600060c0888a03121561307557600080fd5b61307e88612b29565b96506020880135955061309360408901612b29565b9450606088013567ffffffffffffffff8111156130af57600080fd5b6130bb8a828b0161300e565b90955093505060808801356001600160f81b0319811681146130dc57600080fd5b8092505060a0880135905092959891949750929550565b6000806040838503121561310657600080fd5b8235915061311660208401612e55565b90509250929050565b600080600080600085870360e081121561313857600080fd5b61314187612b29565b95506020870135945061315660408801612b29565b935061316460608801612b29565b92506060607f198201121561317857600080fd5b506080860190509295509295909350565b6020810161319683612f34565b91905290565b6000806000806000608086880312156131b457600080fd5b85359450602086013567ffffffffffffffff808211156131d357600080fd5b6131df89838a0161300e565b90965094506040880135935060608801359150808211156131ff57600080fd5b5086016080818903121561321257600080fd5b809150509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000835161327d818460208801612dae565b835190830190613291818360208801612dae565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156132c4576132c461329a565b5060010190565b600083516132dd818460208801612dae565b9190910191825250602001919050565b600083516132ff818460208801612dae565b60e09390931b6001600160e01b0319169190920190815260040192915050565b60208082526027908201527f506f7274616c3a207265616c20746f6b656e7320616c7265616479207472616e6040820152661cd9995c9c995960ca1b606082015260800190565b60006020828403121561337857600080fd5b5051919050565b60e08152600061339260e083018a612dda565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c00191909152919050565b6000602082840312156133e157600080fd5b8151612b6081612bf0565b600181811c9082168061340057607f821691505b6020821081141561342157634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160f81b031960f8998a1b8116825297891b8816600182015295881b8716600287015293871b8616600386015291861b85166004850152851b84166005840152841b8316600683015290921b16600782015260080190565b6000828210156134945761349461329a565b500390565b6000808335601e198436030181126134b057600080fd5b83018035915067ffffffffffffffff8211156134cb57600080fd5b60200191503681900382131561305357600080fd5b600087516134f2818460208c01612dae565b82018781526020810187905260408101869052838560608301376000930160600192835250909695505050505050565b60e08152600061353560e083018a612dda565b6020830198909852506040810195909552606085019390935260808401919091526001600160a01b031660a083015260c090910152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516135cc818460208701612dae565b9190910192915050565b600082198211156135e9576135e961329a565b500190565b60008551613600818460208a01612dae565b6001600160f81b0319959095169190940190815260609290921b6bffffffffffffffffffffffff1916600183015260c01b6001600160c01b0319166015820152601d019291505056fe656d657267656e6379556e6275726e28627974657333322c616464726573732c75696e74382c627974657333322c62797465733332296d696e7453796e746865746963546f6b656e28627974657333322c616464726573732c75696e743235362c6164647265737329a2646970667358221220f458db8283e48085f5afd93d84a90a6b3a1066976cf95322666bbcdd2f6b821e64736f6c634300080a0033",
}

// PortalABI is the input ABI used to generate the binding from.
// Deprecated: Use PortalMetaData.ABI instead.
var PortalABI = PortalMetaData.ABI

// PortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PortalMetaData.Bin instead.
var PortalBin = PortalMetaData.Bin

// DeployPortal deploys a new Ethereum contract, binding an instance of Portal to it.
func DeployPortal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portal, error) {
	parsed, err := PortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// Portal is an auto generated Go binding around an Ethereum contract.
type Portal struct {
	PortalCaller     // Read-only binding to the contract
	PortalTransactor // Write-only binding to the contract
	PortalFilterer   // Log filterer for contract events
}

// PortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type PortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Portal *PortalTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Portal.gsn = opts
}

// PortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PortalSession struct {
	Contract     *Portal           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PortalCallerSession struct {
	Contract *PortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PortalTransactorSession struct {
	Contract     *PortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type PortalRaw struct {
	Contract *Portal // Generic contract binding to access the raw methods on
}

// PortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PortalCallerRaw struct {
	Contract *PortalCaller // Generic read-only contract binding to access the raw methods on
}

// PortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PortalTransactorRaw struct {
	Contract *PortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPortal creates a new instance of Portal, bound to a specific deployed contract.
func NewPortal(address common.Address, backend bind.ContractBackend) (*Portal, error) {
	contract, err := bindPortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// NewPortalCaller creates a new read-only instance of Portal, bound to a specific deployed contract.
func NewPortalCaller(address common.Address, caller bind.ContractCaller) (*PortalCaller, error) {
	contract, err := bindPortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PortalCaller{contract: contract}, nil
}

// NewPortalTransactor creates a new write-only instance of Portal, bound to a specific deployed contract.
func NewPortalTransactor(address common.Address, transactor bind.ContractTransactor) (*PortalTransactor, error) {
	contract, err := bindPortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PortalTransactor{contract: contract}, nil
}

// NewPortalFilterer creates a new log filterer instance of Portal, bound to a specific deployed contract.
func NewPortalFilterer(address common.Address, filterer bind.ContractFilterer) (*PortalFilterer, error) {
	contract, err := bindPortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PortalFilterer{contract: contract}, nil
}

// bindPortal binds a generic wrapper to an already deployed contract.
func bindPortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PortalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.PortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANAED25519SIG is a free data retrieval call binding the contract method 0x054aabee.
//
// Solidity: function SOLANA_ED25519_SIG() view returns(bytes32)
func (_Portal *PortalCaller) SOLANAED25519SIG(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_ED25519_SIG")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANAED25519SIG is a free data retrieval call binding the contract method 0x054aabee.
//
// Solidity: function SOLANA_ED25519_SIG() view returns(bytes32)
func (_Portal *PortalSession) SOLANAED25519SIG() ([32]byte, error) {
	return _Portal.Contract.SOLANAED25519SIG(&_Portal.CallOpts)
}

// SOLANAED25519SIG is a free data retrieval call binding the contract method 0x054aabee.
//
// Solidity: function SOLANA_ED25519_SIG() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANAED25519SIG() ([32]byte, error) {
	return _Portal.Contract.SOLANAED25519SIG(&_Portal.CallOpts)
}

// SOLANAINSTRUCTIONS is a free data retrieval call binding the contract method 0x842ce88d.
//
// Solidity: function SOLANA_INSTRUCTIONS() view returns(bytes32)
func (_Portal *PortalCaller) SOLANAINSTRUCTIONS(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_INSTRUCTIONS")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANAINSTRUCTIONS is a free data retrieval call binding the contract method 0x842ce88d.
//
// Solidity: function SOLANA_INSTRUCTIONS() view returns(bytes32)
func (_Portal *PortalSession) SOLANAINSTRUCTIONS() ([32]byte, error) {
	return _Portal.Contract.SOLANAINSTRUCTIONS(&_Portal.CallOpts)
}

// SOLANAINSTRUCTIONS is a free data retrieval call binding the contract method 0x842ce88d.
//
// Solidity: function SOLANA_INSTRUCTIONS() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANAINSTRUCTIONS() ([32]byte, error) {
	return _Portal.Contract.SOLANAINSTRUCTIONS(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCallerSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCallerSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		From   [32]byte
		To     [32]byte
		Amount *big.Int
		Rtoken [32]byte
		State  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.From = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.To = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Rtoken = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.State = *abi.ConvertType(out[4], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCallerSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCaller) SighashEmergencyUnburn(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashEmergencyUnburn")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCallerSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCaller) SighashMintSyntheticToken(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashMintSyntheticToken")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCallerSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalCaller) SolAmount64(opts *bind.CallOpts, amount *big.Int) (uint64, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "solAmount64", amount)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalSession) SolAmount64(amount *big.Int) (uint64, error) {
	return _Portal.Contract.SolAmount64(&_Portal.CallOpts, amount)
}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalCallerSession) SolAmount64(amount *big.Int) (uint64, error) {
	return _Portal.Contract.SolAmount64(&_Portal.CallOpts, amount)
}

// ThisChainId is a free data retrieval call binding the contract method 0xe3d29c5d.
//
// Solidity: function thisChainId() view returns(uint256)
func (_Portal *PortalCaller) ThisChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "thisChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ThisChainId is a free data retrieval call binding the contract method 0xe3d29c5d.
//
// Solidity: function thisChainId() view returns(uint256)
func (_Portal *PortalSession) ThisChainId() (*big.Int, error) {
	return _Portal.Contract.ThisChainId(&_Portal.CallOpts)
}

// ThisChainId is a free data retrieval call binding the contract method 0xe3d29c5d.
//
// Solidity: function thisChainId() view returns(uint256)
func (_Portal *PortalCallerSession) ThisChainId() (*big.Int, error) {
	return _Portal.Contract.ThisChainId(&_Portal.CallOpts)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 _rtoken) view returns(uint8)
func (_Portal *PortalCaller) TokenDecimals(opts *bind.CallOpts, _rtoken [32]byte) (uint8, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "tokenDecimals", _rtoken)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 _rtoken) view returns(uint8)
func (_Portal *PortalSession) TokenDecimals(_rtoken [32]byte) (uint8, error) {
	return _Portal.Contract.TokenDecimals(&_Portal.CallOpts, _rtoken)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 _rtoken) view returns(uint8)
func (_Portal *PortalCallerSession) TokenDecimals(_rtoken [32]byte) (uint8, error) {
	return _Portal.Contract.TokenDecimals(&_Portal.CallOpts, _rtoken)
}

// TokenDecimalsData is a free data retrieval call binding the contract method 0xae1f59b6.
//
// Solidity: function tokenDecimalsData(bytes32 ) view returns(uint8 tokenDecimals, bool isApproved)
func (_Portal *PortalCaller) TokenDecimalsData(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TokenDecimals uint8
	IsApproved    bool
}, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "tokenDecimalsData", arg0)

	outstruct := new(struct {
		TokenDecimals uint8
		IsApproved    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenDecimals = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.IsApproved = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TokenDecimalsData is a free data retrieval call binding the contract method 0xae1f59b6.
//
// Solidity: function tokenDecimalsData(bytes32 ) view returns(uint8 tokenDecimals, bool isApproved)
func (_Portal *PortalSession) TokenDecimalsData(arg0 [32]byte) (struct {
	TokenDecimals uint8
	IsApproved    bool
}, error) {
	return _Portal.Contract.TokenDecimalsData(&_Portal.CallOpts, arg0)
}

// TokenDecimalsData is a free data retrieval call binding the contract method 0xae1f59b6.
//
// Solidity: function tokenDecimalsData(bytes32 ) view returns(uint8 tokenDecimals, bool isApproved)
func (_Portal *PortalCallerSession) TokenDecimalsData(arg0 [32]byte) (struct {
	TokenDecimals uint8
	IsApproved    bool
}, error) {
	return _Portal.Contract.TokenDecimalsData(&_Portal.CallOpts, arg0)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCallerSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCaller) UnsynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "unsynthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCallerSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCallerSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xa0a71aa3.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals, bool _approve) returns()
func (_Portal *PortalTransactor) ApproveRepresentationRequest(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8, _approve bool) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "approveRepresentationRequest", _rtoken, _decimals, _approve)
}
func (_Portal *PortalTransactor) ApproveRepresentationRequestOverGsn(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8, _approve bool) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "approveRepresentationRequest", _rtoken, _decimals, _approve)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xa0a71aa3.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals, bool _approve) returns()
func (_Portal *PortalSession) ApproveRepresentationRequest(_rtoken [32]byte, _decimals uint8, _approve bool) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken, _decimals, _approve)
}
func (_Portal *PortalSession) ApproveRepresentationRequestOverGsn(_rtoken [32]byte, _decimals uint8, _approve bool) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken, _decimals, _approve)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xa0a71aa3.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals, bool _approve) returns()
func (_Portal *PortalTransactorSession) ApproveRepresentationRequest(_rtoken [32]byte, _decimals uint8, _approve bool) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken, _decimals, _approve)
}
func (_Portal *PortalTransactorSession) ApproveRepresentationRequestOverGsn(_rtoken [32]byte, _decimals uint8, _approve bool) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken, _decimals, _approve)
}

// ApproveRepresentationRequest0 is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalTransactor) ApproveRepresentationRequest0(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "approveRepresentationRequest0", _rtoken, _decimals)
}
func (_Portal *PortalTransactor) ApproveRepresentationRequest0OverGsn(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "approveRepresentationRequest0", _rtoken, _decimals)
}

// ApproveRepresentationRequest0 is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalSession) ApproveRepresentationRequest0(_rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest0(&_Portal.TransactOpts, _rtoken, _decimals)
}
func (_Portal *PortalSession) ApproveRepresentationRequest0OverGsn(_rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequest0OverGsn(&_Portal.TransactOpts, _rtoken, _decimals)
}

// ApproveRepresentationRequest0 is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalTransactorSession) ApproveRepresentationRequest0(_rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest0(&_Portal.TransactOpts, _rtoken, _decimals)
}
func (_Portal *PortalTransactorSession) ApproveRepresentationRequest0OverGsn(_rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequest0OverGsn(&_Portal.TransactOpts, _rtoken, _decimals)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "changeBridge", _bridge)
}
func (_Portal *PortalTransactor) ChangeBridgeOverGsn(opts *bind.TransactOpts, _bridge common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "changeBridge", _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}
func (_Portal *PortalSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridgeOverGsn(&_Portal.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactorSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}
func (_Portal *PortalTransactorSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridgeOverGsn(&_Portal.TransactOpts, _bridge)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactor) CreateRepresentationRequest(opts *bind.TransactOpts, _rtoken common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "createRepresentationRequest", _rtoken)
}
func (_Portal *PortalTransactor) CreateRepresentationRequestOverGsn(opts *bind.TransactOpts, _rtoken common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "createRepresentationRequest", _rtoken)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalSession) CreateRepresentationRequest(_rtoken common.Address) (*types.Transaction, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}
func (_Portal *PortalSession) CreateRepresentationRequestOverGsn(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactorSession) CreateRepresentationRequest(_rtoken common.Address) (*types.Transaction, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}
func (_Portal *PortalTransactorSession) CreateRepresentationRequestOverGsn(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnburnRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalTransactor) EmergencyUnburnRequestOverGsn(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalSession) EmergencyUnburnRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestOverGsn(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestOverGsn(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xfbe44d18.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId, (bytes32,bytes32,bytes32,bytes) _signedMessage) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequestToSolana(opts *bind.TransactOpts, _txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnburnRequestToSolana", _txID, _pubkeys, _chainId, _signedMessage)
}
func (_Portal *PortalTransactor) EmergencyUnburnRequestToSolanaOverGsn(opts *bind.TransactOpts, _txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequestToSolana", _txID, _pubkeys, _chainId, _signedMessage)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xfbe44d18.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId, (bytes32,bytes32,bytes32,bytes) _signedMessage) returns()
func (_Portal *PortalSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId, _signedMessage)
}
func (_Portal *PortalSession) EmergencyUnburnRequestToSolanaOverGsn(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolanaOverGsn(&_Portal.TransactOpts, _txID, _pubkeys, _chainId, _signedMessage)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xfbe44d18.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId, (bytes32,bytes32,bytes32,bytes) _signedMessage) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId, _signedMessage)
}
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestToSolanaOverGsn(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int, _signedMessage SolanaSerializeSolanaSignedMessage) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolanaOverGsn(&_Portal.TransactOpts, _txID, _pubkeys, _chainId, _signedMessage)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactor) EmergencyUnsynthesize(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnsynthesize", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalTransactor) EmergencyUnsynthesizeOverGsn(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnsynthesize", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalSession) EmergencyUnsynthesize(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalSession) EmergencyUnsynthesizeOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactorSession) EmergencyUnsynthesize(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalTransactorSession) EmergencyUnsynthesizeOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x2ae3ff5f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder, uint256 _thisChainId) returns()
func (_Portal *PortalTransactor) InitializeFunc(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "initializeFunc", _bridge, _trustedForwarder, _thisChainId)
}
func (_Portal *PortalTransactor) InitializeFuncOverGsn(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "initializeFunc", _bridge, _trustedForwarder, _thisChainId)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x2ae3ff5f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder, uint256 _thisChainId) returns()
func (_Portal *PortalSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder, _thisChainId)
}
func (_Portal *PortalSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.InitializeFuncOverGsn(&_Portal.TransactOpts, _bridge, _trustedForwarder, _thisChainId)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x2ae3ff5f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder, uint256 _thisChainId) returns()
func (_Portal *PortalTransactorSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder, _thisChainId)
}
func (_Portal *PortalTransactorSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address, _thisChainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.InitializeFuncOverGsn(&_Portal.TransactOpts, _bridge, _trustedForwarder, _thisChainId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "renounceOwnership")
}
func (_Portal *PortalTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalSession) RenounceOwnership() (*types.Transaction, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}
func (_Portal *PortalSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnershipOverGsn(&_Portal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}
func (_Portal *PortalTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnershipOverGsn(&_Portal.TransactOpts)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_Portal *PortalTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}
func (_Portal *PortalSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarderOverGsn(&_Portal.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}
func (_Portal *PortalTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarderOverGsn(&_Portal.TransactOpts, _forwarder)
}

// Synthesize is a paid mutator transaction binding the contract method 0xf55090da.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalTransactor) Synthesize(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "synthesize", _token, _amount, _from, _to, _synthParams)
}
func (_Portal *PortalTransactor) SynthesizeOverGsn(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesize", _token, _amount, _from, _to, _synthParams)
}

// Synthesize is a paid mutator transaction binding the contract method 0xf55090da.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalSession) Synthesize(_token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _from, _to, _synthParams)
}
func (_Portal *PortalSession) SynthesizeOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return _Portal.Contract.SynthesizeOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _to, _synthParams)
}

// Synthesize is a paid mutator transaction binding the contract method 0xf55090da.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) Synthesize(_token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _from, _to, _synthParams)
}
func (_Portal *PortalTransactorSession) SynthesizeOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _to common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return _Portal.Contract.SynthesizeOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _to, _synthParams)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactor) SynthesizeToSolana(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "synthesizeToSolana", _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalTransactor) SynthesizeToSolanaOverGsn(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesizeToSolana", _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalSession) SynthesizeToSolanaOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolanaOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalTransactorSession) SynthesizeToSolanaOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolanaOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_Portal *PortalTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}
func (_Portal *PortalSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnershipOverGsn(&_Portal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}
func (_Portal *PortalTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnershipOverGsn(&_Portal.TransactOpts, newOwner)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactor) Unsynthesize(opts *bind.TransactOpts, _txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "unsynthesize", _txID, _token, _amount, _to)
}
func (_Portal *PortalTransactor) UnsynthesizeOverGsn(opts *bind.TransactOpts, _txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "unsynthesize", _txID, _token, _amount, _to)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}
func (_Portal *PortalSession) UnsynthesizeOverGsn(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.UnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactorSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}
func (_Portal *PortalTransactorSession) UnsynthesizeOverGsn(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.UnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// PortalApprovedRepresentationRequestIterator is returned from FilterApprovedRepresentationRequest and is used to iterate over the raw logs and unpacked data for ApprovedRepresentationRequest events raised by the Portal contract.
type PortalApprovedRepresentationRequestIterator struct {
	Event *PortalApprovedRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalApprovedRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalApprovedRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalApprovedRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalApprovedRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalApprovedRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalApprovedRepresentationRequest represents a ApprovedRepresentationRequest event raised by the Portal contract.
type PortalApprovedRepresentationRequest struct {
	Rtoken [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterApprovedRepresentationRequest is a free log retrieval operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) FilterApprovedRepresentationRequest(opts *bind.FilterOpts, rtoken [][32]byte) (*PortalApprovedRepresentationRequestIterator, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "ApprovedRepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalApprovedRepresentationRequestIterator{contract: _Portal.contract, event: "ApprovedRepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchApprovedRepresentationRequest is a free log subscription operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) WatchApprovedRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalApprovedRepresentationRequest, rtoken [][32]byte) (event.Subscription, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "ApprovedRepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalApprovedRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovedRepresentationRequest is a log parse operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) ParseApprovedRepresentationRequest(log types.Log) (*PortalApprovedRepresentationRequest, error) {
	event := new(PortalApprovedRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalBurnCompletedIterator is returned from FilterBurnCompleted and is used to iterate over the raw logs and unpacked data for BurnCompleted events raised by the Portal contract.
type PortalBurnCompletedIterator struct {
	Event *PortalBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalBurnCompleted represents a BurnCompleted event raised by the Portal contract.
type PortalBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnCompleted is a free log retrieval operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterBurnCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalBurnCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "BurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalBurnCompletedIterator{contract: _Portal.contract, event: "BurnCompleted", logs: logs, sub: sub}, nil
}

// WatchBurnCompleted is a free log subscription operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchBurnCompleted(opts *bind.WatchOpts, sink chan<- *PortalBurnCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "BurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalBurnCompleted)
				if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnCompleted is a log parse operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseBurnCompleted(log types.Log) (*PortalBurnCompleted, error) {
	event := new(PortalBurnCompleted)
	if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Portal contract.
type PortalOwnershipTransferredIterator struct {
	Event *PortalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalOwnershipTransferred represents a OwnershipTransferred event raised by the Portal contract.
type PortalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PortalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PortalOwnershipTransferredIterator{contract: _Portal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PortalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalOwnershipTransferred)
				if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) ParseOwnershipTransferred(log types.Log) (*PortalOwnershipTransferred, error) {
	event := new(PortalOwnershipTransferred)
	if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRepresentationRequestIterator is returned from FilterRepresentationRequest and is used to iterate over the raw logs and unpacked data for RepresentationRequest events raised by the Portal contract.
type PortalRepresentationRequestIterator struct {
	Event *PortalRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRepresentationRequest represents a RepresentationRequest event raised by the Portal contract.
type PortalRepresentationRequest struct {
	Rtoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRepresentationRequest is a free log retrieval operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) FilterRepresentationRequest(opts *bind.FilterOpts, rtoken []common.Address) (*PortalRepresentationRequestIterator, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalRepresentationRequestIterator{contract: _Portal.contract, event: "RepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchRepresentationRequest is a free log subscription operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) WatchRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalRepresentationRequest, rtoken []common.Address) (event.Subscription, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepresentationRequest is a log parse operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) ParseRepresentationRequest(log types.Log) (*PortalRepresentationRequest, error) {
	event := new(PortalRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertBurnRequestIterator is returned from FilterRevertBurnRequest and is used to iterate over the raw logs and unpacked data for RevertBurnRequest events raised by the Portal contract.
type PortalRevertBurnRequestIterator struct {
	Event *PortalRevertBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertBurnRequest represents a RevertBurnRequest event raised by the Portal contract.
type PortalRevertBurnRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnRequest is a free log retrieval operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) FilterRevertBurnRequest(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalRevertBurnRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertBurnRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertBurnRequestIterator{contract: _Portal.contract, event: "RevertBurnRequest", logs: logs, sub: sub}, nil
}

// WatchRevertBurnRequest is a free log subscription operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) WatchRevertBurnRequest(opts *bind.WatchOpts, sink chan<- *PortalRevertBurnRequest, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertBurnRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertBurnRequest)
				if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnRequest is a log parse operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) ParseRevertBurnRequest(log types.Log) (*PortalRevertBurnRequest, error) {
	event := new(PortalRevertBurnRequest)
	if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertSynthesizeCompletedIterator is returned from FilterRevertSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for RevertSynthesizeCompleted events raised by the Portal contract.
type PortalRevertSynthesizeCompletedIterator struct {
	Event *PortalRevertSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertSynthesizeCompleted represents a RevertSynthesizeCompleted event raised by the Portal contract.
type PortalRevertSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeCompleted is a free log retrieval operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterRevertSynthesizeCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalRevertSynthesizeCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertSynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertSynthesizeCompletedIterator{contract: _Portal.contract, event: "RevertSynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeCompleted is a free log subscription operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchRevertSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *PortalRevertSynthesizeCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertSynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertSynthesizeCompleted)
				if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeCompleted is a log parse operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseRevertSynthesizeCompleted(log types.Log) (*PortalRevertSynthesizeCompleted, error) {
	event := new(PortalRevertSynthesizeCompleted)
	if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestIterator is returned from FilterSynthesizeRequest and is used to iterate over the raw logs and unpacked data for SynthesizeRequest events raised by the Portal contract.
type PortalSynthesizeRequestIterator struct {
	Event *PortalSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequest represents a SynthesizeRequest event raised by the Portal contract.
type PortalSynthesizeRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequest is a free log retrieval operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterSynthesizeRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to []common.Address) (*PortalSynthesizeRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestIterator{contract: _Portal.contract, event: "SynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequest is a free log subscription operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequest, id [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequest)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequest is a log parse operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseSynthesizeRequest(log types.Log) (*PortalSynthesizeRequest, error) {
	event := new(PortalSynthesizeRequest)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestSolanaIterator is returned from FilterSynthesizeRequestSolana and is used to iterate over the raw logs and unpacked data for SynthesizeRequestSolana events raised by the Portal contract.
type PortalSynthesizeRequestSolanaIterator struct {
	Event *PortalSynthesizeRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequestSolana represents a SynthesizeRequestSolana event raised by the Portal contract.
type PortalSynthesizeRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequestSolana is a free log retrieval operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterSynthesizeRequestSolana(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to [][32]byte) (*PortalSynthesizeRequestSolanaIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestSolanaIterator{contract: _Portal.contract, event: "SynthesizeRequestSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequestSolana is a free log subscription operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchSynthesizeRequestSolana(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequestSolana, id [][32]byte, from []common.Address, to [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequestSolana)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequestSolana is a log parse operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseSynthesizeRequestSolana(log types.Log) (*PortalSynthesizeRequestSolana, error) {
	event := new(PortalSynthesizeRequestSolana)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
