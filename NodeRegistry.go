// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NodeRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodeRegistryNode struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}

// NodeRegistryABI is the input ABI used to generate the binding from.
const NodeRegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"CreatedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"name\":\"NewSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EYWA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_listNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkPermissionTrustList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"_node\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLSPubKeys\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshot\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hostIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EYWA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nodeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_reqId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sel\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeFrom\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_newEpochParticipantsNum\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_newEpochNum\",\"type\":\"uint32\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// NodeRegistryBin is the compiled bytecode used for deploying new contracts.
var NodeRegistryBin = "$e8b888148fe85a76067767bf6ce2a23c03$__9063cfcae1a59060c401602060405180830381865af415801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a0919061447e565b600b549091506000906001600160a01b03166370a082316114bf611dc0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611527919061449b565b9050670de0b6b3a76400008110156115765760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015260640161060c565b600b546001600160a01b031663d505accf61158f611dc0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064810189905260ff8816608482015260a4810187905260c4810186905260e401600060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b5050505061163261161e611dc0565b600b546001600160a01b0316908484612706565b6001600160a01b038216602088015261164a87612766565b50505050505050565b806116925760405162461bcd60e51b815260206004820152600f60248201526e4e554c4c204144445245535320544f60881b604482015260640161060c565b826116d35760405162461bcd60e51b81526020600482015260116024820152704e554c4c20414444524553532046524f4d60781b604482015260640161060c565b6000928352600260209081526040808520938552928152828420918452529020805460ff19166001179055565b6060600061170e600c6122db565b6001600160401b0381111561172557611725613910565b60405190808252806020026020018201604052801561175e57816020015b61174b61362d565b8152602001906001900390816117435790505b50905060005b61176e600c6122db565b811015610aec57600e6000611784600c846122eb565b6001600160a01b0390811682526020808301939093526040918201600020825160a0810184528154831681526001820154909216938201939093526002830180549193928401916117d490614228565b80601f016020809104026020016040519081016040528092919081815260200182805461180090614228565b801561184d5780601f106118225761010080835404028352916020019161184d565b820191906000526020600020905b81548152906001019060200180831161183057829003601f168201915b5050505050815260200160038201805461186690614228565b80601f016020809104026020016040519081016040528092919081815260200182805461189290614228565b80156118df5780601f106118b4576101008083540402835291602001916118df565b820191906000526020600020905b8154815290600101906020018083116118c257829003601f168201915b505050505081526020016004820154815250508282815181106119045761190461429e565b6020026020010181905250808061191a906142ca565b915050611764565b600a546001600160a01b031615806119545750600a546001600160a01b0316611949611dc0565b6001600160a01b0316145b61198b5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b604482015260640161060c565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6006541515806119f8575060075415155b611a345760405162461bcd60e51b815260206004820152600d60248201526c195c1bd8da081b9bdd081cd95d609a1b604482015260640161060c565b600a54600390611a4f90600160a01b900460ff16600261435b565b611a599190614390565b611a62826124d5565b1015611aaa5760405162461bcd60e51b81526020600482015260176024820152766e6f7420656e6f756768207061727469636970616e747360481b604482015260640161060c565b600a5460ff600160a01b909104166101001480611ad65750600a546001600160a01b90910460ff161b81105b611b145760405162461bcd60e51b815260206004820152600f60248201526e6269746d61736b20746f6f2062696760881b604482015260640161060c565b6000611b5586868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122fe92505050565b90506000611b9885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061241c92505050565b600a54604051919250600091611bc6918e918e918e918e91600160a81b900463ffffffff16906020016144b4565b60408051808303601f1901815260808301808352909350611c4d92916006918391820190839060029082845b815481526020019060010190808311611bf257505050918352505060408051808201918290526020909201919060028481019182845b815481526020019060010190808311611c285750505050508152505084838588612504565b611c8d5760405162461bcd60e51b81526020600482015260116024820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b604482015260640161060c565b6000611ce28c6040518060400160405280601781526020017f72656365697665526571756573745632206661696c65640000000000000000008152508d6001600160a01b03166129d99092919063ffffffff16565b9050805160001480611d03575080806020019051810190611d039190614512565b611d685760405162461bcd60e51b815260206004820152603060248201527f726563656976655265717565737456323a20556e61626c6520746f206465636f60448201526f64652072657275726e6564206461746160801b606482015260840161060c565b604080518e81526001600160a01b038d1660208201529081018b90527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f29060600160405180910390a150505050505050505050505050565b600060143610801590611ddd57506004546001600160a01b031633145b15611def575060131936013560601c90565b503390565b6001600160a01b038216600090815260016020526040812080548392909190611e1c836142ca565b91905055146113ef5760405162461bcd60e51b815260206004820152600e60248201526d0dcdedcc6ca40dad2e6dac2e8c6d60931b604482015260640161060c565b600a546001600160a01b0316611e72611dc0565b6001600160a01b031614611eb35760405162461bcd60e51b81526020600482015260086024820152674f6e6c792044414f60c01b604482015260640161060c565b60006006604051602001611ec79190614280565b60405160208183030381529060405290508115611fbe57600a8054600160a81b900463ffffffff16906015611efb8361452f565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611f2261371f565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa925898282604051602001611f55919061440e565b60408051808303601f1901815290829052600a54611f849392600191600160a81b900463ffffffff169061443a565b60405180910390a180518190600690611fa0908290600261366e565b506020820151611fb6906002808401919061366e565b505050505050565b600a546040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589916120049184918291600191600160a81b900463ffffffff169061443a565b60405180910390a15050565b6000601081815590612023601182613744565b612031600283016000613762565b5050600061203f600c6122db565b6001600160401b0381111561205657612056613910565b60405190808252806020026020018201604052801561207f578160200160208202803683370190505b50905060005b61208f600c6122db565b8110156120c657808282815181106120a9576120a961429e565b6020908102919091010152806120be816142ca565b915050612085565b5060006120d4600143614553565b40905060006120e3600c6122db565b905060328111156120f2575060325b60005b8181101561227c5782675851f42d4c957f2d026714057b7ef767814f019250600081612121600c6122db565b61212b9190614553565b612135908561456a565b61213f908361457e565b90506000600e600061217488858151811061215c5761215c61429e565b6020026020010151600c6122eb90919063ffffffff16565b6001600160a01b03168152602081019190915260400160009081206011805460018101825592526003810180549193507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890920191906121d390614228565b6121de929190613780565b50601280546001810182556000919091526002820180547fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34449092019161222390614228565b61222e929190613780565b508583815181106122415761224161429e565b602002602001015186838151811061225b5761225b61429e565b60200260200101818152505050508080612274906142ca565b9150506120f5565b50600a5461229890600160a81b900463ffffffff166001614333565b63ffffffff1660108190556040519081527f5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c61989060200160405180910390a1505050565b60006122e5825490565b92915050565b60006122f783836129f0565b9392505050565b61230661371f565b60408051600480825260a082019092526000916020820160808036833701905050905060205b815161233990602061435b565b811161235957838101518282015261235260208261457e565b905061232c565b508060008151811061236d5761236d61429e565b60209081029190910101518251528051819060019081106123905761239061429e565b60209081029190910101518251600160200201528051819060029081106123b9576123b961429e565b602002602001015182602001516000600281106123d8576123d861429e565b60200201528051819060039081106123f2576123f261429e565b602002602001015182602001516001600281106124115761241161429e565b602002015250919050565b6040805180820182526000808252602082018190528251600280825260608201909452919290919081602001602082028036833701905050905060205b815161246690602061435b565b811161248657838101518282015261247f60208261457e565b9050612459565b508060008151811061249a5761249a61429e565b6020026020010151826000018181525050806001815181106124be576124be61429e565b602002602001015182602001818152505050919050565b60005b81156124ff576124e9600183614553565b90911690806124f7816142ca565b9150506124d8565b919050565b60408051808201909152600080825260208201819052908160015b841561258e5784811615612579576125378186614553565b9450612576836125718b600001518c602001518660405160200161255d93929190614596565b604051602081830303815290604052612a76565b612b39565b92505b60011b81612586816142ca565b92505061251f565b60408051600380825260808201909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816125a65750506040805160038082526080820190925291925060009190602082015b6125f061371f565b8152602001906001900390816125e857905050905061260e88612bd1565b826000815181106126215761262161429e565b602002602001018190525061264c8b600001518c602001518b60405160200161255d939291906145be565b8260018151811061265f5761265f61429e565b6020026020010181905250848260028151811061267e5761267e61429e565b6020026020010181905250612691612c5f565b816000815181106126a4576126a461429e565b602002602001018190525089816001815181106126c3576126c361429e565b60200260200101819052508a816002815181106126e2576126e261429e565b60200260200101819052506126f78282612d1f565b9b9a5050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612760908590613074565b50505050565b80516001600160a01b038082166000908152600e60209081526040918290205491519190921615916127b29101726e6f646520616c72656164792065786973747360681b815260130190565b604051602081830303815290604052906127df5760405162461bcd60e51b815260040161060c9190613bab565b506127e8611dc0565b6001600160a01b031682600001516001600160a01b0316146040518060400160405280600c81526020016b5a45524f5f4144445245535360a01b815250906128435760405162461bcd60e51b815260040161060c9190613bab565b50604080830151518151808301909252600c82526b5a45524f5f4144445245535360a01b60208301526128895760405162461bcd60e51b815260040161060c9190613bab565b50612894600c6122db565b608083015281516040808401519051600f916128af916145f9565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905581516128ec90600c90613146565b5081516001600160a01b039081166000908152600e6020908152604091829020855181549085166001600160a01b031991821617825582870151600183018054919096169116179093559084015180518593926129509260028501929101906136ac565b506060820151805161296c9160038401916020909101906136ac565b506080820151816004015590505081600001516001600160a01b03167f25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c6683602001518460400151856060015186608001516040516129cd9493929190614615565b60405180910390a25050565b60606129e8848460008561315b565b949350505050565b81546000908210612a4e5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161060c565b826000018281548110612a6357612a6361429e565b9060005260206000200154905092915050565b60408051808201909152600080825260208201526000600283604051612a9c91906145f9565b602060405180830381855afa158015612ab9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612adc919061449b565b90506000612af860008051602061474e8339815191528361456a565b905060005b612b0682613283565b90508015612b27576040805180820190915291825260208201529392505050565b612b3260018361457e565b9150612afd565b6040805180820190915260008082526020820152612b556137fb565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa905080612bc95760405162461bcd60e51b8152602060048201526011602482015270105919081c1bda5b9d1cc819985a5b1959607a1b604482015260640161060c565b505092915050565b6040805180820190915260008082526020820152612bee826132bf565b15612c0c575050604080518082019091526000808252602082015290565b60405180604001604052808360000151815260200160008051602061474e8339815191528460200151612c3f919061456a565b612c579060008051602061474e833981519152614553565b905292915050565b612c6761371f565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b60008151835114612d6a5760405162461bcd60e51b81526020600482015260156024820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b604482015260640161060c565b82516000612d7982600661435b565b90506000816001600160401b03811115612d9557612d95613910565b604051908082528060200260200182016040528015612dbe578160200160208202803683370190505b50905060005b83811015612ff957868181518110612dde57612dde61429e565b60200260200101516000015182826006612df8919061435b565b612e0390600061457e565b81518110612e1357612e1361429e565b602002602001018181525050868181518110612e3157612e3161429e565b60200260200101516020015182826006612e4b919061435b565b612e5690600161457e565b81518110612e6657612e6661429e565b602002602001018181525050858181518110612e8457612e8461429e565b6020908102919091010151515182612e9d83600661435b565b612ea890600261457e565b81518110612eb857612eb861429e565b602002602001018181525050858181518110612ed657612ed661429e565b60209081029190910181015151015182612ef183600661435b565b612efc90600361457e565b81518110612f0c57612f0c61429e565b602002602001018181525050858181518110612f2a57612f2a61429e565b602002602001015160200151600060028110612f4857612f4861429e565b602002015182612f5983600661435b565b612f6490600461457e565b81518110612f7457612f7461429e565b602002602001018181525050858181518110612f9257612f9261429e565b602002602001015160200151600160028110612fb057612fb061429e565b602002015182612fc183600661435b565b612fcc90600561457e565b81518110612fdc57612fdc61429e565b602090810291909101015280612ff1816142ca565b915050612dc4565b50613002613819565b6000602082602086026020860160086107d05a03fa9050806130665760405162461bcd60e51b815260206004820152601960248201527f50616972696e67206f7065726174696f6e206661696c65642e00000000000000604482015260640161060c565b505115159695505050505050565b60006130c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129d99092919063ffffffff16565b805190915015610bd057808060200190518101906130e79190614512565b610bd05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060c565b60006122f7836001600160a01b0384166132d5565b6060824710156131bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060c565b843b61320a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060c565b600080866001600160a01b0316858760405161322691906145f9565b60006040518083038185875af1925050503d8060008114613263576040519150601f19603f3d011682016040523d82523d6000602084013e613268565b606091505b5091509150613278828286613324565b979650505050505050565b60006122e560008051602061474e833981519152806132a48560038361335d565b6132af90600361457e565b6132b9919061456a565b906133a8565b80516000901580156122e5575050602001511590565b600081815260018301602052604081205461331c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556122e5565b5060006122e5565b606083156133335750816122f7565b8251156133435782518084602001fd5b8160405162461bcd60e51b815260040161060c9190613bab565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa61339e57600080fd5b5051949350505050565b60006133b48383613589565b6001146133c3575060006122e5565b826133d0575060006122e5565b6133db60048361456a565b6003141561340b576134048360046133f485600161457e565b6133fe9190614390565b8461335d565b90506122e5565b6000613418600184614553565b905060005b61342860028361456a565b61344b57613437600283614390565b915061344481600161457e565b905061341d565b60025b6134588186613589565b600019146134725761346b81600161457e565b905061344e565b600061349587600261348587600161457e565b61348f9190614390565b8861335d565b905060006134a488868961335d565b905060006134b384878a61335d565b905084600080845b5060009050845b838210156134f85780600114156134d8576134f8565b6134e48160028e61335d565b9050816134f0816142ca565b9250506134c2565b8161350f57869a50505050505050505050506122e5565b61353a85600161351f8588614553565b6135299190614553565b613534906002614741565b8e61335d565b92508b613547848061435b565b613551919061456a565b94508b61355e848961435b565b613568919061456a565b96508b613575868861435b565b61357f919061456a565b95508193506134bb565b6000806135ad84600261359d600187614553565b6135a79190614390565b8561335d565b90508015806135bc5750806001145b156135c85790506122e5565b6135d3600184614553565b8114156135e5576000199150506122e5565b60405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e000000604482015260640161060c565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b826002810192821561369c579160200282015b8281111561369c578251825591602001919060010190613681565b506136a8929150613837565b5090565b8280546136b890614228565b90600052602060002090601f0160209004810192826136da576000855561369c565b82601f106136f357805160ff191683800117855561369c565b8280016001018555821561369c579182018281111561369c578251825591602001919060010190613681565b604051806040016040528061373261384c565b815260200161373f61384c565b905290565b50805460008255906000526020600020908101906108b5919061386a565b50805460008255906000526020600020908101906108b59190613887565b82805461378c90614228565b90600052602060002090601f0160209004810192826137ae576000855561369c565b82601f106137bf578054855561369c565b8280016001018555821561369c57600052602060002091601f016020900482015b8281111561369c5782548255916001019190600101906137e0565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b808211156136a85760008155600101613838565b60405180604001604052806002906020820280368337509192915050565b808211156136a857600061387e82826138a4565b5060010161386a565b808211156136a857600061389b82826138a4565b50600101613887565b5080546138b090614228565b6000825580601f106138c0575050565b601f0160209004906000526020600020908101906108b59190613837565b6001600160a01b03811681146108b557600080fd5b60006020828403121561390557600080fd5b81356122f7816138de565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561394857613948613910565b60405290565b600082601f83011261395f57600080fd5b81356001600160401b038082111561397957613979613910565b604051601f8301601f19908116603f011681019082821181831017156139a1576139a1613910565b816040528381528660208588010111156139ba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156139f557600080fd5b87356001600160401b03811115613a0b57600080fd5b613a178a828b0161394e565b9750506020880135955060408801359450606088013593506080880135925060a0880135613a44816138de565b8092505060c0880135905092959891949750929550565b600080600080600080600060e0888a031215613a7657600080fd5b87356001600160401b03811115613a8c57600080fd5b613a988a828b0161394e565b9750506020880135613aa9816138de565b95506040880135613ab9816138de565b9450606088013593506080880135925060a0880135613a44816138de565b60005b83811015613af2578181015183820152602001613ada565b838111156127605750506000910152565b60008151808452613b1b816020860160208601613ad7565b601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090613b5b90830186613b03565b8281036060840152613b6d8186613b03565b9150508260808301529695505050505050565b80151581146108b557600080fd5b600060208284031215613ba057600080fd5b81356122f781613b80565b6020815260006122f76020830184613b03565b600080600080600060a08688031215613bd657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b606081526000613c0c6060830186613b03565b905060ff8416602083015263ffffffff83166040830152949350505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613c73578284038952613c61848351613b03565b98850198935090840190600101613c49565b5091979650505050505050565b6020815260006122f76020830184613c2b565b60008060408385031215613ca657600080fd5b8235613cb1816138de565b91506020830135613cc1816138de565b809150509250929050565b606081526000613cdf6060830186613c2b565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015613d2f57601f19878403018552613d1d838351613b03565b94860194925090850190600101613d01565b50508095505050505050826040830152949350505050565b600060018060a01b0380835116845280602084015116602085015250604082015160a06040850152613d7c60a0850182613b03565b905060608301518482036060860152613d958282613b03565b915050608083015160808501528091505092915050565b6020815260006122f76020830184613d47565b600060208284031215613dd157600080fd5b81356001600160401b03811115613de757600080fd5b6129e88482850161394e565b60008083601f840112613e0557600080fd5b5081356001600160401b03811115613e1c57600080fd5b602083019150836020828501011115613e3457600080fd5b9250929050565b803560ff811681146124ff57600080fd5b600080600080600080600080600060c08a8c031215613e6a57600080fd5b89356001600160401b0380821115613e8157600080fd5b613e8d8d838e01613df3565b909b50995060208c0135915080821115613ea657600080fd5b613eb28d838e01613df3565b909950975060408c0135915080821115613ecb57600080fd5b50613ed88c828d01613df3565b90965094505060608a01359250613ef160808b01613e3b565b915060a08a013563ffffffff81168114613f0a57600080fd5b809150509295985092959850929598565b600080600080600060a08688031215613f3357600080fd5b85356001600160401b0380821115613f4a57600080fd5b9087019060a0828a031215613f5e57600080fd5b613f66613926565b8235613f71816138de565b81526020830135613f81816138de565b6020820152604083013582811115613f9857600080fd5b613fa48b82860161394e565b604083015250606083013582811115613fbc57600080fd5b613fc88b82860161394e565b6060830152506080830135608082015280975050505060208601359350613ff160408701613e3b565b94979396509394606081013594506080013592915050565b60008060006060848603121561401e57600080fd5b505081359360208301359350604090920135919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561408a57603f19888603018452614078858351613d47565b9450928501929085019060010161405c565b5092979650505050505050565b600080600080600080600080600060e08a8c0312156140b557600080fd5b8935985060208a01356001600160401b03808211156140d357600080fd5b6140df8d838e0161394e565b995060408c013591506140f1826138de565b90975060608b0135965060808b0135908082111561410e57600080fd5b61411a8d838e01613df3565b909750955060a08c013591508082111561413357600080fd5b506141408c828d01613df3565b9a9d999c50979a9699959894979660c00135949350505050565b60c08152600061418460c08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b87602084015286604084015282810360608401526141a28187613b03565b6080840195909552505060a001529392505050565b60e0815260006141e160e08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b6001600160a01b03898116602085015260408401899052838203606085015261420a8289613b03565b96811660808501529490941660a08301525060c00152509392505050565b600181811c9082168061423c57607f821691505b60208210811415610aec57634e487b7160e01b600052602260045260246000fd5b8060005b6002811015612760578154845260209093019260019182019101614261565b6080810161428e828461425d565b6122e5604083016002850161425d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156142de576142de6142b4565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600063ffffffff808316818516808303821115614352576143526142b4565b01949350505050565b6000816000190483118215151615614375576143756142b4565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261439f5761439f61437a565b500490565b8060005b60028110156127605781518452602093840193909101906001016143a8565b6143d181866143a4565b6143de60408201856143a4565b60f89290921b6001600160f81b031916608083015260e01b6001600160e01b031916608182015260850192915050565b60006080820190506144218284516143a4565b602083015161443360408401826143a4565b5092915050565b60808152600061444d6080830187613b03565b828103602084015261445f8187613b03565b9415156040840152505063ffffffff9190911660609091015292915050565b60006020828403121561449057600080fd5b81516122f7816138de565b6000602082840312156144ad57600080fd5b5051919050565b858152600085516144cc816020850160208a01613ad7565b60609590951b6bffffffffffffffffffffffff191660209290950191820194909452603481019290925260e01b6001600160e01b03191660548201526058019392505050565b60006020828403121561452457600080fd5b81516122f781613b80565b600063ffffffff80831681811415614549576145496142b4565b6001019392505050565b600082821015614565576145656142b4565b500390565b6000826145795761457961437a565b500690565b60008219821115614591576145916142b4565b500190565b6145a081856143a4565b6145ad60408201846143a4565b608081019190915260a00192915050565b6145c881856143a4565b6145d560408201846143a4565b600082516145ea816080850160208701613ad7565b91909101608001949350505050565b6000825161460b818460208701613ad7565b9190910192915050565b6001600160a01b038516815260806020820181905260009061463990830186613b03565b828103604084015261464b8186613b03565b91505082606083015295945050505050565b600181815b8085111561469857816000190482111561467e5761467e6142b4565b8085161561468b57918102915b93841c9390800290614662565b509250929050565b6000826146af575060016122e5565b816146bc575060006122e5565b81600181146146d257600281146146dc576146f8565b60019150506122e5565b60ff8411156146ed576146ed6142b4565b50506001821b6122e5565b5060208310610133831016604e8410600b841016171561471b575081810a6122e5565b614725838361465d565b8060001904821115614739576147396142b4565b029392505050565b60006122f783836146a056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a26469706673582212206a234eab8632ea0a8a8e49177575ed7edb76d16d7360f21730189479c15a8df364736f6c634300080a0033"

// DeployNodeRegistry deploys a new Ethereum contract, binding an instance of NodeRegistry to it.
func DeployNodeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeRegistry, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeRegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NodeRegistry is an auto generated Go binding around an Ethereum contract.
type NodeRegistry struct {
	NodeRegistryCaller     // Read-only binding to the contract
	NodeRegistryTransactor // Write-only binding to the contract
	NodeRegistryFilterer   // Log filterer for contract events
}

// NodeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeRegistrySession struct {
	Contract     *NodeRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeRegistryCallerSession struct {
	Contract *NodeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// NodeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeRegistryTransactorSession struct {
	Contract     *NodeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// NodeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRegistryRaw struct {
	Contract *NodeRegistry // Generic contract binding to access the raw methods on
}

// NodeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeRegistryCallerRaw struct {
	Contract *NodeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// NodeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeRegistryTransactorRaw struct {
	Contract *NodeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeRegistry creates a new instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistry(address common.Address, backend bind.ContractBackend) (*NodeRegistry, error) {
	contract, err := bindNodeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NewNodeRegistryCaller creates a new read-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryCaller(address common.Address, caller bind.ContractCaller) (*NodeRegistryCaller, error) {
	contract, err := bindNodeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCaller{contract: contract}, nil
}

// NewNodeRegistryTransactor creates a new write-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeRegistryTransactor, error) {
	contract, err := bindNodeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryTransactor{contract: contract}, nil
}

// NewNodeRegistryFilterer creates a new log filterer instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeRegistryFilterer, error) {
	contract, err := bindNodeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryFilterer{contract: contract}, nil
}

// bindNodeRegistry binds a generic wrapper to an already deployed contract.
func bindNodeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.NodeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transact(opts, method, params...)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) EYWA(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "EYWA")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistrySession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) MINCOLLATERAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "MIN_COLLATERAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) ListNode(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "_listNode")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_NodeRegistry *NodeRegistrySession) ListNode() (common.Address, error) {
	return _NodeRegistry.Contract.ListNode(&_NodeRegistry.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) ListNode() (common.Address, error) {
	return _NodeRegistry.Contract.ListNode(&_NodeRegistry.CallOpts)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) CheckPermissionTrustList(opts *bind.CallOpts, _owner common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "checkPermissionTrustList", _owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) CheckPermissionTrustList(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _owner)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) CheckPermissionTrustList(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _owner)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistrySession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCallerSession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistrySession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCallerSession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCaller) GetBLSPubKeys(opts *bind.CallOpts) ([][]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getBLSPubKeys")

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistrySession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCallerSession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistrySession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCaller) GetNode(opts *bind.CallOpts, _owner common.Address) (NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNode", _owner)

	if err != nil {
		return *new(NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodeRegistryNode)).(*NodeRegistryNode)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistrySession) GetNode(_owner common.Address) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _owner)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCallerSession) GetNode(_owner common.Address) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _owner)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCaller) GetNodes(opts *bind.CallOpts) ([]NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNodes")

	if err != nil {
		return *new([]NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new([]NodeRegistryNode)).(*[]NodeRegistryNode)

	return out0, err

}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistrySession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCallerSession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCaller) GetSnapshot(opts *bind.CallOpts) ([][]byte, []string, *big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getSnapshot")

	if err != nil {
		return *new([][]byte), *new([]string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistrySession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCaller) HostIds(opts *bind.CallOpts, arg0 string) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "hostIds", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistrySession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) NodeExists(opts *bind.CallOpts, _owner common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "nodeExists", _owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) NodeExists(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _owner)
}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) NodeExists(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _owner)
}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCaller) OwnedNodes(opts *bind.CallOpts, arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "ownedNodes", arg0)

	outstruct := new(struct {
		Owner     common.Address
		Pool      common.Address
		HostId    string
		BlsPubKey []byte
		NodeId    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Pool = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HostId = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.BlsPubKey = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.NodeId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistrySession) OwnedNodes(arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCallerSession) OwnedNodes(arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistryCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistrySession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _NodeRegistry.Contract.PrepareRqId(&_NodeRegistry.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistryCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _NodeRegistry.Contract.PrepareRqId(&_NodeRegistry.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCaller) Snapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "snapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistrySession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCallerSession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistrySession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistrySession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCallerSession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistrySession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayer(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "createRelayer", _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistrySession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize2(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize2", _EYWA, _forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize2(_EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2(_EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "receiveRequestV2", _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2(_reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2(_reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpoch(opts *bind.TransactOpts, _newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "updateEpoch", _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_NodeRegistry *NodeRegistrySession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// NodeRegistryCreatedRelayerIterator is returned from FilterCreatedRelayer and is used to iterate over the raw logs and unpacked data for CreatedRelayer events raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayerIterator struct {
	Event *NodeRegistryCreatedRelayer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryCreatedRelayerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryCreatedRelayer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryCreatedRelayer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryCreatedRelayerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryCreatedRelayerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryCreatedRelayer represents a CreatedRelayer event raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayer struct {
	Owner       common.Address
	RelayerPool common.Address
	HostId      string
	BlsPubKey   []byte
	NodeId      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreatedRelayer is a free log retrieval operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) FilterCreatedRelayer(opts *bind.FilterOpts, owner []common.Address) (*NodeRegistryCreatedRelayerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCreatedRelayerIterator{contract: _NodeRegistry.contract, event: "CreatedRelayer", logs: logs, sub: sub}, nil
}

// WatchCreatedRelayer is a free log subscription operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) WatchCreatedRelayer(opts *bind.WatchOpts, sink chan<- *NodeRegistryCreatedRelayer, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryCreatedRelayer)
				if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRelayer is a log parse operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) ParseCreatedRelayer(log types.Log) (*NodeRegistryCreatedRelayer, error) {
	event := new(NodeRegistryCreatedRelayer)
	if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the NodeRegistry contract.
type NodeRegistryNewEpochIterator struct {
	Event *NodeRegistryNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewEpoch represents a NewEpoch event raised by the NodeRegistry contract.
type NodeRegistryNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*NodeRegistryNewEpochIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewEpochIterator{contract: _NodeRegistry.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewEpoch) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewEpoch)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewEpoch(log types.Log) (*NodeRegistryNewEpoch, error) {
	event := new(NodeRegistryNewEpoch)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewSnapshotIterator is returned from FilterNewSnapshot and is used to iterate over the raw logs and unpacked data for NewSnapshot events raised by the NodeRegistry contract.
type NodeRegistryNewSnapshotIterator struct {
	Event *NodeRegistryNewSnapshot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewSnapshotIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewSnapshot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewSnapshot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewSnapshotIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewSnapshotIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewSnapshot represents a NewSnapshot event raised by the NodeRegistry contract.
type NodeRegistryNewSnapshot struct {
	SnapNum *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSnapshot is a free log retrieval operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewSnapshot(opts *bind.FilterOpts) (*NodeRegistryNewSnapshotIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewSnapshotIterator{contract: _NodeRegistry.contract, event: "NewSnapshot", logs: logs, sub: sub}, nil
}

// WatchNewSnapshot is a free log subscription operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewSnapshot(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewSnapshot) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewSnapshot)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSnapshot is a log parse operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewSnapshot(log types.Log) (*NodeRegistryNewSnapshot, error) {
	event := new(NodeRegistryNewSnapshot)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestIterator struct {
	Event *NodeRegistryOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequest represents a OracleRequest event raised by the NodeRegistry contract.
type NodeRegistryOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*NodeRegistryOracleRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestIterator{contract: _NodeRegistry.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequest(log types.Log) (*NodeRegistryOracleRequest, error) {
	event := new(NodeRegistryOracleRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolanaIterator struct {
	Event *NodeRegistryOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequestSolana represents a OracleRequestSolana event raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*NodeRegistryOracleRequestSolanaIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestSolanaIterator{contract: _NodeRegistry.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequestSolana)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainid)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequestSolana(log types.Log) (*NodeRegistryOracleRequestSolana, error) {
	event := new(NodeRegistryOracleRequestSolana)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferredIterator struct {
	Event *NodeRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferred struct {
	PreviousDao common.Address
	NewDao      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_NodeRegistry *NodeRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousDao []common.Address, newDao []common.Address) (*NodeRegistryOwnershipTransferredIterator, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOwnershipTransferredIterator{contract: _NodeRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_NodeRegistry *NodeRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NodeRegistryOwnershipTransferred, previousDao []common.Address, newDao []common.Address) (event.Subscription, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOwnershipTransferred)
				if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_NodeRegistry *NodeRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*NodeRegistryOwnershipTransferred, error) {
	event := new(NodeRegistryOwnershipTransferred)
	if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the NodeRegistry contract.
type NodeRegistryReceiveRequestIterator struct {
	Event *NodeRegistryReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryReceiveRequest represents a ReceiveRequest event raised by the NodeRegistry contract.
type NodeRegistryReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*NodeRegistryReceiveRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryReceiveRequestIterator{contract: _NodeRegistry.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryReceiveRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) ParseReceiveRequest(log types.Log) (*NodeRegistryReceiveRequest, error) {
	event := new(NodeRegistryReceiveRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
