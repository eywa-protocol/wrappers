// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// NodeRegistryMetaData contains all meta data concerning the NodeRegistry contract.

var NodeRegistryMetaData = &bind.MetaData{

	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"CreatedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"name\":\"NewSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EYWA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"checkPermissionTrustList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"_node\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLSPubKeys\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshot\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hostIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EYWA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"nodeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownedNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqIdFilter\",\"outputs\":[{\"internalType\":\"contractReqIdFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setRelayerPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rand\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615dac80620000216000396000f3fe60806040523480156200001157600080fd5b5060043610620002795760003560e01c80637595ea2b1162000155578063cf9f47d811620000c7578063eee57a381162000086578063eee57a381462000644578063f2a0c8c01462000672578063f2fde38b1462000689578063fa77964814620006a0578063fc358197146200064457600080fd5b8063cf9f47d814620005d2578063da6b6c6a14620005e9578063da74222814620005fd578063e27ad9a51462000614578063e29581aa146200062b57600080fd5b80639c54297c11620001145780639c54297c1462000528578063a29916871462000543578063ab7a87dd146200056d578063bde199e414620005a4578063c4d66de814620005bb57600080fd5b80637595ea2b14620004c95780637da0a87714620004e25780638da5cb5b14620004f45780639013ae0814620005065780639711715a146200051d57600080fd5b806346dec6cb11620001ef578063572b6c0511620001ae578063572b6c051462000440578063579de0751462000465578063715018a6146200048d5780637320660d1462000497578063757991a814620004ae57600080fd5b806346dec6cb14620003bf578063486ff0cd14620003d65780634cd47f3914620003ef5780634f907a69146200040357806350c946fe146200041a57600080fd5b806331b433f9116200023c57806331b433f9146200033b578063329ef45f14620003635780633e7e25c1146200037a5780634162169f14620003975780634219dc4014620003ab57600080fd5b806305e3c05b146200027e5780630c94904314620002b05780630e03e49014620002c9578063135160af14620002f65780632d0335ab146200030f575b600080fd5b606d546200029690600160a81b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b620002ba620006b0565b604051908152602001620002a7565b620002dd620002da36600462004c1e565b90565b6040516001600160a01b039091168152602001620002a7565b6200030d6200030736600462004c7c565b620006db565b005b620002ba6200032036600462004d6a565b6001600160a01b031660009081526020819052604090205490565b620003526200034c36600462004d8a565b62000a2e565b6040519015158152602001620002a7565b620003526200037436600462004e16565b62000b20565b620002ba6200038b36600462004d6a565b6001600160a01b031690565b606d54620002dd906001600160a01b031681565b607054620002dd906001600160a01b031681565b6200030d620003d036600462004eaf565b62000c28565b620003e062000c5a565b604051620002a7919062004f2c565b606f54620002dd906001600160a01b031681565b6200030d6200041436600462004c7c565b62000cf0565b620004316200042b36600462004c1e565b6200101e565b604051620002a7919062004faa565b620003526200045136600462004d6a565b6067546001600160a01b0391821691161490565b606d546200047a90600160a01b900460ff1681565b60405160ff9091168152602001620002a7565b6200030d620011aa565b6200030d620004a836600462004d6a565b62001207565b620004b862001278565b604051620002a79392919062004fbf565b620004d3620012c6565b604051620002a7919062005049565b6067546001600160a01b0316620002dd565b6035546001600160a01b0316620002dd565b6200030d6200051736600462004d6a565b6200142e565b607554620002ba9081565b620005326200149f565b604051620002a7939291906200505e565b6200055a6200055436600462004c1e565b62001679565b604051620002a7959493929190620050df565b620002dd6200057e36600462005209565b80516020818301810180516074825292820191909301209152546001600160a01b031681565b6200030d620005b536600462005241565b620017d5565b6200030d620005cc36600462004d6a565b620018da565b6200030d620005e3366004620052a5565b62001a18565b606e54620002dd906001600160a01b031681565b6200030d6200060e36600462004d6a565b62001c8a565b6200030d62000625366004620053a4565b62001ce4565b6200063562001e01565b604051620002a79190620053d1565b620003526200065536600462004c1e565b6000908152607360205260409020546001600160a01b0316151590565b6200030d6200068336600462004d6a565b62002042565b6200030d6200069a36600462004d6a565b62002114565b620002ba670de0b6b3a764000081565b6000620006bc62004931565b438152604051602081818460ff600019fa620006d457fe5b5192915050565b606954151580620006ed5750606a5415155b6200072f5760405162461bcd60e51b815260206004820152600d60248201526c195c1bd8da081b9bdd081cd95d609a1b60448201526064015b60405180910390fd5b6040805160808101808352620007c8928c928c928a928a928a928a928a9291606991839190820190839060029082845b8154815260200190600101908083116200075f57505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116200079657505050919092525050606d54600160a01b900460ff169050620021d5565b60006200081988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200081392508e91508d9050620023c5565b6200241d565b90506000806000806200082c856200256c565b606e54604051632bf85b9160e21b81526004810186905294985092965090945092506001600160a01b03169063afe16e44906024016020604051808303816000875af115801562000881573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a791906200544d565b15620008e55760405162461bcd60e51b815260206004820152600c60248201526b20b63932b0b23c9039b2b2b760a11b604482015260640162000726565b60006200093c826040518060400160405280602081526020017f4272696467653a20726563656976655265717565737456323a206661696c6564815250856001600160a01b0316620025c29092919063ffffffff16565b9050805160001480620009605750808060200190518101906200096091906200544d565b620009d45760405162461bcd60e51b815260206004820152603860248201527f4272696467653a20726563656976655265717565737456323a20756e61626c6560448201527f20746f206465636f64652072657475726e656420646174610000000000000000606482015260840162000726565b604080518681526001600160a01b03851660208201529081018590527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f29060600160405180910390a1505050505050505050505050505050565b600086866001600062000a446200038b620025db565b815260208082019290925260409081016000908120848252835281812085825290925290205460ff16151560011462000ac05760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640162000726565b62000acc858562002611565b7f2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea1330878d8d8c8c60405162000b079695949392919062005496565b60405180910390a15060019a9950505050505050505050565b600086866001600062000b366200038b620025db565b8152602001908152602001600020600062000b57836001600160a01b031690565b8152602001908152602001600020600062000b78846001600160a01b031690565b815260208101919091526040016000205460ff16151560011462000bdf5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640162000726565b62000beb858562002611565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878d8d8d8d8d60405162000b079796959493929190620054f8565b62000c338162002687565b606d54607554600160a81b90910463ffffffff161062000c575762000c5762002802565b50565b6068805462000c69906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462000c97906200556e565b801562000ce85780601f1062000cbc5761010080835404028352916020019162000ce8565b820191906000526020600020905b81548152906001019060200180831162000cca57829003601f168201915b505050505081565b60695415158062000d025750606a5415155b1562000d9a5760408051608081018083526069805493830193845262000d9a938d938d938b938b938b938b938b93919283918390600290606a606086018083116200075f575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116200079657505050919092525050606d54600160a01b900460ff169050620021d5565b600062000de588888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200081392508e91508d9050620023c5565b9050600080600062000df78462002af9565b606d54929550909350915063ffffffff8085169162000e2191600160a81b909104166001620055bb565b63ffffffff161462000e6b5760405162461bcd60e51b81526020600482015260126024820152713bb937b7339032b837b1b410373ab6b132b960711b604482015260640162000726565b600062000e788362002b3a565b8051909150819060699062000e9190829060026200494f565b50602082015162000ea990600280840191906200494f565b5050606d805464ffffffffff60a01b1916600160a01b60ff86160263ffffffff60a81b191617600160a81b63ffffffff88160217905550606e546040805163083197ef60e41b815290516001600160a01b03909216916383197ef09160048082019260009290919082900301818387803b15801562000f2757600080fd5b505af115801562000f3c573d6000803e3d6000fd5b5050505060405162000f4e9062004992565b604051809103906000f08015801562000f6b573d6000803e3d6000fd5b50606e80546001600160a01b0319166001600160a01b03929092169190911790556040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa925899062000fc2906069906020016200560b565b6040516020818303038152906040528260405160200162000fe4919062005652565b60408051601f1981840301815290829052620010069291600090899062005682565b60405180910390a15050505050505050505050505050565b62001028620049a0565b600082815260736020908152604091829020825160a08101845281546001600160a01b03908116825260018301541692810192909252600281018054929391929184019162001077906200556e565b80601f0160208091040260200160405190810160405280929190818152602001828054620010a5906200556e565b8015620010f65780601f10620010ca57610100808354040283529160200191620010f6565b820191906000526020600020905b815481529060010190602001808311620010d857829003601f168201915b5050505050815260200160038201805462001111906200556e565b80601f01602080910402602001604051908101604052809291908181526020018280546200113f906200556e565b8015620011905780601f10620011645761010080835404028352916020019162001190565b820191906000526020600020905b8154815290600101906020018083116200117257829003601f168201915b505050505081526020016004820154815250509050919050565b620011b4620025db565b6001600160a01b0316620011d06035546001600160a01b031690565b6001600160a01b031614620011f95760405162461bcd60e51b81526004016200072690620056ca565b62001205600062002c72565b565b62001211620025db565b6001600160a01b03166200122d6035546001600160a01b031690565b6001600160a01b031614620012565760405162461bcd60e51b81526004016200072690620056ca565b607080546001600160a01b0319166001600160a01b0392909216919091179055565b606060008060696040516020016200129191906200560b565b60408051808303601f19018152919052606d549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b60606000620012d6607162002cc4565b6001600160401b03811115620012f057620012f062005134565b6040519080825280602002602001820160405280156200132557816020015b60608152602001906001900390816200130f5790505b50905060005b62001337607162002cc4565b8110156200142857607360006200135060718462002ccf565b815260200190815260200160002060030180546200136e906200556e565b80601f01602080910402602001604051908101604052809291908181526020018280546200139c906200556e565b8015620013ed5780601f10620013c157610100808354040283529160200191620013ed565b820191906000526020600020905b815481529060010190602001808311620013cf57829003601f168201915b505050505082828151811062001407576200140762005437565b602002602001018190525080806200141f90620056ff565b9150506200132b565b50919050565b62001438620025db565b6001600160a01b0316620014546035546001600160a01b031690565b6001600160a01b0316146200147d5760405162461bcd60e51b81526004016200072690620056ca565b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b60608060006075600101607560020160756000015482805480602002602001604051908101604052809291908181526020016000905b828210156200158b578382906000526020600020018054620014f7906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462001525906200556e565b8015620015765780601f106200154a5761010080835404028352916020019162001576565b820191906000526020600020905b8154815290600101906020018083116200155857829003601f168201915b505050505081526020019060010190620014d5565b50505050925081805480602002602001604051908101604052809291908181526020016000905b8282101562001668578382906000526020600020018054620015d4906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462001602906200556e565b8015620016535780601f10620016275761010080835404028352916020019162001653565b820191906000526020600020905b8154815290600101906020018083116200163557829003601f168201915b505050505081526020019060010190620015b2565b505050509150925092509250909192565b6073602052600090815260409020805460018201546002830180546001600160a01b03938416949290931692620016b0906200556e565b80601f0160208091040260200160405190810160405280929190818152602001828054620016de906200556e565b80156200172f5780601f1062001703576101008083540402835291602001916200172f565b820191906000526020600020905b8154815290600101906020018083116200171157829003601f168201915b50505050509080600301805462001746906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462001774906200556e565b8015620017c55780601f106200179957610100808354040283529160200191620017c5565b820191906000526020600020905b815481529060010190602001808311620017a757829003601f168201915b5050505050908060040154905085565b600254610100900460ff16620017f25760025460ff1615620017f6565b303b155b620018155760405162461bcd60e51b815260040162000726906200571d565b600254610100900460ff1615801562001838576002805461ffff19166101011790555b60408051808201909152600c81526b5a45524f5f4144445245535360a01b60208201526001600160a01b038516620018855760405162461bcd60e51b815260040162000726919062004f2c565b50607080546001600160a01b038085166001600160a01b031992831617909255606f805492871692909116919091179055620018c183620018da565b8015620018d4576002805461ff00191690555b50505050565b600254610100900460ff16620018f75760025460ff1615620018fb565b303b155b6200191a5760405162461bcd60e51b815260040162000726906200571d565b600254610100900460ff161580156200193d576002805461ffff19166101011790555b6200194762002cdd565b6200195162002d07565b60408051808201909152600580825264322e322e3360d81b60209092019182526200197f91606891620049e1565b506200198a620025db565b606d80546001600160a01b0319166001600160a01b0392909216919091179055604051620019b89062004992565b604051809103906000f080158015620019d5573d6000803e3d6000fd5b50606e80546001600160a01b0319166001600160a01b039290921691909117905562001a018262002d45565b801562001a14576002805461ff00191690555b5050565b6070548551606f5460405163cfcae1a560e01b81526001600160a01b0392831660048201819052918316602482018190526044820152606480820152610fa0608482015260a4810191909152600092919091169063cfcae1a59060c4016020604051808303816000875af115801562001a95573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001abb91906200576b565b606f549091506000906001600160a01b03166370a0823162001adc620025db565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562001b21573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b4791906200578b565b9050670de0b6b3a764000081101562001ba35760405162461bcd60e51b815260206004820181905260248201527f4e6f646552656769737472793a20696e73756666696369656e742066756e6473604482015260640162000726565b606f546001600160a01b031663d505accf62001bbe620025db565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064810189905260ff8816608482015260a4810187905260c4810186905260e401600060405180830381600087803b15801562001c2b57600080fd5b505af115801562001c40573d6000803e3d6000fd5b5050505062001c6762001c52620025db565b606f546001600160a01b031690848462002d67565b6001600160a01b038216602088015262001c818762002dc3565b50505050505050565b62001c94620025db565b6001600160a01b031662001cb06035546001600160a01b031690565b6001600160a01b03161462001cd95760405162461bcd60e51b81526004016200072690620056ca565b62000c578162002d45565b62001cee620025db565b6001600160a01b031662001d0a6035546001600160a01b031690565b6001600160a01b03161462001d335760405162461bcd60e51b81526004016200072690620056ca565b8062001d825760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e76616c69642027746f27206164647265737300000000604482015260640162000726565b8262001dd15760405162461bcd60e51b815260206004820152601e60248201527f4272696467653a20696e76616c6964202766726f6d2720616464726573730000604482015260640162000726565b6000928352600160208181526040808620948652938152838520928552919091529120805460ff19169091179055565b6060600062001e11607162002cc4565b6001600160401b0381111562001e2b5762001e2b62005134565b60405190808252806020026020018201604052801562001e6857816020015b62001e54620049a0565b81526020019060019003908162001e4a5790505b50905060005b62001e7a607162002cc4565b81101562001428576073600062001e9360718462002ccf565b81526020808201929092526040908101600020815160a08101835281546001600160a01b03908116825260018301541693810193909352600281018054919284019162001ee0906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462001f0e906200556e565b801562001f5f5780601f1062001f335761010080835404028352916020019162001f5f565b820191906000526020600020905b81548152906001019060200180831162001f4157829003601f168201915b5050505050815260200160038201805462001f7a906200556e565b80601f016020809104026020016040519081016040528092919081815260200182805462001fa8906200556e565b801562001ff95780601f1062001fcd5761010080835404028352916020019162001ff9565b820191906000526020600020905b81548152906001019060200180831162001fdb57829003601f168201915b5050505050815260200160048201548152505082828151811062002021576200202162005437565b602002602001018190525080806200203990620056ff565b91505062001e6e565b606d546001600160a01b03161580620020775750606d546001600160a01b03166200206c620025db565b6001600160a01b0316145b620020b85760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b604482015260640162000726565b606d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6200211e620025db565b6001600160a01b03166200213a6035546001600160a01b031690565b6001600160a01b031614620021635760405162461bcd60e51b81526004016200072690620056ca565b6001600160a01b038116620021ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000726565b62000c578162002c72565b60006200221888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062002b3a92505050565b905060006200225d87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200308092505050565b905060036200227160ff85166002620057a5565b6200227d9190620057dd565b620022888662003145565b11620022d75760405162461bcd60e51b815260206004820152601760248201527f6e6f7420656e6f756768207061727469636970616e7473000000000000000000604482015260640162000726565b8260ff1660ff1480620022ef5750600160ff84161b85105b6200232f5760405162461bcd60e51b815260206004820152600f60248201526e6269746d61736b20746f6f2062696760881b604482015260640162000726565b6200237684838d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792508b91506200317a9050565b620023b85760405162461bcd60e51b81526020600482015260116024820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b604482015260640162000726565b5050505050505050505050565b600062002416620023db606860488587620057f4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620033a892505050565b9392505050565b6060600060606200242f858362003405565b925090506000620024408262003522565b90506000602184885162002455919062005820565b620024619190620057dd565b905060008060005b8381101562002518576200247e8a886200359b565b975091506200248e8a886200365f565b9750925060ff8216620024af57620024a78386620036f6565b945062002503565b8160ff1660011415620024c857620024a78584620036f6565b60405162461bcd60e51b815260206004820152600f60248201526e1b595c9adb19541c9bdd9948195bd9608a1b604482015260640162000726565b806200250f81620056ff565b91505062002469565b508784146200255d5760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19541c9bdd99481c9bdbdd60821b604482015260640162000726565b50929450505050505b92915050565b6000806000606060006200258186826200365f565b90955090506200259286826200365f565b9094509050620025a3868262003779565b9093509050620025b4868262003405565b509496939550919392915050565b6060620025d384846000856200381a565b949350505050565b600060143610801590620025f957506067546001600160a01b031633145b156200260c575060131936013560601c90565b503390565b6001600160a01b0382166000908152602081905260408120805483929091906200263b83620056ff565b919050551462001a145760405162461bcd60e51b8152602060048201526016602482015275084e4d2c8ceca7440dcdedcc6ca40dad2e6dac2e8c6d60531b604482015260640162000726565b606d546001600160a01b03166200269d620025db565b6001600160a01b031614620026e85760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b604482015260640162000726565b60006069604051602001620026fe91906200560b565b6040516020818303038152906040529050811562001a1457606d8054600160a81b900463ffffffff1690601562002735836200583a565b91906101000a81548163ffffffff021916908363ffffffff160217905550506200275e62004a5d565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589828260405160200162002793919062005652565b60408051808303601f1901815290829052606d54620027c49392600191600160a81b900463ffffffff169062005682565b60405180910390a180518190606990620027e290829060026200494f565b506020820151620027fa90600280840191906200494f565b505050505050565b60006075818155906200281760768262004a86565b6200282760028301600062004aa6565b5050600062002837607162002cc4565b6001600160401b0381111562002851576200285162005134565b6040519080825280602002602001820160405280156200287b578160200160208202803683370190505b50905060005b6200288d607162002cc4565b811015620028cb5780828281518110620028ab57620028ab62005437565b602090810291909101015280620028c281620056ff565b91505062002881565b506000620028d8620006b0565b90506000620028e8607162002cc4565b90506032811115620028f8575060325b60005b8181101562002a985782675851f42d4c957f2d026714057b7ef767814f0192506000816200292a607162002cc4565b62002936919062005820565b62002942908562005861565b6200294e908362005878565b9050600060736000620029888885815181106200296f576200296f62005437565b6020026020010151607162002ccf90919063ffffffff16565b8152602081019190915260400160009081206076805460018101825592526003810180549193507fb5732705f5241370a28908c2fe1303cb223f03b90d857fd0573f003f79fefed49092019190620029e0906200556e565b620029ed92919062004ac6565b50607780546001810182556000919091526002820180547f7901cb5addcae2d210a531c604a76a660d77039093bac314de0816a16392aff19092019162002a34906200556e565b62002a4192919062004ac6565b5085838151811062002a575762002a5762005437565b602002602001015186838151811062002a745762002a7462005437565b6020026020010181815250505050808062002a8f90620056ff565b915050620028fb565b50606d5462002ab690600160a81b900463ffffffff166001620055bb565b63ffffffff1660758190556040519081527f5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c61989060200160405180910390a1505050565b60006060818062002b0b85826200394c565b909450905062002b1c85826200359b565b909250905062002b2d858262003405565b5093959394509092915050565b62002b4462004a5d565b60408051600480825260a082019092526000916020820160808036833701905050905060205b815162002b79906020620057a5565b811162002b9d57838101518282015262002b9560208262005878565b905062002b6a565b508060008151811062002bb45762002bb462005437565b602090810291909101015182515280518190600190811062002bda5762002bda62005437565b602090810291909101015182516001602002015280518190600290811062002c065762002c0662005437565b6020026020010151826020015160006002811062002c285762002c2862005437565b602002015280518190600390811062002c455762002c4562005437565b6020026020010151826020015160016002811062002c675762002c6762005437565b602002015250919050565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600062002566825490565b600062002416838362003a28565b600254610100900460ff16620012055760405162461bcd60e51b8152600401620007269062005893565b600254610100900460ff1662002d315760405162461bcd60e51b8152600401620007269062005893565b6200120562002d3f620025db565b62002c72565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052620018d490859062003ab3565b6060810151805160209182012060008181526073835260409081902054905191926001600160a01b0391909116159162002e2b91017f4e6f646552656769737472793a206e6f646520616c72656164792065786973748152607360f81b602082015260210190565b6040516020818303038152906040529062002e5b5760405162461bcd60e51b815260040162000726919062004f2c565b5062002e66620025db565b6001600160a01b031682600001516001600160a01b0316146040518060400160405280600c81526020016b5a45524f5f4144445245535360a01b8152509062002ec45760405162461bcd60e51b815260040162000726919062004f2c565b50604080830151518151808301909252600c82526b5a45524f5f4144445245535360a01b602083015262002f0d5760405162461bcd60e51b815260040162000726919062004f2c565b5062002f1a607162002cc4565b60808301528151604080840151905160749162002f3791620058de565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062002f8a826060015180519060200120607162003b9190919063ffffffff16565b5060608201518051602091820120600090815260738252604090819020845181546001600160a01b039182166001600160a01b031991821617835584870151600184018054919093169116179055908401518051859362002ff3926002850192910190620049e1565b506060820151805162003011916003840191602090910190620049e1565b506080820151816004015590505081600001516001600160a01b03167f25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c668360200151846040015185606001518660800151604051620030749493929190620058fc565b60405180910390a25050565b6040805180820182526000808252602082018190528251600280825260608201909452919290919081602001602082028036833701905050905060205b8151620030cc906020620057a5565b8111620030f0578381015182820152620030e860208262005878565b9050620030bd565b508060008151811062003107576200310762005437565b6020026020010151826000018181525050806001815181106200312e576200312e62005437565b602002602001015182602001818152505050919050565b60005b811562003175576200315c60018362005820565b90911690806200316c81620056ff565b91505062003148565b919050565b60408051808201909152600080825260208201819052908160015b8415620032115784811615620031f957620031b1818662005820565b9450620031f683620031f08b600001518c6020015186604051602001620031db9392919062005948565b60405160208183030381529060405262003b9f565b62003c70565b92505b60011b816200320881620056ff565b92505062003195565b60408051600380825260808201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081620032295750506040805160038082526080820190925291925060009190602082015b6200327662004a5d565b8152602001906001900390816200326c579050509050620032978862003d0c565b82600081518110620032ad57620032ad62005437565b6020026020010181905250620032db8b600001518c602001518b604051602001620031db9392919062005974565b82600181518110620032f157620032f162005437565b6020026020010181905250848260028151811062003313576200331362005437565b60200260200101819052506200332862003da3565b816000815181106200333e576200333e62005437565b6020026020010181905250898160018151811062003360576200336062005437565b60200260200101819052508a8160028151811062003382576200338262005437565b602002602001018190525062003399828262003e65565b9b9a5050505050505050505050565b60008151602014620033fd5760405162461bcd60e51b815260206004820152601760248201527f6279746573206c656e677468206973206e6f742033322e000000000000000000604482015260640162000726565b506020015190565b60606000806200341685856200420c565b86519095509091506200342a828662005878565b1115801562003443575062003440818562005878565b84105b6200349d5760405162461bcd60e51b8152602060048201526024808201527f4e65787456617242797465732c206f66667365742065786365656473206d6178604482015263696d756d60e01b606482015260840162000726565b606081158015620034ba5760405191506020820160405262003506565b6040519150601f8316801560200281840101848101888315602002848c0101015b81831015620034f5578051835260209283019201620034db565b5050848452601f01601f1916604052505b508062003514838762005878565b9350935050505b9250929050565b600060026000836040516020016200353c929190620059b5565b60408051601f19818403018152908290526200355891620058de565b602060405180830381855afa15801562003576573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200256691906200578b565b6000808351836001620035af919062005878565b11158015620035c95750620035c683600162005878565b83105b620036215760405162461bcd60e51b815260206004820152602160248201527f4e65787455696e74382c204f66667365742065786365656473206d6178696d756044820152606d60f81b606482015260840162000726565b6000604051846020870101518060001a82535060018101604052601f8103519150508084600162003653919062005878565b92509250509250929050565b600080835183602062003673919062005878565b111580156200368d57506200368a83602062005878565b83105b620036db5760405162461bcd60e51b815260206004820181905260248201527f4e657874486173682c206f66667365742065786365656473206d6178696d756d604482015260640162000726565b60006020840185015190508084602062003653919062005878565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f19818403018152908290526200373691620058de565b602060405180830381855afa15801562003754573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200241691906200578b565b60008083518360146200378d919062005878565b11158015620037a75750620037a483601462005878565b83105b620038015760405162461bcd60e51b815260206004820152602360248201527f4e657874416464726573732c206f66667365742065786365656473206d6178696044820152626d756d60e81b606482015260840162000726565b83830160200151606081901c6200365385601462005878565b6060824710156200387d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000726565b843b620038cd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000726565b600080866001600160a01b03168587604051620038eb9190620058de565b60006040518083038185875af1925050503d80600081146200392a576040519150601f19603f3d011682016040523d82523d6000602084013e6200392f565b606091505b5091509150620039418282866200437f565b979650505050505050565b600080835183600462003960919062005878565b111580156200397a57506200397783600462005878565b83105b620039d35760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7433322c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840162000726565b600060405160046000600182038760208a0101515b8383101562003a0a5780821a83860153600183019250600182039150620039e8565b505050016040819052601f1901519050806200365385600462005878565b8154600090821062003a885760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840162000726565b82600001828154811062003aa05762003aa062005437565b9060005260206000200154905092915050565b600062003b0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620025c29092919063ffffffff16565b80519091501562003b8c578080602001905181019062003b2b91906200544d565b62003b8c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000726565b505050565b6000620024168383620043bd565b6040805180820190915260008082526020820152600060028360405162003bc79190620058de565b602060405180830381855afa15801562003be5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062003c0a91906200578b565b9050600062003c2960008051602062005d578339815191528362005861565b905060005b62003c39826200440f565b9050801562003c5b576040805180820190915291825260208201529392505050565b62003c6860018362005878565b915062003c2e565b604080518082019091526000808252602082015262003c8e62004b4a565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508062003d045760405162461bcd60e51b8152602060048201526011602482015270105919081c1bda5b9d1cc819985a5b1959607a1b604482015260640162000726565b505092915050565b604080518082019091526000808252602082015262003d2b8262004454565b1562003d4a575050604080518082019091526000808252602082015290565b60405180604001604052808360000151815260200160008051602062005d57833981519152846020015162003d80919062005861565b62003d9b9060008051602062005d5783398151915262005820565b905292915050565b62003dad62004a5d565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b6000815183511462003eb25760405162461bcd60e51b81526020600482015260156024820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b604482015260640162000726565b8251600062003ec3826006620057a5565b90506000816001600160401b0381111562003ee25762003ee262005134565b60405190808252806020026020018201604052801562003f0c578160200160208202803683370190505b50905060005b838110156200418d5786818151811062003f305762003f3062005437565b6020026020010151600001518282600662003f4c9190620057a5565b62003f5990600062005878565b8151811062003f6c5762003f6c62005437565b60200260200101818152505086818151811062003f8d5762003f8d62005437565b6020026020010151602001518282600662003fa99190620057a5565b62003fb690600162005878565b8151811062003fc95762003fc962005437565b60200260200101818152505085818151811062003fea5762003fea62005437565b602090810291909101015151518262004005836006620057a5565b6200401290600262005878565b8151811062004025576200402562005437565b60200260200101818152505085818151811062004046576200404662005437565b6020908102919091018101515101518262004063836006620057a5565b6200407090600362005878565b8151811062004083576200408362005437565b602002602001018181525050858181518110620040a457620040a462005437565b602002602001015160200151600060028110620040c557620040c562005437565b602002015182620040d8836006620057a5565b620040e590600462005878565b81518110620040f857620040f862005437565b60200260200101818152505085818151811062004119576200411962005437565b6020026020010151602001516001600281106200413a576200413a62005437565b6020020151826200414d836006620057a5565b6200415a90600562005878565b815181106200416d576200416d62005437565b6020908102919091010152806200418481620056ff565b91505062003f12565b506200419862004931565b6000602082602086026020860160086107d05a03fa905080620041fe5760405162461bcd60e51b815260206004820152601960248201527f50616972696e67206f7065726174696f6e206661696c65642e00000000000000604482015260640162000726565b505115159695505050505050565b60008060006200421d85856200359b565b94509050600060fd60ff83161415620042b3576200423c86866200446b565b955061ffff16905060fd811080159062004258575061ffff8111155b620042a65760405162461bcd60e51b815260206004820152601f60248201527f4e65787455696e7431362c2076616c7565206f7574736964652072616e676500604482015260640162000726565b92508391506200351b9050565b8160ff1660fe14156200430b57620042cc86866200394c565b955063ffffffff16905061ffff81118015620042ec575063ffffffff8111155b620042a65760405162461bcd60e51b81526004016200072690620059e6565b8160ff1660ff141562004357576200432486866200452d565b95506001600160401b0316905063ffffffff8111620042a65760405162461bcd60e51b81526004016200072690620059e6565b5060ff811660fd8110620042a65760405162461bcd60e51b81526004016200072690620059e6565b606083156200439057508162002416565b825115620043a15782518084602001fd5b8160405162461bcd60e51b815260040162000726919062004f2c565b6000818152600183016020526040812054620044065750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562002566565b50600062002566565b60006200256660008051602062005d5783398151915280620044348560038362004609565b6200444190600362005878565b6200444d919062005861565b9062004655565b805160009015801562002566575050602001511590565b60008083518360026200447f919062005878565b111580156200449957506200449683600262005878565b83105b620044f25760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7431362c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840162000726565b6000604051846020870101518060011a82538060001a60018301535060028101604052601e8103519150508084600262003653919062005878565b600080835183600862004541919062005878565b111580156200455b57506200455883600862005878565b83105b620045b45760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7436342c206f66667365742065786365656473206d6178696d604482015261756d60f01b606482015260840162000726565b600060405160086000600182038760208a0101515b83831015620045eb5780821a83860153600183019250600182039150620045c9565b505050016040819052601f1901519050806200365385600862005878565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa6200464b57600080fd5b5051949350505050565b60006200466383836200487f565b600114620046745750600062002566565b82620046835750600062002566565b6200469060048362005861565b60031415620046c857620046c0836004620046ad85600162005878565b620046b99190620057dd565b8462004609565b905062002566565b6000620046d760018462005820565b905060005b620046e960028362005861565b6200471257620046fb600283620057dd565b91506200470a81600162005878565b9050620046dc565b60025b6200472181866200487f565b600019146200473f576200473781600162005878565b905062004715565b6000620047688760026200475587600162005878565b620047619190620057dd565b8862004609565b905060006200477988868962004609565b905060006200478a84878a62004609565b905084600080845b5060009050845b83821015620047d7578060011415620047b257620047d7565b620047c08160028e62004609565b905081620047ce81620056ff565b92505062004799565b81620047f057869a505050505050505050505062002566565b6200482385600162004803858862005820565b6200480f919062005820565b6200481c90600262005b18565b8e62004609565b92508b620048328480620057a5565b6200483e919062005861565b94508b6200484d8489620057a5565b62004859919062005861565b96508b620048688688620057a5565b62004874919062005861565b955081935062004792565b600080620048a98460026200489660018762005820565b620048a29190620057dd565b8562004609565b9050801580620048b95750806001145b15620048c757905062002566565b620048d460018462005820565b811415620048e85760001991505062002566565b60405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e000000604482015260640162000726565b60405180602001604052806001906020820280368337509192915050565b826002810192821562004980579160200282015b828111156200498057825182559160200191906001019062004963565b506200498e92915062004b68565b5090565b6102308062005b2783390190565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b828054620049ef906200556e565b90600052602060002090601f01602090048101928262004a13576000855562004980565b82601f1062004a2e57805160ff191683800117855562004980565b828001600101855582156200498057918201828111156200498057825182559160200191906001019062004963565b604051806040016040528062004a7262004b7f565b815260200162004a8162004b7f565b905290565b508054600082559060005260206000209081019062000c57919062004b9d565b508054600082559060005260206000209081019062000c57919062004bbe565b82805462004ad4906200556e565b90600052602060002090601f01602090048101928262004af8576000855562004980565b82601f1062004b0b578054855562004980565b828001600101855582156200498057600052602060002091601f016020900482015b828111156200498057825482559160010191906001019062004b2d565b60405180608001604052806004906020820280368337509192915050565b5b808211156200498e576000815560010162004b69565b60405180604001604052806002906020820280368337509192915050565b808211156200498e57600062004bb4828262004bdf565b5060010162004b9d565b808211156200498e57600062004bd5828262004bdf565b5060010162004bbe565b50805462004bed906200556e565b6000825580601f1062004bfe575050565b601f01602090049060005260206000209081019062000c57919062004b68565b60006020828403121562004c3157600080fd5b5035919050565b60008083601f84011262004c4b57600080fd5b5081356001600160401b0381111562004c6357600080fd5b6020830191508360208285010111156200351b57600080fd5b600080600080600080600080600060a08a8c03121562004c9b57600080fd5b89356001600160401b038082111562004cb357600080fd5b62004cc18d838e0162004c38565b909b50995060208c013591508082111562004cdb57600080fd5b62004ce98d838e0162004c38565b909950975060408c013591508082111562004d0357600080fd5b62004d118d838e0162004c38565b909750955060608c013591508082111562004d2b57600080fd5b5062004d3a8c828d0162004c38565b9a9d999c50979a9699959894979660800135949350505050565b6001600160a01b038116811462000c5757600080fd5b60006020828403121562004d7d57600080fd5b8135620024168162004d54565b60008060008060008060008060e0898b03121562004da757600080fd5b88356001600160401b0381111562004dbe57600080fd5b62004dcc8b828c0162004c38565b9099509750506020890135955060408901359450606089013593506080890135925060a089013562004dfe8162004d54565b8092505060c089013590509295985092959890939650565b60008060008060008060008060e0898b03121562004e3357600080fd5b88356001600160401b0381111562004e4a57600080fd5b62004e588b828c0162004c38565b909950975050602089013562004e6e8162004d54565b9550604089013562004e808162004d54565b9450606089013593506080890135925060a089013562004dfe8162004d54565b801515811462000c5757600080fd5b60006020828403121562004ec257600080fd5b8135620024168162004ea0565b60005b8381101562004eec57818101518382015260200162004ed2565b83811115620018d45750506000910152565b6000815180845262004f1881602086016020860162004ecf565b601f01601f19169290920160200192915050565b60208152600062002416602083018462004efe565b600060018060a01b0380835116845280602084015116602085015250604082015160a0604085015262004f7860a085018262004efe565b90506060830151848203606086015262004f93828262004efe565b915050608083015160808501528091505092915050565b60208152600062002416602083018462004f41565b60608152600062004fd4606083018662004efe565b905060ff8416602083015263ffffffff83166040830152949350505050565b6000815180845260208085019450848260051b860182860160005b858110156200503c5783830389526200502983835162004efe565b988501989250908401906001016200500e565b5090979650505050505050565b60208152600062002416602083018462004ff3565b60608152600062005073606083018662004ff3565b6020838203818501528186518084528284019150828160051b85010183890160005b83811015620050c757601f19878403018552620050b483835162004efe565b9486019492509085019060010162005095565b50508095505050505050826040830152949350505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906200510d9083018662004efe565b828103606084015262005121818662004efe565b9150508260808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200516f576200516f62005134565b60405290565b600082601f8301126200518757600080fd5b81356001600160401b0380821115620051a457620051a462005134565b604051601f8301601f19908116603f01168101908282118183101715620051cf57620051cf62005134565b81604052838152866020858801011115620051e957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156200521c57600080fd5b81356001600160401b038111156200523357600080fd5b620025d38482850162005175565b6000806000606084860312156200525757600080fd5b8335620052648162004d54565b92506020840135620052768162004d54565b91506040840135620052888162004d54565b809150509250925092565b803560ff811681146200317557600080fd5b600080600080600060a08688031215620052be57600080fd5b85356001600160401b0380821115620052d657600080fd5b9087019060a0828a031215620052eb57600080fd5b620052f56200514a565b8235620053028162004d54565b81526020830135620053148162004d54565b60208201526040830135828111156200532c57600080fd5b6200533a8b82860162005175565b6040830152506060830135828111156200535357600080fd5b620053618b82860162005175565b60608301525060808301356080820152809750505050602086013593506200538c6040870162005293565b94979396509394606081013594506080013592915050565b600080600060608486031215620053ba57600080fd5b505081359360208301359350604090920135919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200542a57603f198886030184526200541785835162004f41565b94509285019290850190600101620053f8565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200546057600080fd5b8151620024168162004ea0565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c081526000620054c160c08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b8860208401528760408401528281036060840152620054e28187896200546d565b6080840195909552505060a00152949350505050565b60e0815260006200552360e08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b6001600160a01b038a81166020850152604084018a905283820360608501526200554f82898b6200546d565b96811660808501529490941660a08301525060c0015250949350505050565b600181811c908216806200558357607f821691505b602082108114156200142857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115620055dd57620055dd620055a5565b01949350505050565b8060005b6002811015620018d4578154845260209093019260019182019101620055ea565b608081016200561b8284620055e6565b620025666040830160028501620055e6565b8060005b6002811015620018d457815184526020938401939091019060010162005631565b6000608082019050620056678284516200562d565b60208301516200567b60408401826200562d565b5092915050565b60808152600062005697608083018762004efe565b8281036020840152620056ab818762004efe565b9415156040840152505063ffffffff9190911660609091015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415620057165762005716620055a5565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156200577e57600080fd5b8151620024168162004d54565b6000602082840312156200579e57600080fd5b5051919050565b6000816000190483118215151615620057c257620057c2620055a5565b500290565b634e487b7160e01b600052601260045260246000fd5b600082620057ef57620057ef620057c7565b500490565b600080858511156200580557600080fd5b838611156200581357600080fd5b5050820193919092039150565b600082821015620058355762005835620055a5565b500390565b600063ffffffff80831681811415620058575762005857620055a5565b6001019392505050565b600082620058735762005873620057c7565b500690565b600082198211156200588e576200588e620055a5565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251620058f281846020870162004ecf565b9190910192915050565b6001600160a01b0385168152608060208201819052600090620059229083018662004efe565b828103604084015262005936818662004efe565b91505082606083015295945050505050565b6200595481856200562d565b6200596360408201846200562d565b608081019190915260a00192915050565b6200598081856200562d565b6200598f60408201846200562d565b60008251620059a681608085016020870162004ecf565b91909101608001949350505050565b60ff60f81b8360f81b16815260008251620059d881600185016020870162004ecf565b919091016001019392505050565b6020808252818101527f4e65787456617255696e742c2076616c7565206f7574736964652072616e6765604082015260600190565b600181815b8085111562005a5c57816000190482111562005a405762005a40620055a5565b8085161562005a4e57918102915b93841c939080029062005a20565b509250929050565b60008262005a755750600162002566565b8162005a845750600062002566565b816001811462005a9d576002811462005aa85762005ac8565b600191505062002566565b60ff84111562005abc5762005abc620055a5565b50506001821b62002566565b5060208310610133831016604e8410600b841016171562005aed575081810a62002566565b62005af9838362005a1b565b806000190482111562005b105762005b10620055a5565b029392505050565b600062002416838362005a6456fe6080604052600180546001600160a01b0319163317905534801561002257600080fd5b506101fe806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806337896d961461005157806383197ef0146100895780638da5cb5b14610093578063afe16e44146100be575b600080fd5b61007461005f3660046101af565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100916100d1565b005b6001546100a6906001600160a01b031681565b6040516001600160a01b039091168152602001610080565b6100746100cc3660046101af565b61012a565b6001546001600160a01b0316331461011c5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6001546001600160a01b0316ff5b6001546000906001600160a01b031633146101735760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610113565b60008281526020819052604090205460ff161561019257506001919050565b506000908152602081905260408120805460ff1916600117905590565b6000602082840312156101c157600080fd5b503591905056fea2646970667358221220c5e253cb1018d5eb5749629521051687ef2f7faa3f13dd5a262fe2d544c543bb64736f6c634300080a003330644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220832b6b06cf3dede3647e0e6cb8f57b13eddc124650c7f1e9d232790c36f5334f64736f6c634300080a0033",
}

// NodeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeRegistryMetaData.ABI instead.
var NodeRegistryABI = NodeRegistryMetaData.ABI

// NodeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeRegistryMetaData.Bin instead.
var NodeRegistryBin = NodeRegistryMetaData.Bin

// DeployNodeRegistry deploys a new Ethereum contract, binding an instance of NodeRegistry to it.
func DeployNodeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeRegistry, error) {
	parsed, err := NodeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NodeRegistry is an auto generated Go binding around an Ethereum contract.
type NodeRegistry struct {
	NodeRegistryCaller     // Read-only binding to the contract
	NodeRegistryTransactor // Write-only binding to the contract
	NodeRegistryFilterer   // Log filterer for contract events
}

// NodeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_NodeRegistry *NodeRegistryTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_NodeRegistry.gsn = opts
}

// NodeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeRegistrySession struct {
	Contract     *NodeRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeRegistryCallerSession struct {
	Contract *NodeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// NodeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeRegistryTransactorSession struct {
	Contract     *NodeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// NodeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRegistryRaw struct {
	Contract *NodeRegistry // Generic contract binding to access the raw methods on
}

// NodeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeRegistryCallerRaw struct {
	Contract *NodeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// NodeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeRegistryTransactorRaw struct {
	Contract *NodeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeRegistry creates a new instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistry(address common.Address, backend bind.ContractBackend) (*NodeRegistry, error) {
	contract, err := bindNodeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NewNodeRegistryCaller creates a new read-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryCaller(address common.Address, caller bind.ContractCaller) (*NodeRegistryCaller, error) {
	contract, err := bindNodeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCaller{contract: contract}, nil
}

// NewNodeRegistryTransactor creates a new write-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeRegistryTransactor, error) {
	contract, err := bindNodeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryTransactor{contract: contract}, nil
}

// NewNodeRegistryFilterer creates a new log filterer instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeRegistryFilterer, error) {
	contract, err := bindNodeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryFilterer{contract: contract}, nil
}

// bindNodeRegistry binds a generic wrapper to an already deployed contract.
func bindNodeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.NodeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transact(opts, method, params...)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) EYWA(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "EYWA")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistrySession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) MINCOLLATERAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "MIN_COLLATERAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistrySession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistrySession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) CheckPermissionTrustList(opts *bind.CallOpts, _blsPubKey [32]byte) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "checkPermissionTrustList", _blsPubKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) CheckPermissionTrustList(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _blsPubKey)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) CheckPermissionTrustList(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _blsPubKey)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistrySession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCallerSession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistrySession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCallerSession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCaller) GetBLSPubKeys(opts *bind.CallOpts) ([][]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getBLSPubKeys")

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistrySession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCallerSession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistrySession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCaller) GetNode(opts *bind.CallOpts, _blsPubKey [32]byte) (NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNode", _blsPubKey)

	if err != nil {
		return *new(NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodeRegistryNode)).(*NodeRegistryNode)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistrySession) GetNode(_blsPubKey [32]byte) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _blsPubKey)
}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCallerSession) GetNode(_blsPubKey [32]byte) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _blsPubKey)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCaller) GetNodes(opts *bind.CallOpts) ([]NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNodes")

	if err != nil {
		return *new([]NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new([]NodeRegistryNode)).(*[]NodeRegistryNode)

	return out0, err

}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistrySession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCallerSession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCaller) GetSnapshot(opts *bind.CallOpts) ([][]byte, []string, *big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getSnapshot")

	if err != nil {
		return *new([][]byte), *new([]string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistrySession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCaller) HostIds(opts *bind.CallOpts, arg0 string) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "hostIds", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistrySession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) NodeExists(opts *bind.CallOpts, _blsPubKey [32]byte) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "nodeExists", _blsPubKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) NodeExists(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _blsPubKey)
}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) NodeExists(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _blsPubKey)
}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCaller) OwnedNodes(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "ownedNodes", arg0)

	outstruct := new(struct {
		Owner     common.Address
		Pool      common.Address
		HostId    string
		BlsPubKey []byte
		NodeId    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Pool = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HostId = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.BlsPubKey = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.NodeId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistrySession) OwnedNodes(arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCallerSession) OwnedNodes(arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) PoolFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "poolFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistrySession) PoolFactory() (common.Address, error) {
	return _NodeRegistry.Contract.PoolFactory(&_NodeRegistry.CallOpts)
}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) PoolFactory() (common.Address, error) {
	return _NodeRegistry.Contract.PoolFactory(&_NodeRegistry.CallOpts)
}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) ReqIdFilter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "reqIdFilter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistrySession) ReqIdFilter() (common.Address, error) {
	return _NodeRegistry.Contract.ReqIdFilter(&_NodeRegistry.CallOpts)
}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) ReqIdFilter() (common.Address, error) {
	return _NodeRegistry.Contract.ReqIdFilter(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCaller) Snapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "snapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistrySession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCallerSession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistrySession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistrySession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCallerSession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// Vrf is a free data retrieval call binding the contract method 0x0c949043.
//
// Solidity: function vrf() view returns(bytes32 rand)
func (_NodeRegistry *NodeRegistryCaller) Vrf(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "vrf")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Vrf is a free data retrieval call binding the contract method 0x0c949043.
//
// Solidity: function vrf() view returns(bytes32 rand)
func (_NodeRegistry *NodeRegistrySession) Vrf() ([32]byte, error) {
	return _NodeRegistry.Contract.Vrf(&_NodeRegistry.CallOpts)
}

// Vrf is a free data retrieval call binding the contract method 0x0c949043.
//
// Solidity: function vrf() view returns(bytes32 rand)
func (_NodeRegistry *NodeRegistryCallerSession) Vrf() ([32]byte, error) {
	return _NodeRegistry.Contract.Vrf(&_NodeRegistry.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactor) AddContractBindOverGsn(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistrySession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistrySession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayer(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "createRelayer", _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayerOverGsn(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "createRelayer", _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistrySession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistrySession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoTransferOwnership", newDao)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnershipOverGsn(opts *bind.TransactOpts, newDao common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequestOverGsn(opts *bind.TransactOpts, resetEpoch bool) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize", forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) InitializeOverGsn(opts *bind.TransactOpts, forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistrySession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize2(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize2", _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactor) Initialize2OverGsn(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize2", _EYWA, _forwarder, _poolFactory)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize2(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistrySession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2OverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "renounceOwnership")
}
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistrySession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetRelayerPoolFactory(opts *bind.TransactOpts, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setRelayerPoolFactory", _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactor) SetRelayerPoolFactoryOverGsn(opts *bind.TransactOpts, _poolFactory common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setRelayerPoolFactory", _poolFactory)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistrySession) SetRelayerPoolFactory(_poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactory(&_NodeRegistry.TransactOpts, _poolFactory)
}
func (_NodeRegistry *NodeRegistrySession) SetRelayerPoolFactoryOverGsn(_poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactoryOverGsn(&_NodeRegistry.TransactOpts, _poolFactory)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetRelayerPoolFactory(_poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactory(&_NodeRegistry.TransactOpts, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetRelayerPoolFactoryOverGsn(_poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactoryOverGsn(&_NodeRegistry.TransactOpts, _poolFactory)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetUtilityToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setUtilityToken", _token)
}
func (_NodeRegistry *NodeRegistryTransactor) SetUtilityTokenOverGsn(opts *bind.TransactOpts, _token common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setUtilityToken", _token)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistrySession) SetUtilityToken(_token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetUtilityToken(&_NodeRegistry.TransactOpts, _token)
}
func (_NodeRegistry *NodeRegistrySession) SetUtilityTokenOverGsn(_token common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetUtilityTokenOverGsn(&_NodeRegistry.TransactOpts, _token)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetUtilityToken(_token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetUtilityToken(&_NodeRegistry.TransactOpts, _token)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetUtilityTokenOverGsn(_token common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetUtilityTokenOverGsn(&_NodeRegistry.TransactOpts, _token)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistrySession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2OverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolanaOverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpoch(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpochOverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// NodeRegistryCreatedRelayerIterator is returned from FilterCreatedRelayer and is used to iterate over the raw logs and unpacked data for CreatedRelayer events raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayerIterator struct {
	Event *NodeRegistryCreatedRelayer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryCreatedRelayerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryCreatedRelayer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryCreatedRelayer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryCreatedRelayerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryCreatedRelayerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryCreatedRelayer represents a CreatedRelayer event raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayer struct {
	Owner       common.Address
	RelayerPool common.Address
	HostId      string
	BlsPubKey   []byte
	NodeId      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreatedRelayer is a free log retrieval operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) FilterCreatedRelayer(opts *bind.FilterOpts, owner []common.Address) (*NodeRegistryCreatedRelayerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCreatedRelayerIterator{contract: _NodeRegistry.contract, event: "CreatedRelayer", logs: logs, sub: sub}, nil
}

// WatchCreatedRelayer is a free log subscription operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) WatchCreatedRelayer(opts *bind.WatchOpts, sink chan<- *NodeRegistryCreatedRelayer, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryCreatedRelayer)
				if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRelayer is a log parse operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) ParseCreatedRelayer(log types.Log) (*NodeRegistryCreatedRelayer, error) {
	event := new(NodeRegistryCreatedRelayer)
	if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the NodeRegistry contract.
type NodeRegistryNewEpochIterator struct {
	Event *NodeRegistryNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewEpoch represents a NewEpoch event raised by the NodeRegistry contract.
type NodeRegistryNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*NodeRegistryNewEpochIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewEpochIterator{contract: _NodeRegistry.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewEpoch) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewEpoch)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewEpoch(log types.Log) (*NodeRegistryNewEpoch, error) {
	event := new(NodeRegistryNewEpoch)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewSnapshotIterator is returned from FilterNewSnapshot and is used to iterate over the raw logs and unpacked data for NewSnapshot events raised by the NodeRegistry contract.
type NodeRegistryNewSnapshotIterator struct {
	Event *NodeRegistryNewSnapshot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewSnapshotIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewSnapshot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewSnapshot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewSnapshotIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewSnapshotIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewSnapshot represents a NewSnapshot event raised by the NodeRegistry contract.
type NodeRegistryNewSnapshot struct {
	SnapNum *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSnapshot is a free log retrieval operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewSnapshot(opts *bind.FilterOpts) (*NodeRegistryNewSnapshotIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewSnapshotIterator{contract: _NodeRegistry.contract, event: "NewSnapshot", logs: logs, sub: sub}, nil
}

// WatchNewSnapshot is a free log subscription operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewSnapshot(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewSnapshot) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewSnapshot)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSnapshot is a log parse operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewSnapshot(log types.Log) (*NodeRegistryNewSnapshot, error) {
	event := new(NodeRegistryNewSnapshot)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestIterator struct {
	Event *NodeRegistryOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequest represents a OracleRequest event raised by the NodeRegistry contract.
type NodeRegistryOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*NodeRegistryOracleRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestIterator{contract: _NodeRegistry.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequest(log types.Log) (*NodeRegistryOracleRequest, error) {
	event := new(NodeRegistryOracleRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolanaIterator struct {
	Event *NodeRegistryOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequestSolana represents a OracleRequestSolana event raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*NodeRegistryOracleRequestSolanaIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestSolanaIterator{contract: _NodeRegistry.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequestSolana)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequestSolana(log types.Log) (*NodeRegistryOracleRequestSolana, error) {
	event := new(NodeRegistryOracleRequestSolana)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferredIterator struct {
	Event *NodeRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NodeRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOwnershipTransferredIterator{contract: _NodeRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NodeRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOwnershipTransferred)
				if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*NodeRegistryOwnershipTransferred, error) {
	event := new(NodeRegistryOwnershipTransferred)
	if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the NodeRegistry contract.
type NodeRegistryReceiveRequestIterator struct {
	Event *NodeRegistryReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryReceiveRequest represents a ReceiveRequest event raised by the NodeRegistry contract.
type NodeRegistryReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*NodeRegistryReceiveRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryReceiveRequestIterator{contract: _NodeRegistry.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryReceiveRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) ParseReceiveRequest(log types.Log) (*NodeRegistryReceiveRequest, error) {
	event := new(NodeRegistryReceiveRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
