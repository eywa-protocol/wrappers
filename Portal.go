// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// PortalMetaData contains all meta data concerning the Portal contract.
var PortalMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"}],\"name\":\"ApprovedRepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rtoken\",\"type\":\"address\"}],\"name\":\"RepresentationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevertBurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequestSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"approveRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rtoken\",\"type\":\"address\"}],\"name\":\"createRepresentationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnburnRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnburnRequestToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedEmergencyExecuter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"initializeFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"enumPortal.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnburn\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashMintSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"solAmount64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"solAmount\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structPortal.SynthParams\",\"name\":\"_synthParams\",\"type\":\"tuple\"}],\"name\":\"synthesize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structPortal.SynthParams\",\"name\":\"_synthParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_transitData\",\"type\":\"bytes\"}],\"name\":\"synthesizeBatchWithDataTransit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_txStateBump\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"synthesizeToSolana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsynthesizeStates\",\"outputs\":[{\"internalType\":\"enumPortal.UnsynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613c36806100206000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063715018a61161011a578063ac5de43c116100ad578063e747c0851161007c578063e747c085146104d3578063e78cea92146104db578063edff2c82146104ee578063f2fde38b14610515578063fab928941461052857600080fd5b8063ac5de43c1461046f578063c4b553c414610482578063d1ec85ed146104ad578063da742228146104c057600080fd5b806399677c21116100e957806399677c21146103e55780639d866985146103f8578063a429bb0714610449578063a6037a291461045c57600080fd5b8063715018a6146103b35780637da0a877146103bb5780638da5cb5b146103cc5780638e2e82c0146103dd57600080fd5b80633410c15f11610192578063486ff0cd11610161578063486ff0cd1461035157806352dd22ee14610359578063572b6c051461036157806370a082311461039357600080fd5b80633410c15f146102dc5780633e7e25c1146102ef578063439616681461030957806344aedc5f1461031c57600080fd5b80632ab8c8b0116101ce5780632ab8c8b01461026f5780632b1106e31461028f5780632df933dc146102b657806333feeaff146102c957600080fd5b8063067bd07a14610200578063087744101461021e5780630e03e49014610233578063294fe4f81461025c575b600080fd5b61020b631de44e3d81565b6040519081526020015b60405180910390f35b61023161022c366004612ec4565b610558565b005b610244610241366004612ee6565b90565b6040516001600160a01b039091168152602001610215565b61020b61026a366004612eff565b6105cc565b61028261027d366004613064565b610913565b60405161021591906131f2565b61020b7f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000081565b6102316102c43660046132fb565b610b04565b6102316102d7366004613423565b610f72565b6102316102ea366004613471565b611216565b61020b6102fd366004612ec4565b6001600160a01b031690565b6102316103173660046134a4565b611332565b61033f61032a366004612ee6565b606b6020526000908152604090205460ff1681565b60405160ff9091168152602001610215565b61028261162c565b61020b600081565b61038361036f366004612ec4565b6065546001600160a01b0391821691161490565b6040519015158152602001610215565b61020b6103a1366004612ec4565b60666020526000908152604090205481565b6102316116ba565b6065546001600160a01b0316610244565b6033546001600160a01b0316610244565b61028261170f565b6102316103f3366004612ec4565b611748565b610438610406366004612ee6565b606960205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b604051610215959493929190613542565b6102316104573660046135c3565b61177f565b61023161046a366004613615565b611de2565b61020b61047d36600461365b565b611f57565b610495610490366004612ee6565b6125ba565b6040516001600160401b039091168152602001610215565b6102316104bb3660046136f3565b61261d565b6102316104ce366004612ec4565b6126ac565b610282612701565b606854610244906001600160a01b031681565b61020b7f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a981565b610231610523366004612ec4565b612728565b61054b610536366004612ee6565b606a6020526000908152604090205460ff1681565b6040516102159190613716565b6105606127df565b6001600160a01b031661057b6033546001600160a01b031690565b6001600160a01b0316146105aa5760405162461bcd60e51b81526004016105a190613729565b60405180910390fd5b606880546001600160a01b0319166001600160a01b0392909216919091179055565b60006105d88585612813565b606854604051632d0335ab60e01b81526001600160a01b0385811660048301526000921690632d0335ab90602401602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061375e565b6068549091506001600160a01b0316636f35219661066e6102fd6060870160408801612ec4565b60608601356106866102fd6040890160208a01612ec4565b6001600160a01b0389166040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810184905260a401602060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610709919061375e565b91506000604051806060016040528060338152602001613bce60339139805190602001208388888760000160208101906107439190612ec4565b60405160248101949094526001600160a01b039283166044850152606484019190915216608482015260a40160408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b0319909516949094179093526068549193506001600160a01b039091169163329ef45f9184916107ca918901908901612ec4565b6107da6060890160408a01612ec4565b8860600135888b896040518863ffffffff1660e01b81526004016108049796959493929190613777565b6020604051808303816000875af1158015610823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084791906137c7565b5060008381526069602052604090206001600160a01b03861681556108726102fd6020870187612ec4565b60018201556001600160a01b03881660038201556002810187905560048101805460ff191660011790556108a96020860186612ec4565b6001600160a01b0316866001600160a01b0316857f79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b98a8c6040516109009291909182526001600160a01b0316602082015260400190565b60405180910390a4505050949350505050565b60208082015151604051606092600883811c62ff00ff1663ff00ff009490911b9390931692909217601081811c91901b17916000916109679184910160e09190911b6001600160e01b031916815260040190565b6040516020818303038152906040529050606060005b856020015151811015610a6557856020015181815181106109a0576109a06137e4565b602002602001015160000151866020015182815181106109c2576109c26137e4565b602002602001015160200151876020015183815181106109e4576109e46137e4565b602002602001015160400151604051602001610a1d9392919092835290151560f890811b6020840152901515901b602182015260220190565b60405160208183030381529060405291508282604051602001610a419291906137fa565b60405160208183030381529060405292508080610a5d9061383f565b91505061097d565b508451604051610a7991849160200161385a565b60408051601f198184030181528282529087015151600881811c62ff00ff1663ff00ff009290911b9190911617601081811c91901b1794509250610ac3908390859060200161387c565b6040516020818303038152906040529150818560400151604051602001610aeb9291906137fa565b60408051601f1981840301815291905295945050505050565b600086516001600160401b03811115610b1f57610b1f612f56565b604051908082528060200260200182016040528015610b48578160200160208202803683370190505b50606854604051632d0335ab60e01b81526001600160a01b03888116600483015292935060009290911690632d0335ab90602401602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd919061375e565b60685460408701519192506000916001600160a01b0391821691636f3521969116606089015160208a01516001600160a01b03166001600160a01b038c166040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401602060405180830381865afa158015610c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c74919061375e565b905060005b8951811015610e9c576000898281518110610c9657610c966137e4565b60200260200101511115610e8a57610ce08a8281518110610cb957610cb96137e4565b60200260200101518a8381518110610cd357610cd36137e4565b6020026020010151612813565b604080516020810184905290810182905260600160405160208183030381529060405280519060200120848281518110610d1c57610d1c6137e4565b602002602001018181525050600060696000868481518110610d4057610d406137e4565b602002602001015181526020019081526020016000209050610d68896001600160a01b031690565b815587516001600160a01b03168160010181905550610da68b8381518110610d9257610d926137e4565b60200260200101516001600160a01b031690565b600382015589518a9083908110610dbf57610dbf6137e4565b6020908102919091010151600282015560048101805460ff19166001179055875185516001600160a01b03918216918b1690879085908110610e0357610e036137e4565b60200260200101517f79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b98d8681518110610e3e57610e3e6137e4565b60200260200101518f8781518110610e5857610e586137e4565b6020026020010151604051610e809291909182526001600160a01b0316602082015260400190565b60405180910390a4505b80610e948161383f565b915050610c79565b50600085858b8b87604051602001610eb89594939291906138e1565b6040516020818303038152906040529050606860009054906101000a90046001600160a01b03166001600160a01b031663329ef45f8289602001518a604001518b60600151878e8a6040518863ffffffff1660e01b8152600401610f229796959493929190613777565b6020604051808303816000875af1158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6591906137c7565b5050505050505050505050565b6068546001600160a01b03163314610fc25760405162461bcd60e51b8152602060048201526013602482015272506f7274616c3a20627269646765206f6e6c7960681b60448201526064016105a1565b600085815260696020908152604080832081518084018a90526bffffffffffffffffffffffff1960608a901b16818401524660548201527f656d657267656e6379556e73796e74686573697a6528627974657333322c616460748201527f64726573732c75696e74382c627974657333322c62797465733332290000000060948201528251808203609001815260b0820184528051908501207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060d083015260ec8083018290528451808403909101815261010c9092019093528051930192909220919290916110b49087878761291d565b90506001600484015460ff1660028111156110d1576110d161350e565b146111325760405162461bcd60e51b815260206004820152602b60248201527f506f7274616c3a207374617465206e6f74206f70656e206f7220747820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016105a1565b6001600160a01b03811683541461118b5760405162461bcd60e51b815260206004820152601860248201527f506f7274616c3a20696e76616c6964207478206f776e6572000000000000000060448201526064016105a1565b60048301805460ff1916600217905560038301546111af9084548560020154612ac6565b82546001600160a01b0316887f944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca985600201546111ec876003015490565b604080519283526001600160a01b0390911660208301520160405180910390a35050505050505050565b600054610100900460ff166112315760005460ff1615611235565b303b155b6112985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a1565b600054610100900460ff161580156112ba576000805461ffff19166101011790555b6112c2612bf7565b6112ca612c1e565b60408051808201909152600580825264322e322e3360d81b60209092019182526112f691606791612e0f565b50606880546001600160a01b0319166001600160a01b03851617905561131b82612c55565b801561132d576000805461ff00191690555b505050565b60016000888152606a602052604090205460ff1660028111156113575761135761350e565b14156113755760405162461bcd60e51b81526004016105a19061397c565b6000878152606a60209081526040808320805460ff1916600217905580516060810190915260368082529091613b989083013980519060200120886113b86127df565b60405160248101929092526001600160a01b0316604482015260ff861660648201526084810185905260a4810184905260c40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526068549091506000906001600160a01b0316632d0335ab61143c6127df565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a4919061375e565b6068549091506000906001600160a01b0316636f3521966114cb8a6001600160a01b031690565b896001600160a01b038d166114e16102fd6127df565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401602060405180830381865afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a919061375e565b6068549091506001600160a01b031663329ef45f848b8b8b8661157b6127df565b896040518863ffffffff1660e01b815260040161159e9796959493929190613777565b6020604051808303816000875af11580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e191906137c7565b506115ea6127df565b6001600160a01b0316817f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a350505050505050505050565b60678054611639906139c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611665906139c3565b80156116b25780601f10611687576101008083540402835291602001916116b2565b820191906000526020600020905b81548152906001019060200180831161169557829003601f168201915b505050505081565b6116c26127df565b6001600160a01b03166116dd6033546001600160a01b031690565b6001600160a01b0316146117035760405162461bcd60e51b81526004016105a190613729565b61170d6000612c77565b565b602c60fd600160656082608b6012604e6040516020016117369897969594939291906139fe565b60405160208183030381529060405281565b6040516001600160a01b038216907f670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af85147090600090a250565b631de44e3d81146117d25760405162461bcd60e51b815260206004820152601960248201527f506f7274616c3a20696e636f727265637420636861696e49640000000000000060448201526064016105a1565b60016000858152606a602052604090205460ff1660028111156117f7576117f761350e565b14156118155760405162461bcd60e51b81526004016105a19061397c565b6000848152606a60205260408120805460ff191660021790556068546001600160a01b0316632d0335ab6118476127df565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af919061375e565b6068549091506000906001600160a01b0316636f352196868660038181106118d9576118d96137e4565b60200291909101359050631de44e3d888860018181106118fb576118fb6137e4565b9050602002013561190d6102fd6127df565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401602060405180830381865afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611986919061375e565b604080516007808252610100820190925291925060009190816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816119a3575050604080516060810190915290915080878760028181106119f1576119f16137e4565b9050602002013581526020016000151581526020016000151581525081600081518110611a2057611a206137e4565b602090810291909101015260408051606081019091528087876007818110611a4a57611a4a6137e4565b9050602002013581526020016000151581526020016001151581525081600181518110611a7957611a796137e4565b602090810291909101015260408051606081019091528087876005818110611aa357611aa36137e4565b9050602002013581526020016000151581526020016001151581525081600281518110611ad257611ad26137e4565b602090810291909101015260408051606081019091528087876006818110611afc57611afc6137e4565b9050602002013581526020016000151581526020016000151581525081600381518110611b2b57611b2b6137e4565b602090810291909101015260408051606081019091528087876000818110611b5557611b556137e4565b9050602002013581526020016000151581526020016001151581525081600481518110611b8457611b846137e4565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b81526020016000151581526020016000151581525081600581518110611be657611be66137e4565b602090810291909101015260408051606081019091528087876004818110611c1057611c106137e4565b9050602002013581526020016001151581526020016000151581525081600681518110611c3f57611c3f6137e4565b602090810291909101015260685460408051606081019091526001600160a01b03909116906331b433f990611cef90808a8a6001818110611c8257611c826137e4565b905060200201358152602001858152602001609560846068607b609d6055601560a1604051602001611cbb9897969594939291906139fe565b60408051601f1981840301815290829052611cd891602001613a59565b604051602081830303815290604052815250610913565b88886001818110611d0257611d026137e4565b6020029190910135905089896003818110611d1f57611d1f6137e4565b90506020020135631de44e3d87611d346127df565b8a6040518863ffffffff1660e01b8152600401611d579796959493929190613a75565b6020604051808303816000875af1158015611d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9a91906137c7565b50611da36127df565b6001600160a01b0316827f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a350505050505050565b6068546001600160a01b03163314611e325760405162461bcd60e51b8152602060048201526013602482015272506f7274616c3a20627269646765206f6e6c7960681b60448201526064016105a1565b6000848152606a602052604081205460ff166002811115611e5557611e5561350e565b14611eb35760405162461bcd60e51b815260206004820152602860248201527f506f7274616c3a2073796e74686574696320746f6b656e7320656d657267656e60448201526731bcaab7313ab93760c11b60648201526084016105a1565b611ebe838284612ac6565b6001600160a01b03831660009081526066602052604081208054849290611ee6908490613ac2565b90915550506000848152606a6020526040902080546001919060ff191682800217905550604080518381526001600160a01b03858116602083015283169186917f7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0910160405180910390a350505050565b6000611f638888612813565b631de44e3d8214611fb65760405162461bcd60e51b815260206004820152601960248201527f506f7274616c3a20696e636f727265637420636861696e49440000000000000060448201526064016105a1565b6001600160401b03871061200c5760405162461bcd60e51b815260206004820152601860248201527f506f7274616c3a20616d6f756e7420746f6f206c61726765000000000000000060448201526064016105a1565b6000612017886125ba565b606854604051632d0335ab60e01b81526001600160a01b038a8116600483015292935060009290911690632d0335ab90602401602060405180830381865afa158015612067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208b919061375e565b6068549091506001600160a01b0316636f352196888860038181106120b2576120b26137e4565b60200291909101359050631de44e3d8a8a60018181106120d4576120d46137e4565b905060200201356120eb8d6001600160a01b031690565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810184905260a401602060405180830381865afa158015612140573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612164919061375e565b604080516009808252610140820190925291945060009190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612181575050604080516060810190915290915080898960028181106121cf576121cf6137e4565b90506020020135815260200160001515815260200160011515815250816000815181106121fe576121fe6137e4565b602090810291909101015260408051606081019091528089896005818110612228576122286137e4565b9050602002013581526020016000151581526020016001151581525081600181518110612257576122576137e4565b602090810291909101015260408051606081019091528089896006818110612281576122816137e4565b90506020020135815260200160001515815260200160001515815250816002815181106122b0576122b06137e4565b6020908102919091010152604080516060810190915280898960078181106122da576122da6137e4565b9050602002013581526020016000151581526020016001151581525081600381518110612309576123096137e4565b602090810291909101015260408051606081019091528089896000818110612333576123336137e4565b9050602002013581526020016000151581526020016001151581525081600481518110612362576123626137e4565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b815260200160001515815260200160001515815250816005815181106123c4576123c46137e4565b602002602001018190525060405180606001604052806000801b81526020016000151581526020016000151581525081600681518110612406576124066137e4565b602002602001018190525060405180606001604052807f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000060001b81526020016000151581526020016000151581525081600781518110612468576124686137e4565b602090810291909101015260408051606081019091528089896004818110612492576124926137e4565b90506020020135815260200160011515815260200160001515815250816008815181106124c1576124c16137e4565b60200260200101819052506124dd8b848a8a8a868f898c612cc9565b5060008381526069602052604090206001600160a01b03891681558787600081811061250b5761250b6137e4565b60200291909101356001830155506001600160a01b038b166003820155600281018a905560048101805460ff19166001179055878760008161254f5761254f6137e4565b90506020020135896001600160a01b0316857fa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad7438d8f6040516125a49291909182526001600160a01b0316602082015260400190565b60405180910390a4505050979650505050505050565b65ff000000ff00600882811b91821664ff000000ff9390911c92831617601090811b67ff000000ff0000009290921666ff000000ff0000939093169290921790911c17602081811b6bffffffffffffffff000000001691901c63ffffffff161790565b6126256127df565b6001600160a01b03166126406033546001600160a01b031690565b6001600160a01b0316146126665760405162461bcd60e51b81526004016105a190613729565b6000828152606b6020526040808220805460ff191660ff85161790555183917f658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e15012391a25050565b6126b46127df565b6001600160a01b03166126cf6033546001600160a01b031690565b6001600160a01b0316146126f55760405162461bcd60e51b81526004016105a190613729565b6126fe81612c55565b50565b609560846068607b609d6055601560a16040516020016117369897969594939291906139fe565b6127306127df565b6001600160a01b031661274b6033546001600160a01b031690565b6001600160a01b0316146127715760405162461bcd60e51b81526004016105a190613729565b6001600160a01b0381166127d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a1565b6126fe81612c77565b6000601436108015906127fc57506065546001600160a01b031633145b1561280e575060131936013560601c90565b503390565b6001600160a01b038216600081815260666020526040908190205490516370a0823160e01b8152306004820152909183918391906370a08231906024016020604051808303816000875af115801561286f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612893919061375e565b61289d9190613ac2565b10156128eb5760405162461bcd60e51b815260206004820152601c60248201527f506f7274616c3a20696e73756666696369656e742062616c616e63650000000060448201526064016105a1565b6001600160a01b03831660009081526066602052604081208054849290612913908490613ad9565b9091555050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561299a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105a1565b8360ff16601b14806129af57508360ff16601c145b612a065760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105a1565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612a5a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612abd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105a1565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612b229190613a59565b6000604051808303816000865af19150503d8060008114612b5f576040519150601f19603f3d011682016040523d82523d6000602084013e612b64565b606091505b5091509150818015612b8e575080511580612b8e575080806020019051810190612b8e91906137c7565b612bf05760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016105a1565b5050505050565b600054610100900460ff1661170d5760405162461bcd60e51b81526004016105a190613af1565b600054610100900460ff16612c455760405162461bcd60e51b81526004016105a190613af1565b61170d612c506127df565b612c77565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60685460408051606081019091526001600160a01b03909116906331b433f990612d5f90808b8b6001818110612d0157612d016137e4565b905060200201358152602001888152602001602c60fd600160656082608b6012604e604051602001612d3a9897969594939291906139fe565b6040516020818303038152906040528a8f8f604051602001611cd89493929190613b3c565b89896001818110612d7257612d726137e4565b602002919091013590508a8a6003818110612d8f57612d8f6137e4565b90506020020135631de44e3d8689896040518863ffffffff1660e01b8152600401612dc09796959493929190613a75565b6020604051808303816000875af1158015612ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0391906137c7565b50505050505050505050565b828054612e1b906139c3565b90600052602060002090601f016020900481019282612e3d5760008555612e83565b82601f10612e5657805160ff1916838001178555612e83565b82800160010185558215612e83579182015b82811115612e83578251825591602001919060010190612e68565b50612e8f929150612e93565b5090565b5b80821115612e8f5760008155600101612e94565b80356001600160a01b0381168114612ebf57600080fd5b919050565b600060208284031215612ed657600080fd5b612edf82612ea8565b9392505050565b600060208284031215612ef857600080fd5b5035919050565b60008060008084860360e0811215612f1657600080fd5b612f1f86612ea8565b945060208601359350612f3460408701612ea8565b92506080605f1982011215612f4857600080fd5b509295919450926060019150565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612f8e57612f8e612f56565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612fbc57612fbc612f56565b604052919050565b60006001600160401b03821115612fdd57612fdd612f56565b5060051b60200190565b80151581146126fe57600080fd5b600082601f83011261300657600080fd5b81356001600160401b0381111561301f5761301f612f56565b613032601f8201601f1916602001612f94565b81815284602083860101111561304757600080fd5b816020850160208301376000918101602001919091529392505050565b6000602080838503121561307757600080fd5b82356001600160401b038082111561308e57600080fd5b818501915060608083880312156130a457600080fd5b6130ac612f6c565b8335815284840135838111156130c157600080fd5b8401601f810189136130d257600080fd5b80356130e56130e082612fc4565b612f94565b8181529084028201870190878101908b83111561310157600080fd5b928801925b8284101561315d5785848d03121561311e5760008081fd5b613126612f6c565b843581528985013561313781612fe7565b818b015260408581013561314a81612fe7565b9082015282529285019290880190613106565b808986015250505050604084013594508285111561317a57600080fd5b61318688868601612ff5565b6040820152979650505050505050565b60005b838110156131b1578181015183820152602001613199565b838111156131c0576000848401525b50505050565b600081518084526131de816020860160208601613196565b601f01601f19169290920160200192915050565b602081526000612edf60208301846131c6565b600082601f83011261321657600080fd5b813560206132266130e083612fc4565b82815260059290921b8401810191818101908684111561324557600080fd5b8286015b848110156132605780358352918301918301613249565b509695505050505050565b60006080828403121561327d57600080fd5b604051608081018181106001600160401b038211171561329f5761329f612f56565b6040529050806132ae83612ea8565b81526132bc60208401612ea8565b60208201526132cd60408401612ea8565b6040820152606083013560608201525092915050565b80356001600160e01b031981168114612ebf57600080fd5b600080600080600080610120878903121561331557600080fd5b86356001600160401b038082111561332c57600080fd5b818901915089601f83011261334057600080fd5b813560206133506130e083612fc4565b82815260059290921b8401810191818101908d84111561336f57600080fd5b948201945b838610156133945761338586612ea8565b82529482019490820190613374565b9a50508a0135925050808211156133aa57600080fd5b6133b68a838b01613205565b96506133c460408a01612ea8565b95506133d38a60608b0161326b565b94506133e160e08a016132e3565b93506101008901359150808211156133f857600080fd5b5061340589828a01612ff5565b9150509295509295509295565b803560ff81168114612ebf57600080fd5b600080600080600060a0868803121561343b57600080fd5b8535945061344b60208701612ea8565b935061345960408701613412565b94979396509394606081013594506080013592915050565b6000806040838503121561348457600080fd5b61348d83612ea8565b915061349b60208401612ea8565b90509250929050565b600080600080600080600060e0888a0312156134bf57600080fd5b873596506134cf60208901612ea8565b95506134dd60408901612ea8565b9450606088013593506134f260808901613412565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b600381106126fe57634e487b7160e01b600052602160045260246000fd5b600060a08201905086825285602083015284604083015283606083015261356883613524565b8260808301529695505050505050565b60008083601f84011261358a57600080fd5b5081356001600160401b038111156135a157600080fd5b6020830191508360208260051b85010111156135bc57600080fd5b9250929050565b600080600080606085870312156135d957600080fd5b8435935060208501356001600160401b038111156135f657600080fd5b61360287828801613578565b9598909750949560400135949350505050565b6000806000806080858703121561362b57600080fd5b8435935061363b60208601612ea8565b92506040850135915061365060608601612ea8565b905092959194509250565b600080600080600080600060c0888a03121561367657600080fd5b61367f88612ea8565b96506020880135955061369460408901612ea8565b945060608801356001600160401b038111156136af57600080fd5b6136bb8a828b01613578565b90955093505060808801356001600160f81b0319811681146136dc57600080fd5b8092505060a0880135905092959891949750929550565b6000806040838503121561370657600080fd5b8235915061349b60208401613412565b6020810161372383613524565b91905290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561377057600080fd5b5051919050565b60e08152600061378a60e083018a6131c6565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c00191909152919050565b6000602082840312156137d957600080fd5b8151612edf81612fe7565b634e487b7160e01b600052603260045260246000fd5b6000835161380c818460208801613196565b835190830190613820818360208801613196565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561385357613853613829565b5060010190565b6000835161386c818460208801613196565b9190910191825250602001919050565b6000835161388e818460208801613196565b60e09390931b6001600160e01b0319169190920190815260040192915050565b60008151602080840160005b838110156138d6578151875295820195908201906001016138ba565b509495945050505050565b6001600160e01b031986168152845160009060206139058260048601838b01613196565b86519184016004019181880160005b828110156139395781516001600160a01b031685529383019390830190600101613914565b5050865182880193915060005b8181101561396257845183529383019391830191600101613946565b505061396e81876138ae565b9a9950505050505050505050565b60208082526027908201527f506f7274616c3a207265616c20746f6b656e7320616c7265616479207472616e6040820152661cd9995c9c995960ca1b606082015260800190565b600181811c908216806139d757607f821691505b602082108114156139f857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160f81b031960f8998a1b8116825297891b8816600182015295881b8716600287015293871b8616600386015291861b85166004850152851b84166005840152841b8316600683015290921b16600782015260080190565b60008251613a6b818460208701613196565b9190910192915050565b60e081526000613a8860e083018a6131c6565b6020830198909852506040810195909552606085019390935260808401919091526001600160a01b031660a083015260c090910152919050565b600082821015613ad457613ad4613829565b500390565b60008219821115613aec57613aec613829565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008551613b4e818460208a01613196565b6001600160f81b0319959095169190940190815260609290921b6bffffffffffffffffffffffff1916600183015260c01b6001600160c01b0319166015820152601d019291505056fe656d657267656e6379556e6275726e28627974657333322c616464726573732c75696e74382c627974657333322c62797465733332296d696e7453796e746865746963546f6b656e28627974657333322c616464726573732c75696e743235362c6164647265737329a264697066735822122096f5e941ede897df3481412f349820d363678de9a788af70ea721e9c89ec801564736f6c634300080a0033",
}

// PortalABI is the input ABI used to generate the binding from.
// Deprecated: Use PortalMetaData.ABI instead.
var PortalABI = PortalMetaData.ABI

// PortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PortalMetaData.Bin instead.
var PortalBin = PortalMetaData.Bin

// DeployPortal deploys a new Ethereum contract, binding an instance of Portal to it.
func DeployPortal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portal, error) {
	parsed, err := PortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// Portal is an auto generated Go binding around an Ethereum contract.
type Portal struct {
	PortalCaller     // Read-only binding to the contract
	PortalTransactor // Write-only binding to the contract
	PortalFilterer   // Log filterer for contract events
}

// PortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type PortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Portal *PortalTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Portal.gsn = opts
}

// PortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PortalSession struct {
	Contract     *Portal           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PortalCallerSession struct {
	Contract *PortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PortalTransactorSession struct {
	Contract     *PortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type PortalRaw struct {
	Contract *Portal // Generic contract binding to access the raw methods on
}

// PortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PortalCallerRaw struct {
	Contract *PortalCaller // Generic read-only contract binding to access the raw methods on
}

// PortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PortalTransactorRaw struct {
	Contract *PortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPortal creates a new instance of Portal, bound to a specific deployed contract.
func NewPortal(address common.Address, backend bind.ContractBackend) (*Portal, error) {
	contract, err := bindPortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portal{PortalCaller: PortalCaller{contract: contract}, PortalTransactor: PortalTransactor{contract: contract}, PortalFilterer: PortalFilterer{contract: contract}}, nil
}

// NewPortalCaller creates a new read-only instance of Portal, bound to a specific deployed contract.
func NewPortalCaller(address common.Address, caller bind.ContractCaller) (*PortalCaller, error) {
	contract, err := bindPortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PortalCaller{contract: contract}, nil
}

// NewPortalTransactor creates a new write-only instance of Portal, bound to a specific deployed contract.
func NewPortalTransactor(address common.Address, transactor bind.ContractTransactor) (*PortalTransactor, error) {
	contract, err := bindPortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PortalTransactor{contract: contract}, nil
}

// NewPortalFilterer creates a new log filterer instance of Portal, bound to a specific deployed contract.
func NewPortalFilterer(address common.Address, filterer bind.ContractFilterer) (*PortalFilterer, error) {
	contract, err := bindPortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PortalFilterer{contract: contract}, nil
}

// bindPortal binds a generic wrapper to an already deployed contract.
func bindPortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PortalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.PortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.PortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portal *PortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Portal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portal *PortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portal *PortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portal.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Portal *PortalCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Portal.Contract.SOLANACHAINID(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANARENT() ([32]byte, error) {
	return _Portal.Contract.SOLANARENT(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANASYSTEMPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Portal *PortalCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Portal.Contract.SOLANATOKENPROGRAM(&_Portal.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Portal *PortalCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Portal.Contract.BalanceOf(&_Portal.CallOpts, arg0)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Portal *PortalCallerSession) Bridge() (common.Address, error) {
	return _Portal.Contract.Bridge(&_Portal.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Portal *PortalCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Portal.Contract.CastToAddress(&_Portal.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Portal *PortalCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Portal.Contract.CastToBytes32(&_Portal.CallOpts, a)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Portal *PortalCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Portal.Contract.IsTrustedForwarder(&_Portal.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Portal *PortalCallerSession) Owner() (common.Address, error) {
	return _Portal.Contract.Owner(&_Portal.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		From   [32]byte
		To     [32]byte
		Amount *big.Int
		Rtoken [32]byte
		State  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.From = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.To = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Rtoken = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.State = *abi.ConvertType(out[4], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 rtoken, uint8 state)
func (_Portal *PortalCallerSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Rtoken [32]byte
	State  uint8
}, error) {
	return _Portal.Contract.Requests(&_Portal.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Portal *PortalCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Portal.Contract.SerializeSolanaStandaloneInstruction(&_Portal.CallOpts, ix)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCaller) SighashEmergencyUnburn(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashEmergencyUnburn")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashEmergencyUnburn is a free data retrieval call binding the contract method 0xe747c085.
//
// Solidity: function sighashEmergencyUnburn() view returns(bytes)
func (_Portal *PortalCallerSession) SighashEmergencyUnburn() ([]byte, error) {
	return _Portal.Contract.SighashEmergencyUnburn(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCaller) SighashMintSyntheticToken(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "sighashMintSyntheticToken")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// SighashMintSyntheticToken is a free data retrieval call binding the contract method 0x8e2e82c0.
//
// Solidity: function sighashMintSyntheticToken() view returns(bytes)
func (_Portal *PortalCallerSession) SighashMintSyntheticToken() ([]byte, error) {
	return _Portal.Contract.SighashMintSyntheticToken(&_Portal.CallOpts)
}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalCaller) SolAmount64(opts *bind.CallOpts, amount *big.Int) (uint64, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "solAmount64", amount)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalSession) SolAmount64(amount *big.Int) (uint64, error) {
	return _Portal.Contract.SolAmount64(&_Portal.CallOpts, amount)
}

// SolAmount64 is a free data retrieval call binding the contract method 0xc4b553c4.
//
// Solidity: function solAmount64(uint256 amount) pure returns(uint64 solAmount)
func (_Portal *PortalCallerSession) SolAmount64(amount *big.Int) (uint64, error) {
	return _Portal.Contract.SolAmount64(&_Portal.CallOpts, amount)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Portal *PortalCaller) TokenDecimals(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "tokenDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Portal *PortalSession) TokenDecimals(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.TokenDecimals(&_Portal.CallOpts, arg0)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Portal *PortalCallerSession) TokenDecimals(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.TokenDecimals(&_Portal.CallOpts, arg0)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Portal *PortalCallerSession) TrustedForwarder() (common.Address, error) {
	return _Portal.Contract.TrustedForwarder(&_Portal.CallOpts)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCaller) UnsynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "unsynthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// UnsynthesizeStates is a free data retrieval call binding the contract method 0xfab92894.
//
// Solidity: function unsynthesizeStates(bytes32 ) view returns(uint8)
func (_Portal *PortalCallerSession) UnsynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Portal.Contract.UnsynthesizeStates(&_Portal.CallOpts, arg0)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Portal.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Portal *PortalCallerSession) VersionRecipient() (string, error) {
	return _Portal.Contract.VersionRecipient(&_Portal.CallOpts)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalTransactor) ApproveRepresentationRequest(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "approveRepresentationRequest", _rtoken, _decimals)
}
func (_Portal *PortalTransactor) ApproveRepresentationRequestOverGsn(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "approveRepresentationRequest", _rtoken, _decimals)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalSession) ApproveRepresentationRequest(_rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken, _decimals)
}
func (_Portal *PortalSession) ApproveRepresentationRequestOverGsn(_rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken, _decimals)
}

// ApproveRepresentationRequest is a paid mutator transaction binding the contract method 0xd1ec85ed.
//
// Solidity: function approveRepresentationRequest(bytes32 _rtoken, uint8 _decimals) returns()
func (_Portal *PortalTransactorSession) ApproveRepresentationRequest(_rtoken [32]byte, _decimals uint8) (*types.Transaction, error) {
	return _Portal.Contract.ApproveRepresentationRequest(&_Portal.TransactOpts, _rtoken, _decimals)
}
func (_Portal *PortalTransactorSession) ApproveRepresentationRequestOverGsn(_rtoken [32]byte, _decimals uint8) (common.Hash, error) {
	return _Portal.Contract.ApproveRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken, _decimals)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "changeBridge", _bridge)
}
func (_Portal *PortalTransactor) ChangeBridgeOverGsn(opts *bind.TransactOpts, _bridge common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "changeBridge", _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}
func (_Portal *PortalSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridgeOverGsn(&_Portal.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Portal *PortalTransactorSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Portal.Contract.ChangeBridge(&_Portal.TransactOpts, _bridge)
}
func (_Portal *PortalTransactorSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Portal.Contract.ChangeBridgeOverGsn(&_Portal.TransactOpts, _bridge)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactor) CreateRepresentationRequest(opts *bind.TransactOpts, _rtoken common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "createRepresentationRequest", _rtoken)
}
func (_Portal *PortalTransactor) CreateRepresentationRequestOverGsn(opts *bind.TransactOpts, _rtoken common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "createRepresentationRequest", _rtoken)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalSession) CreateRepresentationRequest(_rtoken common.Address) (*types.Transaction, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}
func (_Portal *PortalSession) CreateRepresentationRequestOverGsn(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken)
}

// CreateRepresentationRequest is a paid mutator transaction binding the contract method 0x99677c21.
//
// Solidity: function createRepresentationRequest(address _rtoken) returns()
func (_Portal *PortalTransactorSession) CreateRepresentationRequest(_rtoken common.Address) (*types.Transaction, error) {
	return _Portal.Contract.CreateRepresentationRequest(&_Portal.TransactOpts, _rtoken)
}
func (_Portal *PortalTransactorSession) CreateRepresentationRequestOverGsn(_rtoken common.Address) (common.Hash, error) {
	return _Portal.Contract.CreateRepresentationRequestOverGsn(&_Portal.TransactOpts, _rtoken)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnburnRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalTransactor) EmergencyUnburnRequestOverGsn(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalSession) EmergencyUnburnRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestOverGsn(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequest is a paid mutator transaction binding the contract method 0x43961668.
//
// Solidity: function emergencyUnburnRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequest(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestOverGsn(&_Portal.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalTransactor) EmergencyUnburnRequestToSolana(opts *bind.TransactOpts, _txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnburnRequestToSolana", _txID, _pubkeys, _chainId)
}
func (_Portal *PortalTransactor) EmergencyUnburnRequestToSolanaOverGsn(opts *bind.TransactOpts, _txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnburnRequestToSolana", _txID, _pubkeys, _chainId)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}
func (_Portal *PortalSession) EmergencyUnburnRequestToSolanaOverGsn(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolanaOverGsn(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}

// EmergencyUnburnRequestToSolana is a paid mutator transaction binding the contract method 0xa429bb07.
//
// Solidity: function emergencyUnburnRequestToSolana(bytes32 _txID, bytes32[] _pubkeys, uint256 _chainId) returns()
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestToSolana(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolana(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}
func (_Portal *PortalTransactorSession) EmergencyUnburnRequestToSolanaOverGsn(_txID [32]byte, _pubkeys [][32]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnburnRequestToSolanaOverGsn(&_Portal.TransactOpts, _txID, _pubkeys, _chainId)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactor) EmergencyUnsynthesize(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "emergencyUnsynthesize", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalTransactor) EmergencyUnsynthesizeOverGsn(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "emergencyUnsynthesize", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalSession) EmergencyUnsynthesize(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalSession) EmergencyUnsynthesizeOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnsynthesize is a paid mutator transaction binding the contract method 0x33feeaff.
//
// Solidity: function emergencyUnsynthesize(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Portal *PortalTransactorSession) EmergencyUnsynthesize(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Portal.Contract.EmergencyUnsynthesize(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Portal *PortalTransactorSession) EmergencyUnsynthesizeOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Portal.Contract.EmergencyUnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalTransactor) InitializeFunc(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "initializeFunc", _bridge, _trustedForwarder)
}
func (_Portal *PortalTransactor) InitializeFuncOverGsn(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "initializeFunc", _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}
func (_Portal *PortalSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.InitializeFuncOverGsn(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Portal *PortalTransactorSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.InitializeFunc(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}
func (_Portal *PortalTransactorSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.InitializeFuncOverGsn(&_Portal.TransactOpts, _bridge, _trustedForwarder)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "renounceOwnership")
}
func (_Portal *PortalTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalSession) RenounceOwnership() (*types.Transaction, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}
func (_Portal *PortalSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnershipOverGsn(&_Portal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Portal *PortalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Portal.Contract.RenounceOwnership(&_Portal.TransactOpts)
}
func (_Portal *PortalTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Portal.Contract.RenounceOwnershipOverGsn(&_Portal.TransactOpts)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_Portal *PortalTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}
func (_Portal *PortalSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarderOverGsn(&_Portal.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Portal *PortalTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Portal.Contract.SetTrustedForwarder(&_Portal.TransactOpts, _forwarder)
}
func (_Portal *PortalTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Portal.Contract.SetTrustedForwarderOverGsn(&_Portal.TransactOpts, _forwarder)
}

// Synthesize is a paid mutator transaction binding the contract method 0x294fe4f8.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, (address,address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalTransactor) Synthesize(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "synthesize", _token, _amount, _from, _synthParams)
}
func (_Portal *PortalTransactor) SynthesizeOverGsn(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesize", _token, _amount, _from, _synthParams)
}

// Synthesize is a paid mutator transaction binding the contract method 0x294fe4f8.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, (address,address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalSession) Synthesize(_token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _from, _synthParams)
}
func (_Portal *PortalSession) SynthesizeOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return _Portal.Contract.SynthesizeOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _synthParams)
}

// Synthesize is a paid mutator transaction binding the contract method 0x294fe4f8.
//
// Solidity: function synthesize(address _token, uint256 _amount, address _from, (address,address,address,uint256) _synthParams) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) Synthesize(_token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (*types.Transaction, error) {
	return _Portal.Contract.Synthesize(&_Portal.TransactOpts, _token, _amount, _from, _synthParams)
}
func (_Portal *PortalTransactorSession) SynthesizeOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _synthParams PortalSynthParams) (common.Hash, error) {
	return _Portal.Contract.SynthesizeOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _synthParams)
}

// SynthesizeBatchWithDataTransit is a paid mutator transaction binding the contract method 0x2df933dc.
//
// Solidity: function synthesizeBatchWithDataTransit(address[] _tokens, uint256[] _amounts, address _from, (address,address,address,uint256) _synthParams, bytes4 _selector, bytes _transitData) returns()
func (_Portal *PortalTransactor) SynthesizeBatchWithDataTransit(opts *bind.TransactOpts, _tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "synthesizeBatchWithDataTransit", _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}
func (_Portal *PortalTransactor) SynthesizeBatchWithDataTransitOverGsn(opts *bind.TransactOpts, _tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesizeBatchWithDataTransit", _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}

// SynthesizeBatchWithDataTransit is a paid mutator transaction binding the contract method 0x2df933dc.
//
// Solidity: function synthesizeBatchWithDataTransit(address[] _tokens, uint256[] _amounts, address _from, (address,address,address,uint256) _synthParams, bytes4 _selector, bytes _transitData) returns()
func (_Portal *PortalSession) SynthesizeBatchWithDataTransit(_tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeBatchWithDataTransit(&_Portal.TransactOpts, _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}
func (_Portal *PortalSession) SynthesizeBatchWithDataTransitOverGsn(_tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (common.Hash, error) {
	return _Portal.Contract.SynthesizeBatchWithDataTransitOverGsn(&_Portal.TransactOpts, _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}

// SynthesizeBatchWithDataTransit is a paid mutator transaction binding the contract method 0x2df933dc.
//
// Solidity: function synthesizeBatchWithDataTransit(address[] _tokens, uint256[] _amounts, address _from, (address,address,address,uint256) _synthParams, bytes4 _selector, bytes _transitData) returns()
func (_Portal *PortalTransactorSession) SynthesizeBatchWithDataTransit(_tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeBatchWithDataTransit(&_Portal.TransactOpts, _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}
func (_Portal *PortalTransactorSession) SynthesizeBatchWithDataTransitOverGsn(_tokens []common.Address, _amounts []*big.Int, _from common.Address, _synthParams PortalSynthParams, _selector [4]byte, _transitData []byte) (common.Hash, error) {
	return _Portal.Contract.SynthesizeBatchWithDataTransitOverGsn(&_Portal.TransactOpts, _tokens, _amounts, _from, _synthParams, _selector, _transitData)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactor) SynthesizeToSolana(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "synthesizeToSolana", _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalTransactor) SynthesizeToSolanaOverGsn(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "synthesizeToSolana", _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalSession) SynthesizeToSolanaOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolanaOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// SynthesizeToSolana is a paid mutator transaction binding the contract method 0xac5de43c.
//
// Solidity: function synthesizeToSolana(address _token, uint256 _amount, address _from, bytes32[] _pubkeys, bytes1 _txStateBump, uint256 _chainId) returns(bytes32 txID)
func (_Portal *PortalTransactorSession) SynthesizeToSolana(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (*types.Transaction, error) {
	return _Portal.Contract.SynthesizeToSolana(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}
func (_Portal *PortalTransactorSession) SynthesizeToSolanaOverGsn(_token common.Address, _amount *big.Int, _from common.Address, _pubkeys [][32]byte, _txStateBump [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Portal.Contract.SynthesizeToSolanaOverGsn(&_Portal.TransactOpts, _token, _amount, _from, _pubkeys, _txStateBump, _chainId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_Portal *PortalTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}
func (_Portal *PortalSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnershipOverGsn(&_Portal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Portal *PortalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Portal.Contract.TransferOwnership(&_Portal.TransactOpts, newOwner)
}
func (_Portal *PortalTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Portal.Contract.TransferOwnershipOverGsn(&_Portal.TransactOpts, newOwner)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactor) Unsynthesize(opts *bind.TransactOpts, _txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.contract.Transact(opts, "unsynthesize", _txID, _token, _amount, _to)
}
func (_Portal *PortalTransactor) UnsynthesizeOverGsn(opts *bind.TransactOpts, _txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return GsnExecutor(_Portal.gsn, PortalMetaData.ABI, "unsynthesize", _txID, _token, _amount, _to)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}
func (_Portal *PortalSession) UnsynthesizeOverGsn(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.UnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// Unsynthesize is a paid mutator transaction binding the contract method 0xa6037a29.
//
// Solidity: function unsynthesize(bytes32 _txID, address _token, uint256 _amount, address _to) returns()
func (_Portal *PortalTransactorSession) Unsynthesize(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Portal.Contract.Unsynthesize(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}
func (_Portal *PortalTransactorSession) UnsynthesizeOverGsn(_txID [32]byte, _token common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Portal.Contract.UnsynthesizeOverGsn(&_Portal.TransactOpts, _txID, _token, _amount, _to)
}

// PortalApprovedRepresentationRequestIterator is returned from FilterApprovedRepresentationRequest and is used to iterate over the raw logs and unpacked data for ApprovedRepresentationRequest events raised by the Portal contract.
type PortalApprovedRepresentationRequestIterator struct {
	Event *PortalApprovedRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalApprovedRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalApprovedRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalApprovedRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalApprovedRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalApprovedRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalApprovedRepresentationRequest represents a ApprovedRepresentationRequest event raised by the Portal contract.
type PortalApprovedRepresentationRequest struct {
	Rtoken [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterApprovedRepresentationRequest is a free log retrieval operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) FilterApprovedRepresentationRequest(opts *bind.FilterOpts, rtoken [][32]byte) (*PortalApprovedRepresentationRequestIterator, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "ApprovedRepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalApprovedRepresentationRequestIterator{contract: _Portal.contract, event: "ApprovedRepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchApprovedRepresentationRequest is a free log subscription operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) WatchApprovedRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalApprovedRepresentationRequest, rtoken [][32]byte) (event.Subscription, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "ApprovedRepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalApprovedRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovedRepresentationRequest is a log parse operation binding the contract event 0x658cfede3da32aa75ff0b7b1221eedb868592cc0132b17b1f72fdb6e1e150123.
//
// Solidity: event ApprovedRepresentationRequest(bytes32 indexed rtoken)
func (_Portal *PortalFilterer) ParseApprovedRepresentationRequest(log types.Log) (*PortalApprovedRepresentationRequest, error) {
	event := new(PortalApprovedRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "ApprovedRepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalBurnCompletedIterator is returned from FilterBurnCompleted and is used to iterate over the raw logs and unpacked data for BurnCompleted events raised by the Portal contract.
type PortalBurnCompletedIterator struct {
	Event *PortalBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalBurnCompleted represents a BurnCompleted event raised by the Portal contract.
type PortalBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnCompleted is a free log retrieval operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterBurnCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalBurnCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "BurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalBurnCompletedIterator{contract: _Portal.contract, event: "BurnCompleted", logs: logs, sub: sub}, nil
}

// WatchBurnCompleted is a free log subscription operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchBurnCompleted(opts *bind.WatchOpts, sink chan<- *PortalBurnCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "BurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalBurnCompleted)
				if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnCompleted is a log parse operation binding the contract event 0x7d38b66fe45f4596a8e0f6d416747ea22ad1ef15891e9d7c8f848a044be974e0.
//
// Solidity: event BurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseBurnCompleted(log types.Log) (*PortalBurnCompleted, error) {
	event := new(PortalBurnCompleted)
	if err := _Portal.contract.UnpackLog(event, "BurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Portal contract.
type PortalOwnershipTransferredIterator struct {
	Event *PortalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalOwnershipTransferred represents a OwnershipTransferred event raised by the Portal contract.
type PortalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PortalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PortalOwnershipTransferredIterator{contract: _Portal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PortalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalOwnershipTransferred)
				if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Portal *PortalFilterer) ParseOwnershipTransferred(log types.Log) (*PortalOwnershipTransferred, error) {
	event := new(PortalOwnershipTransferred)
	if err := _Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRepresentationRequestIterator is returned from FilterRepresentationRequest and is used to iterate over the raw logs and unpacked data for RepresentationRequest events raised by the Portal contract.
type PortalRepresentationRequestIterator struct {
	Event *PortalRepresentationRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRepresentationRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRepresentationRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRepresentationRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRepresentationRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRepresentationRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRepresentationRequest represents a RepresentationRequest event raised by the Portal contract.
type PortalRepresentationRequest struct {
	Rtoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRepresentationRequest is a free log retrieval operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) FilterRepresentationRequest(opts *bind.FilterOpts, rtoken []common.Address) (*PortalRepresentationRequestIterator, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return &PortalRepresentationRequestIterator{contract: _Portal.contract, event: "RepresentationRequest", logs: logs, sub: sub}, nil
}

// WatchRepresentationRequest is a free log subscription operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) WatchRepresentationRequest(opts *bind.WatchOpts, sink chan<- *PortalRepresentationRequest, rtoken []common.Address) (event.Subscription, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RepresentationRequest", rtokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRepresentationRequest)
				if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepresentationRequest is a log parse operation binding the contract event 0x670c5a48958f3e8d1095619359e6500de241ef38d1dd27cc03ad1582af851470.
//
// Solidity: event RepresentationRequest(address indexed rtoken)
func (_Portal *PortalFilterer) ParseRepresentationRequest(log types.Log) (*PortalRepresentationRequest, error) {
	event := new(PortalRepresentationRequest)
	if err := _Portal.contract.UnpackLog(event, "RepresentationRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertBurnRequestIterator is returned from FilterRevertBurnRequest and is used to iterate over the raw logs and unpacked data for RevertBurnRequest events raised by the Portal contract.
type PortalRevertBurnRequestIterator struct {
	Event *PortalRevertBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertBurnRequest represents a RevertBurnRequest event raised by the Portal contract.
type PortalRevertBurnRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnRequest is a free log retrieval operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) FilterRevertBurnRequest(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalRevertBurnRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertBurnRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertBurnRequestIterator{contract: _Portal.contract, event: "RevertBurnRequest", logs: logs, sub: sub}, nil
}

// WatchRevertBurnRequest is a free log subscription operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) WatchRevertBurnRequest(opts *bind.WatchOpts, sink chan<- *PortalRevertBurnRequest, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertBurnRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertBurnRequest)
				if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnRequest is a log parse operation binding the contract event 0x40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b.
//
// Solidity: event RevertBurnRequest(bytes32 indexed id, address indexed to)
func (_Portal *PortalFilterer) ParseRevertBurnRequest(log types.Log) (*PortalRevertBurnRequest, error) {
	event := new(PortalRevertBurnRequest)
	if err := _Portal.contract.UnpackLog(event, "RevertBurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalRevertSynthesizeCompletedIterator is returned from FilterRevertSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for RevertSynthesizeCompleted events raised by the Portal contract.
type PortalRevertSynthesizeCompletedIterator struct {
	Event *PortalRevertSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalRevertSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalRevertSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalRevertSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalRevertSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalRevertSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalRevertSynthesizeCompleted represents a RevertSynthesizeCompleted event raised by the Portal contract.
type PortalRevertSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeCompleted is a free log retrieval operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterRevertSynthesizeCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*PortalRevertSynthesizeCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "RevertSynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalRevertSynthesizeCompletedIterator{contract: _Portal.contract, event: "RevertSynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeCompleted is a free log subscription operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchRevertSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *PortalRevertSynthesizeCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "RevertSynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalRevertSynthesizeCompleted)
				if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeCompleted is a log parse operation binding the contract event 0x944f1d3ef1c50472b370611627295b06b64eca841d2de116bb7634a08a097ca9.
//
// Solidity: event RevertSynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseRevertSynthesizeCompleted(log types.Log) (*PortalRevertSynthesizeCompleted, error) {
	event := new(PortalRevertSynthesizeCompleted)
	if err := _Portal.contract.UnpackLog(event, "RevertSynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestIterator is returned from FilterSynthesizeRequest and is used to iterate over the raw logs and unpacked data for SynthesizeRequest events raised by the Portal contract.
type PortalSynthesizeRequestIterator struct {
	Event *PortalSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequest represents a SynthesizeRequest event raised by the Portal contract.
type PortalSynthesizeRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequest is a free log retrieval operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterSynthesizeRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to []common.Address) (*PortalSynthesizeRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestIterator{contract: _Portal.contract, event: "SynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequest is a free log subscription operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequest, id [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequest)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequest is a log parse operation binding the contract event 0x79856ea8bc3d8f5d0a803c32f56f54884a196b09482b11134b6f2a6f6276a0b9.
//
// Solidity: event SynthesizeRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseSynthesizeRequest(log types.Log) (*PortalSynthesizeRequest, error) {
	event := new(PortalSynthesizeRequest)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PortalSynthesizeRequestSolanaIterator is returned from FilterSynthesizeRequestSolana and is used to iterate over the raw logs and unpacked data for SynthesizeRequestSolana events raised by the Portal contract.
type PortalSynthesizeRequestSolanaIterator struct {
	Event *PortalSynthesizeRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PortalSynthesizeRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PortalSynthesizeRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PortalSynthesizeRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PortalSynthesizeRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PortalSynthesizeRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PortalSynthesizeRequestSolana represents a SynthesizeRequestSolana event raised by the Portal contract.
type PortalSynthesizeRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeRequestSolana is a free log retrieval operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) FilterSynthesizeRequestSolana(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to [][32]byte) (*PortalSynthesizeRequestSolanaIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.FilterLogs(opts, "SynthesizeRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PortalSynthesizeRequestSolanaIterator{contract: _Portal.contract, event: "SynthesizeRequestSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeRequestSolana is a free log subscription operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) WatchSynthesizeRequestSolana(opts *bind.WatchOpts, sink chan<- *PortalSynthesizeRequestSolana, id [][32]byte, from []common.Address, to [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Portal.contract.WatchLogs(opts, "SynthesizeRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PortalSynthesizeRequestSolana)
				if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeRequestSolana is a log parse operation binding the contract event 0xa7d748bdc46fa4109fe7fb625818ed0b80249562ec2673dd15629a870bfad743.
//
// Solidity: event SynthesizeRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Portal *PortalFilterer) ParseSynthesizeRequestSolana(log types.Log) (*PortalSynthesizeRequestSolana, error) {
	event := new(PortalSynthesizeRequestSolana)
	if err := _Portal.contract.UnpackLog(event, "SynthesizeRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
