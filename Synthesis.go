// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SynthesisMetaData contains all meta data concerning the Synthesis contract.
var SynthesisMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BurnRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"}],\"name\":\"CreatedRepresentation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RevertBurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"SynthesizeCompletedSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticTokenToSolana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_out\",\"type\":\"bytes\"}],\"name\":\"burnSyntheticToken_transit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createRepresentation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"name\":\"emergencyUnsyntesizeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_bumpSynthesizeRequest\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnsyntesizeRequestToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListRepresentation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"}],\"name\":\"getRepresentation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"initializeFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenReal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenReal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintSyntheticTokenToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"representationReal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"representationSynt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chain2address\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"stoken\",\"type\":\"address\"},{\"internalType\":\"enumSynthesis.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxyCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synthesizeStates\",\"outputs\":[{\"internalType\":\"enumSynthesis.SynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061577e806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620002555760003560e01c8063715018a61162000149578063d23fd79611620000c7578063e9a714811162000086578063e9a714811462000628578063ec556889146200063f578063edff2c821462000653578063f2fde38b146200067b578063fb47d165146200069257600080fd5b8063d23fd79614620005a7578063d32a991e14620005dc578063da74222814620005f3578063e78cea92146200060a578063e834e4ad146200061e57600080fd5b8063926ad0fe1162000114578063926ad0fe14620004ca5780639d86698514620004e1578063a5ec5266146200054a578063bb5f3cca1462000564578063bca73823146200057b57600080fd5b8063715018a614620004795780637c6a151b14620004835780637da0a87714620004a65780638da5cb5b14620004b857600080fd5b80633410c15f11620001d7578063486ff0cd11620001a2578063486ff0cd14620003d357806352dd22ee14620003dd578063572b6c0514620003e657806360341612146200041c5780636f2258b3146200043357600080fd5b80633410c15f146200037e5780633e7e25c1146200039557806342a3f4f014620003b2578063456eb8b814620003c957600080fd5b8063104ccf9a1162000224578063104ccf9a14620002d65780632036f36e14620002ed578063286452f414620003195780632ab8c8b014620003305780632b1106e3146200035657600080fd5b8063067bd07a146200025a5780630877441014620002795780630e03e49014620002925780630ead619214620002bf575b600080fd5b62000266631de44e3d81565b6040519081526020015b60405180910390f35b620002906200028a366004620031a6565b620006a9565b005b620002a6620002a3366004620031cb565b90565b6040516001600160a01b03909116815260200162000270565b62000290620002d0366004620031e5565b62000723565b62000290620002e736600462003273565b6200089a565b620002a6620002fe366004620031cb565b6067602052600090815260409020546001600160a01b031681565b620002906200032a366004620031a6565b62000add565b6200034762000341366004620033f0565b62000b4e565b604051620002709190620035aa565b620002667f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000081565b620002906200038f366004620035bf565b62000d56565b62000266620003a6366004620031a6565b6001600160a01b031690565b62000266620003c33660046200363f565b62000e80565b620003476200176b565b62000347620017a6565b62000266600081565b6200040b620003f7366004620031a6565b6065546001600160a01b0391821691161490565b604051901515815260200162000270565b620002666200042d366004620036aa565b6200183c565b620002666040516bffffffffffffffffffffffff193060601b16602082015242603482015260009060540160405160208183030381529060405280519060200120905090565b6200029062001be9565b6200026662000494366004620031a6565b60666020526000908152604090205481565b6065546001600160a01b0316620002a6565b6033546001600160a01b0316620002a6565b62000290620004db36600462003719565b62001c46565b62000536620004f2366004620031cb565b60696020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b03811690600160a01b900460ff1686565b604051620002709695949392919062003797565b6200055462001f2e565b60405162000270929190620037de565b6200029062000575366004620031cb565b62002078565b620002a66200058c366004620031cb565b6000908152606760205260409020546001600160a01b031690565b620005cd620005b8366004620031cb565b606a6020526000908152604090205460ff1681565b60405162000270919062003866565b62000290620005ed3660046200387b565b62002247565b6200029062000604366004620031a6565b620023db565b606b54620002a6906001600160a01b031681565b6200034762002438565b6200026662000639366004620038bb565b62002461565b606c54620002a6906001600160a01b031681565b620002667f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a981565b620002906200068c366004620031a6565b6200274e565b62000290620006a336600462003960565b6200280f565b620006b362002eb3565b6001600160a01b0316620006cf6033546001600160a01b031690565b6001600160a01b031614620007015760405162461bcd60e51b8152600401620006f890620039cf565b60405180910390fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b606b546001600160a01b03163314620007785760405162461bcd60e51b815260206004820152601660248201527553796e7468657369733a20627269646765206f6e6c7960501b6044820152606401620006f8565b6000848152606a602052604081205460ff1660028111156200079e576200079e62003762565b14620007be5760405162461bcd60e51b8152600401620006f89062003a04565b600083815260676020526040908190205490516340c10f1960e01b81526001600160a01b03838116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b1580156200081a57600080fd5b505af11580156200082f573d6000803e3d6000fd5b5050506000858152606a6020908152604091829020805460ff1916600117905581518581529081018690526001600160a01b038416925086917f830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e7955291015b60405180910390a350505050565b620008a462002eb3565b6001600160a01b0316620008c06033546001600160a01b031690565b6001600160a01b031614620008e95760405162461bcd60e51b8152600401620006f890620039cf565b6000858152606760205260409020546001600160a01b031615620009215760405162461bcd60e51b8152600401620006f89062003a79565b6001600160a01b038516600090815260666020526040902054156200095a5760405162461bcd60e51b8152600401620006f89062003a79565b600062000a3e6000876040516020016200097691815260200190565b60405160208183030381529060405280519060200120604051806020016200099e90620030d5565b601f1982820381018352601f909101166040819052620009c5908a908a9060200162003ac1565b6040516020818303038152906040528787604051602001620009e992919062003ac1565b60408051601f198184030181529082905262000a09929160200162003ade565b60408051601f198184030181529082905262000a29929160200162003b10565b60405160208183030381529060405262002ee9565b600087815260676020908152604080832080546001600160a01b0319166001600160a01b03861690811790915580845260669092528083208a9055606880546001810182559084527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097753018a9055519293509188917f0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac0291a3505050505050565b62000ae762002eb3565b6001600160a01b031662000b036033546001600160a01b031690565b6001600160a01b03161462000b2c5760405162461bcd60e51b8152600401620006f890620039cf565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b60208082015151604051606092600883811c62ff00ff1663ff00ff009490911b9390931692909217601081811c91901b179160009162000ba39184910160e09190911b6001600160e01b031916815260040190565b6040516020818303038152906040529050606060005b85602001515181101562000cb1578560200151818151811062000be05762000be062003b43565b6020026020010151600001518660200151828151811062000c055762000c0562003b43565b6020026020010151602001518760200151838151811062000c2a5762000c2a62003b43565b60200260200101516040015160405160200162000c649392919092835290151560f890811b6020840152901515901b602182015260220190565b6040516020818303038152906040529150828260405160200162000c8a92919062003b10565b6040516020818303038152906040529250808062000ca89062003b59565b91505062000bb9565b50845160405162000cc791849160200162003b83565b60408051601f198184030181528282529087015151600881811c62ff00ff1663ff00ff009290911b9190911617601081811c91901b179450925062000d13908390859060200162003ba7565b604051602081830303815290604052915081856040015160405160200162000d3d92919062003b10565b60408051601f1981840301815291905295945050505050565b600054610100900460ff1662000d735760005460ff161562000d77565b303b155b62000ddc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620006f8565b600054610100900460ff1615801562000dff576000805461ffff19166101011790555b62000e0962002ff9565b62000e1362003023565b60408051808201909152600580825264322e322e3360d81b602090920191825262000e4191606d91620030e3565b50606b80546001600160a01b0319166001600160a01b03851617905562000e688262003061565b801562000e7b576000805461ff00191690555b505050565b6000631de44e3d821462000ed75760405162461bcd60e51b815260206004820152601c60248201527f53796e7468657369733a20696e636f727265637420636861696e4964000000006044820152606401620006f8565b67ffffffffffffffff831062000f305760405162461bcd60e51b815260206004820152601b60248201527f53796e7468657369733a20616d6f756e7420746f6f206c6172676500000000006044820152606401620006f8565b65ff000000ff00600884811b91821664ff000000ff9186901c91821617601090811b67ff000000ff0000009390931666ff000000ff00009290921691909117901c17602081811b6bffffffffffffffff000000001691901c63ffffffff16176001600160a01b038716639dc29fac62000fa862002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801562000ff157600080fd5b505af115801562001006573d6000803e3d6000fd5b5050606b54600092506001600160a01b03169050632d0335ab6200102962002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156200106e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001094919062003bdb565b606b549091506001600160a01b0316636f35219688886002818110620010be57620010be62003b43565b60200291909101359050631de44e3d8a8a6000818110620010e357620010e362003b43565b90506020020135620010f8620003a662002eb3565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810184905260a401602060405180830381865afa1580156200114e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001174919062003bdb565b604080516009808252610140820190925291945060009190816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816200119157505060408051606081019091529091508089896001818110620011e357620011e362003b43565b905060200201358152602001600015158152602001600015158152508160008151811062001215576200121562003b43565b60209081029190910101526040805160608101909152808989600781811062001242576200124262003b43565b905060200201358152602001600015158152602001600015158152508160018151811062001274576200127462003b43565b602090810291909101015260408051606081019091528089896004818110620012a157620012a162003b43565b9050602002013581526020016000151581526020016001151581525081600281518110620012d357620012d362003b43565b60209081029190910101526040805160608101909152808989600581811062001300576200130062003b43565b905060200201358152602001600015158152602001600115158152508160038151811062001332576200133262003b43565b6020908102919091010152604080516060810190915280898960068181106200135f576200135f62003b43565b905060200201358152602001600015158152602001600115158152508160048151811062001391576200139162003b43565b602090810291909101015260408051606081019091528089896003818110620013be57620013be62003b43565b9050602002013581526020016001151581526020016000151581525081600581518110620013f057620013f062003b43565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160068151811062001455576200145562003b43565b602002602001018190525060405180606001604052807f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000060001b81526020016000151581526020016000151581525081600781518110620014ba57620014ba62003b43565b602002602001018190525060405180606001604052806000801b81526020016000151581526020016000151581525081600881518110620014ff57620014ff62003b43565b6020908102919091010152606b5460408051606081019091526001600160a01b03909116906331b433f990620015ba90808c8c600081811062001546576200154662003b43565b905060200201358152602001858152602001607360ea606f606d608360a7602560466040516020016200158198979695949392919062003bf5565b60408051601f1981840301815290829052620015a2918a9060200162003c50565b60405160208183030381529060405281525062000b4e565b8a8a6000818110620015d057620015d062003b43565b602002919091013590508b8b6002818110620015f057620015f062003b43565b90506020020135631de44e3d896200160762002eb3565b896040518863ffffffff1660e01b81526004016200162c979695949392919062003c84565b6020604051808303816000875af11580156200164c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001672919062003cd3565b5060008481526069602052604090206200168f620003a662002eb3565b815588886006818110620016a757620016a762003b43565b602002919091013560018301555060048101805460028301899055600160a01b6001600160a81b03199091166001600160a01b038d161717905588886006818110620016f757620016f762003b43565b905060200201356200170862002eb3565b6001600160a01b0316867fc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c68a8e604051620017569291909182526001600160a01b0316602082015260400190565b60405180910390a45050505095945050505050565b607360ea606f606d608360a7602560466040516020016200179498979695949392919062003bf5565b60405160208183030381529060405281565b606d8054620017b59062003cf3565b80601f0160208091040260200160405190810160405280929190818152602001828054620017e39062003cf3565b8015620018345780601f10620018085761010080835404028352916020019162001834565b820191906000526020600020905b8154815290600101906020018083116200181657829003601f168201915b505050505081565b6000866001600160a01b0316639dc29fac6200185762002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101899052604401600060405180830381600087803b158015620018a057600080fd5b505af1158015620018b5573d6000803e3d6000fd5b5050606b54600092506001600160a01b03169050632d0335ab620018d862002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156200191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001943919062003bdb565b606b549091506001600160a01b0316636f35219662001968866001600160a01b031690565b856001600160a01b03891662001981620003a662002eb3565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810184905260a401602060405180830381865afa158015620019d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019fd919062003bdb565b915060006040518060600160405280602d81526020016200571c602d913980516020918201206001600160a01b03808c1660009081526066909352604092839020549251602481018790526044810193909352606483018b9052891660848301529060a40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152606b549091506001600160a01b031663329ef45f828888888862001ab762002eb3565b896040518863ffffffff1660e01b815260040162001adc979695949392919062003d30565b6020604051808303816000875af115801562001afc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b22919062003cd3565b50600083815260696020526040902062001b3f620003a662002eb3565b81556001600160a01b0388811660018301819055600483018054600285018d9055928d166001600160a81b031990931692909217600160a01b1790915562001b8662002eb3565b6001600160a01b0316857fc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f758c8e60405162001bd49291909182526001600160a01b0316602082015260400190565b60405180910390a45050509695505050505050565b62001bf362002eb3565b6001600160a01b031662001c0f6033546001600160a01b031690565b6001600160a01b03161462001c385760405162461bcd60e51b8152600401620006f890620039cf565b62001c44600062003083565b565b60016000858152606a602052604090205460ff16600281111562001c6e5762001c6e62003762565b141562001c8f5760405162461bcd60e51b8152600401620006f89062003d82565b6000848152606a60209081526040808320805460ff1916600217905580518082018252601e81527f656d657267656e6379556e73796e74686573697a652862797465733332290000908301528051602480820189905282518083039091018152604490910190915290810180516001600160e01b031663fc89586960e01b179052606b549091906001600160a01b0316632d0335ab62001d2e62002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562001d73573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d99919062003bdb565b606b549091506000906001600160a01b0316636f35219662001dc1876001600160a01b031690565b866001600160a01b038a1662001dda620003a662002eb3565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401602060405180830381865afa15801562001e30573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e56919062003bdb565b606b549091506001600160a01b031663329ef45f848888888662001e7962002eb3565b896040518863ffffffff1660e01b815260040162001e9e979695949392919062003d30565b6020604051808303816000875af115801562001ebe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ee4919062003cd3565b5062001eef62002eb3565b6001600160a01b0316817f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050565b606854606090819060008167ffffffffffffffff81111562001f545762001f54620032f4565b60405190808252806020026020018201604052801562001f7e578160200160208202803683370190505b50905060005b828110156200201657606760006068838154811062001fa75762001fa762003b43565b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b031682828151811062001fe95762001fe962003b43565b6001600160a01b0390921660209283029190910190910152806200200d8162003b59565b91505062001f84565b50606881818054806020026020016040519081016040528092919081815260200182805480156200206757602002820191906000526020600020905b81548152602001906001019080831162002052575b505050505091509350935050509091565b606b546001600160a01b03163314620020cd5760405162461bcd60e51b815260206004820152601660248201527553796e7468657369733a20627269646765206f6e6c7960501b6044820152606401620006f8565b600081815260696020526040902060016004820154600160a01b900460ff16600281111562002100576200210062003762565b14620021665760405162461bcd60e51b815260206004820152602e60248201527f53796e7468657369733a207374617465206e6f74206f70656e206f722074782060448201526d191bd95cc81b9bdd08195e1a5cdd60921b6064820152608401620006f8565b60048181018054600160a11b60ff60a01b19821617909155825460028401546040516340c10f1960e01b81526001600160a01b0392831694810194909452602484015216906340c10f1990604401600060405180830381600087803b158015620021cf57600080fd5b505af1158015620021e4573d6000803e3d6000fd5b505082549150620021f29050565b60028201546004830154604080519283526001600160a01b03918216602084015292169184917f9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615910160405180910390a35050565b606b546001600160a01b03163314806200226b5750606c546001600160a01b031633145b620022b95760405162461bcd60e51b815260206004820181905260248201527f53796e7468657369733a206f6e6c79207472757374656420636f6e74726163746044820152606401620006f8565b6000848152606a602052604081205460ff166002811115620022df57620022df62003762565b14620022ff5760405162461bcd60e51b8152600401620006f89062003a04565b6001600160a01b038381166000908152606760205260408082205481516340c10f1960e01b815285851660048201526024810187905291519316926340c10f199260448084019391929182900301818387803b1580156200235f57600080fd5b505af115801562002374573d6000803e3d6000fd5b5050506000858152606a6020526040902080546001925060ff191682800217905550604080518381526001600160a01b03858116602083015283169186917f95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb791016200088c565b620023e562002eb3565b6001600160a01b0316620024016033546001600160a01b031690565b6001600160a01b0316146200242a5760405162461bcd60e51b8152600401620006f890620039cf565b620024358162003061565b50565b6066606b60976032608d60ac60f4603f6040516020016200179498979695949392919062003bf5565b6000886001600160a01b0316639dc29fac6200247c62002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018b9052604401600060405180830381600087803b158015620024c557600080fd5b505af1158015620024da573d6000803e3d6000fd5b5050606b54600092506001600160a01b03169050632d0335ab620024fd62002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562002542573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002568919062003bdb565b606b549091506001600160a01b0316636f3521966200258d886001600160a01b031690565b876001600160a01b038b16620025a6620003a662002eb3565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810184905260a401602060405180830381865afa158015620025fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002622919062003bdb565b606b549092506001600160a01b031663329ef45f85858a8a8a886200264662002eb3565b896040518963ffffffff1660e01b81526004016200266c98979695949392919062003dcc565b6020604051808303816000875af11580156200268c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026b2919062003cd3565b50600082815260696020526040902060048101805460ff60a01b1916600160a01b1790556001600160a01b038916620026ea62002eb3565b6001600160a01b0316847fc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f758d8f604051620027389291909182526001600160a01b0316602082015260400190565b60405180910390a4505098975050505050505050565b6200275862002eb3565b6001600160a01b0316620027746033546001600160a01b031690565b6001600160a01b0316146200279d5760405162461bcd60e51b8152600401620006f890620039cf565b6001600160a01b038116620028045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006f8565b620024358162003083565b631de44e3d8114620028645760405162461bcd60e51b815260206004820152601c60248201527f53796e7468657369733a20696e636f727265637420636861696e4964000000006044820152606401620006f8565b606b546000906001600160a01b0316632d0335ab6200288262002eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620028c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028ed919062003bdb565b606b549091506000906001600160a01b0316636f352196878760028181106200291a576200291a62003b43565b60200291909101359050631de44e3d898960008181106200293f576200293f62003b43565b9050602002013562002954620003a662002eb3565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810185905260a401602060405180830381865afa158015620029aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029d0919062003bdb565b905060016000828152606a602052604090205460ff166002811115620029fa57620029fa62003762565b141562002a1b5760405162461bcd60e51b8152600401620006f89062003d82565b6000818152606a6020526040808220805460ff1916600217905580516007808252610100820190925290816020015b604080516060810182526000808252602080830182905292820152825260001990920191018162002a4a5750506040805160608101909152909150808888600181811062002a9c5762002a9c62003b43565b905060200201358152602001600015158152602001600015158152508160008151811062002ace5762002ace62003b43565b60209081029190910101526040805160608101909152808888600481811062002afb5762002afb62003b43565b905060200201358152602001600015158152602001600115158152508160018151811062002b2d5762002b2d62003b43565b60209081029190910101526040805160608101909152808888600781811062002b5a5762002b5a62003b43565b905060200201358152602001600015158152602001600015158152508160028151811062002b8c5762002b8c62003b43565b60209081029190910101526040805160608101909152808888600581811062002bb95762002bb962003b43565b905060200201358152602001600015158152602001600115158152508160038151811062002beb5762002beb62003b43565b60209081029190910101526040805160608101909152808888600681811062002c185762002c1862003b43565b905060200201358152602001600015158152602001600115158152508160048151811062002c4a5762002c4a62003b43565b60209081029190910101526040805160608101909152808888600381811062002c775762002c7762003b43565b905060200201358152602001600115158152602001600015158152508160058151811062002ca95762002ca962003b43565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160068151811062002d0e5762002d0e62003b43565b6020908102919091010152606b5460408051606081019091526001600160a01b03909116906331b433f99062002db190808b8b600081811062002d555762002d5562003b43565b9050602002013581526020018581526020016066606b60976032608d60ac60f4603f60405160200162002d9098979695949392919062003bf5565b60408051601f1981840301815290829052620015a2918c9060200162003e32565b8989600081811062002dc75762002dc762003b43565b602002919091013590508a8a600281811062002de75762002de762003b43565b90506020020135631de44e3d8762002dfe62002eb3565b8a6040518863ffffffff1660e01b815260040162002e23979695949392919062003c84565b6020604051808303816000875af115801562002e43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e69919062003cd3565b5062002e7462002eb3565b6001600160a01b0316827f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050565b60006014361080159062002ed157506065546001600160a01b031633145b1562002ee4575060131936013560601c90565b503390565b6000808447101562002f3e5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620006f8565b825162002f8e5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620006f8565b8383516020850187f590506001600160a01b03811662002ff15760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620006f8565b949350505050565b600054610100900460ff1662001c445760405162461bcd60e51b8152600401620006f89062003e63565b600054610100900460ff166200304d5760405162461bcd60e51b8152600401620006f89062003e63565b62001c446200305b62002eb3565b62003083565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61186d8062003eaf83390190565b828054620030f19062003cf3565b90600052602060002090601f01602090048101928262003115576000855562003160565b82601f106200313057805160ff191683800117855562003160565b8280016001018555821562003160579182015b828111156200316057825182559160200191906001019062003143565b506200316e92915062003172565b5090565b5b808211156200316e576000815560010162003173565b80356001600160a01b0381168114620031a157600080fd5b919050565b600060208284031215620031b957600080fd5b620031c48262003189565b9392505050565b600060208284031215620031de57600080fd5b5035919050565b60008060008060808587031215620031fc57600080fd5b8435935060208501359250604085013591506200321c6060860162003189565b905092959194509250565b60008083601f8401126200323a57600080fd5b50813567ffffffffffffffff8111156200325357600080fd5b6020830191508360208285010111156200326c57600080fd5b9250929050565b6000806000806000606086880312156200328c57600080fd5b85359450602086013567ffffffffffffffff80821115620032ac57600080fd5b620032ba89838a0162003227565b90965094506040880135915080821115620032d457600080fd5b50620032e38882890162003227565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715620033305762003330620032f4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620033625762003362620032f4565b604052919050565b80151581146200243557600080fd5b600082601f8301126200338b57600080fd5b813567ffffffffffffffff811115620033a857620033a8620032f4565b620033bd601f8201601f191660200162003336565b818152846020838601011115620033d357600080fd5b816020850160208301376000918101602001919091529392505050565b600060208083850312156200340457600080fd5b823567ffffffffffffffff808211156200341d57600080fd5b818501915060608083880312156200343457600080fd5b6200343e6200330a565b8335815284840135838111156200345457600080fd5b8401601f810189136200346657600080fd5b8035848111156200347b576200347b620032f4565b6200348b878260051b0162003336565b8181529084028201870190878101908b831115620034a857600080fd5b928801925b828410156200350d5785848d031215620034c75760008081fd5b620034d16200330a565b8435815289850135620034e4816200336a565b818b0152604085810135620034f9816200336a565b9082015282529285019290880190620034ad565b80898601525050505060408401359450828511156200352b57600080fd5b620035398886860162003379565b6040820152979650505050505050565b60005b83811015620035665781810151838201526020016200354c565b8381111562003576576000848401525b50505050565b600081518084526200359681602086016020860162003549565b601f01601f19169290920160200192915050565b602081526000620031c460208301846200357c565b60008060408385031215620035d357600080fd5b620035de8362003189565b9150620035ee6020840162003189565b90509250929050565b60008083601f8401126200360a57600080fd5b50813567ffffffffffffffff8111156200362357600080fd5b6020830191508360208260051b85010111156200326c57600080fd5b6000806000806000608086880312156200365857600080fd5b620036638662003189565b9450602086013567ffffffffffffffff8111156200368057600080fd5b6200368e88828901620035f7565b9699909850959660408101359660609091013595509350505050565b60008060008060008060c08789031215620036c457600080fd5b620036cf8762003189565b955060208701359450620036e66040880162003189565b9350620036f66060880162003189565b9250620037066080880162003189565b915060a087013590509295509295509295565b600080600080608085870312156200373057600080fd5b84359350620037426020860162003189565b9250620037526040860162003189565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b600381106200243557634e487b7160e01b600052602160045260246000fd5b8681526020810186905260408101859052606081018490526001600160a01b038316608082015260c08101620037cd8362003778565b8260a0830152979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156200381957815184529284019290840190600101620037fb565b5050508381038285015284518082528583019183019060005b81811015620038595783516001600160a01b03168352928401929184019160010162003832565b5090979650505050505050565b60208101620038758362003778565b91905290565b600080600080608085870312156200389257600080fd5b84359350620038a46020860162003189565b9250604085013591506200321c6060860162003189565b60008060008060008060008060e0898b031215620038d857600080fd5b620038e38962003189565b975060208901359650620038fa60408a0162003189565b95506200390a60608a0162003189565b94506200391a60808a0162003189565b935060a0890135925060c089013567ffffffffffffffff8111156200393e57600080fd5b6200394c8b828c0162003227565b999c989b5096995094979396929594505050565b600080600080606085870312156200397757600080fd5b843567ffffffffffffffff8111156200398f57600080fd5b6200399d87828801620035f7565b90955093505060208501356001600160f81b031981168114620039bf57600080fd5b9396929550929360400135925050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252604f908201527f53796e7468657369733a20656d657267656e6379556e73796e74686573697a6560408201527f64526571756573742063616c6c6564206f7220746f6b656e732068617665206260608201526e19595b881cde5b9d1a195cda5e9959608a1b608082015260a00190565b60208082526028908201527f53796e7468657369733a20726570726573656e746174696f6e20616c72656164604082015267792065786973747360c01b606082015260800190565b606560f81b81528183600183013760009101600101908152919050565b60408152600062003af360408301856200357c565b828103602084015262003b0781856200357c565b95945050505050565b6000835162003b2481846020880162003549565b83519083019062003b3a81836020880162003549565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562003b7c57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835162003b9781846020880162003549565b9190910191825250602001919050565b6000835162003bbb81846020880162003549565b60e09390931b6001600160e01b0319169190920190815260040192915050565b60006020828403121562003bee57600080fd5b5051919050565b6001600160f81b031960f8998a1b8116825297891b8816600182015295881b8716600287015293871b8616600386015291861b85166004850152851b84166005840152841b8316600683015290921b16600782015260080190565b6000835162003c6481846020880162003549565b60c09390931b6001600160c01b0319169190920190815260080192915050565b60e08152600062003c9960e083018a6200357c565b6020830198909852506040810195909552606085019390935260808401919091526001600160a01b031660a083015260c090910152919050565b60006020828403121562003ce657600080fd5b8151620031c4816200336a565b600181811c9082168062003d0857607f821691505b6020821081141562003d2a57634e487b7160e01b600052602260045260246000fd5b50919050565b60e08152600062003d4560e083018a6200357c565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c00191909152919050565b6020808252602a908201527f53796e7468657369733a2073796e74686574696320746f6b656e7320616c726560408201526918591e481b5a5b9d195960b21b606082015260800190565b60e081528760e08201526000610100898b828501376000838b018201526001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c0810192909252601f909201601f19160101919050565b6000835162003e4681846020880162003549565b6001600160f81b0319939093169190920190815260010192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b506040516200186d3803806200186d8339810160408190526200005a9162000330565b6040518060400160405280600c81526020016b29bcb6b134b7b9b4b9a3a9a760a11b81525080604051806040016040528060018152602001603160f81b81525084846000620000ae620001b960201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081516200010d906004906020850190620001bd565b50805162000123906005906020840190620001bd565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250620003d792505050565b3390565b828054620001cb906200039a565b90600052602060002090601f016020900481019282620001ef57600085556200023a565b82601f106200020a57805160ff19168380011785556200023a565b828001600101855582156200023a579182015b828111156200023a5782518255916020019190600101906200021d565b50620002489291506200024c565b5090565b5b808211156200024857600081556001016200024d565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200028b57600080fd5b81516001600160401b0380821115620002a857620002a862000263565b604051601f8301601f19908116603f01168101908282118183101715620002d357620002d362000263565b81604052838152602092508683858801011115620002f057600080fd5b600091505b83821015620003145785820183015181830184015290820190620002f5565b83821115620003265760008385830101525b9695505050505050565b600080604083850312156200034457600080fd5b82516001600160401b03808211156200035c57600080fd5b6200036a8683870162000279565b935060208501519150808211156200038157600080fd5b50620003908582860162000279565b9150509250929050565b600181811c90821680620003af57607f821691505b60208210811415620003d157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161144662000427600039600061071b01526000610c9301526000610ce201526000610cbd01526000610c4101526000610c6a01526114466000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ecebe00116100b8578063a457c2d71161007c578063a457c2d71461026e578063a9059cbb14610281578063a918adf514610294578063d505accf146102a7578063dd62ed3e146102ba578063f2fde38b146102cd57600080fd5b80637ecebe00146102125780638da5cb5b1461022557806395d89b41146102405780639be4e7b2146102485780639dc29fac1461025b57600080fd5b80633644e515116100ff5780633644e515146101b157806339509351146101b957806340c10f19146101cc57806370a08231146101e1578063715018a61461020a57600080fd5b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017d57806323b872dd1461018f578063313ce567146101a2575b600080fd5b6101446102e0565b604051610151919061117d565b60405180910390f35b61016d6101683660046111ee565b610372565b6040519015158152602001610151565b6003545b604051908152602001610151565b61016d61019d366004611218565b610388565b60405160128152602001610151565b61018161043e565b61016d6101c73660046111ee565b61044d565b6101df6101da3660046111ee565b610484565b005b6101816101ef366004611254565b6001600160a01b031660009081526001602052604090205490565b6101df6104bc565b610181610220366004611254565b610530565b6000546040516001600160a01b039091168152602001610151565b610144610550565b6101df610256366004611218565b61055f565b6101df6102693660046111ee565b6105b2565b61016d61027c3660046111ee565b6105e6565b61016d61028f3660046111ee565b610643565b6101df6102a2366004611218565b610650565b6101df6102b5366004611276565b6106c7565b6101816102c83660046112e9565b61082b565b6101df6102db366004611254565b610856565b6060600480546102ef9061131c565b80601f016020809104026020016040519081016040528092919081815260200182805461031b9061131c565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b5050505050905090565b600061037f338484610940565b50600192915050565b6000610395848484610a65565b6001600160a01b03841660009081526002602090815260408083203384529091529020548281101561041f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610433853361042e8685611367565b610940565b506001949350505050565b6000610448610c3d565b905090565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909161037f91859061042e90869061137e565b6000546001600160a01b031633146104ae5760405162461bcd60e51b815260040161041690611396565b6104b88282610d30565b5050565b6000546001600160a01b031633146104e65760405162461bcd60e51b815260040161041690611396565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001600160a01b0381166000908152600660205260408120545b92915050565b6060600580546102ef9061131c565b6000546001600160a01b031633146105895760405162461bcd60e51b815260040161041690611396565b6105938382610d30565b6105ad8383836105a3878761082b565b61042e919061137e565b505050565b6000546001600160a01b031633146105dc5760405162461bcd60e51b815260040161041690611396565b6104b88282610e0f565b3360009081526002602090815260408083206001600160a01b03861684529091528120548281101561062a5760405162461bcd60e51b8152600401610416906113cb565b610639338561042e8685611367565b5060019392505050565b600061037f338484610a65565b6000546001600160a01b0316331461067a5760405162461bcd60e51b815260040161041690611396565b6000610686848461082b565b9050818110156106a85760405162461bcd60e51b8152600401610416906113cb565b6106b7848461042e8585611367565b6106c18483610e0f565b50505050565b834211156107175760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610416565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107468c610f5e565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107a182610f86565b905060006107b182878787610fd4565b9050896001600160a01b0316816001600160a01b0316146108145760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610416565b61081f8a8a8a610940565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000546001600160a01b031633146108805760405162461bcd60e51b815260040161041690611396565b6001600160a01b0381166108e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610416565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166109a25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610416565b6001600160a01b038216610a035760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610416565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610ac95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610416565b6001600160a01b038216610b2b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610416565b6001600160a01b03831660009081526001602052604090205481811015610ba35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610416565b610bad8282611367565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290610be390849061137e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c2f91815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610c8c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610d865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610416565b8060036000828254610d98919061137e565b90915550506001600160a01b03821660009081526001602052604081208054839290610dc590849061137e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610e6f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610416565b6001600160a01b03821660009081526001602052604090205481811015610ee35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610416565b610eed8282611367565b6001600160a01b03841660009081526001602052604081209190915560038054849290610f1b908490611367565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a58565b6001600160a01b03811660009081526006602052604090208054600181018255905b50919050565b600061054a610f93610c3d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156110515760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610416565b8360ff16601b148061106657508360ff16601c145b6110bd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610416565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611111573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111745760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610416565b95945050505050565b600060208083528351808285015260005b818110156111aa5785810183015185820160400152820161118e565b818111156111bc576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146111e957600080fd5b919050565b6000806040838503121561120157600080fd5b61120a836111d2565b946020939093013593505050565b60008060006060848603121561122d57600080fd5b611236846111d2565b9250611244602085016111d2565b9150604084013590509250925092565b60006020828403121561126657600080fd5b61126f826111d2565b9392505050565b600080600080600080600060e0888a03121561129157600080fd5b61129a886111d2565b96506112a8602089016111d2565b95506040880135945060608801359350608088013560ff811681146112cc57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156112fc57600080fd5b611305836111d2565b9150611313602084016111d2565b90509250929050565b600181811c9082168061133057607f821691505b60208210811415610f8057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561137957611379611351565b500390565b6000821982111561139157611391611351565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b60608201526080019056fea2646970667358221220f6249c460b288058d5fc36a68c05d34d79cdb4f77f545cb33bbe987879cb763664736f6c634300080a0033756e73796e74686573697a6528627974657333322c616464726573732c75696e743235362c6164647265737329a26469706673582212209a1c28c7f3a04c450361a6e7a4db5da8d05d309225f0a097e0b7ea2e4dfb981d64736f6c634300080a0033",
}

// SynthesisABI is the input ABI used to generate the binding from.
// Deprecated: Use SynthesisMetaData.ABI instead.
var SynthesisABI = SynthesisMetaData.ABI

// SynthesisBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SynthesisMetaData.Bin instead.
var SynthesisBin = SynthesisMetaData.Bin

// DeploySynthesis deploys a new Ethereum contract, binding an instance of Synthesis to it.
func DeploySynthesis(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Synthesis, error) {
	parsed, err := SynthesisMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SynthesisBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// Synthesis is an auto generated Go binding around an Ethereum contract.
type Synthesis struct {
	SynthesisCaller     // Read-only binding to the contract
	SynthesisTransactor // Write-only binding to the contract
	SynthesisFilterer   // Log filterer for contract events
}

// SynthesisCaller is an auto generated read-only Go binding around an Ethereum contract.
type SynthesisCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SynthesisTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Synthesis *SynthesisTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Synthesis.gsn = opts
}

// SynthesisFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SynthesisFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SynthesisSession struct {
	Contract     *Synthesis        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SynthesisCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SynthesisCallerSession struct {
	Contract *SynthesisCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SynthesisTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SynthesisTransactorSession struct {
	Contract     *SynthesisTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SynthesisRaw is an auto generated low-level Go binding around an Ethereum contract.
type SynthesisRaw struct {
	Contract *Synthesis // Generic contract binding to access the raw methods on
}

// SynthesisCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SynthesisCallerRaw struct {
	Contract *SynthesisCaller // Generic read-only contract binding to access the raw methods on
}

// SynthesisTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SynthesisTransactorRaw struct {
	Contract *SynthesisTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSynthesis creates a new instance of Synthesis, bound to a specific deployed contract.
func NewSynthesis(address common.Address, backend bind.ContractBackend) (*Synthesis, error) {
	contract, err := bindSynthesis(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// NewSynthesisCaller creates a new read-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisCaller(address common.Address, caller bind.ContractCaller) (*SynthesisCaller, error) {
	contract, err := bindSynthesis(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisCaller{contract: contract}, nil
}

// NewSynthesisTransactor creates a new write-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisTransactor(address common.Address, transactor bind.ContractTransactor) (*SynthesisTransactor, error) {
	contract, err := bindSynthesis(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisTransactor{contract: contract}, nil
}

// NewSynthesisFilterer creates a new log filterer instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisFilterer(address common.Address, filterer bind.ContractFilterer) (*SynthesisFilterer, error) {
	contract, err := bindSynthesis(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SynthesisFilterer{contract: contract}, nil
}

// bindSynthesis binds a generic wrapper to an already deployed contract.
func bindSynthesis(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SynthesisABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.SynthesisCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCallerSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Synthesis.Contract.CastToAddress(&_Synthesis.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Synthesis.Contract.CastToAddress(&_Synthesis.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Synthesis.Contract.CastToBytes32(&_Synthesis.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Synthesis.Contract.CastToBytes32(&_Synthesis.CallOpts, a)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCaller) GetListRepresentation(opts *bind.CallOpts) ([][32]byte, []common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getListRepresentation")

	if err != nil {
		return *new([][32]byte), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)

	return out0, out1, err

}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCallerSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCaller) GetRepresentation(opts *bind.CallOpts, _rtoken [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getRepresentation", _rtoken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCallerSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Synthesis *SynthesisCaller) GetTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Synthesis *SynthesisSession) GetTxId() ([32]byte, error) {
	return _Synthesis.Contract.GetTxId(&_Synthesis.CallOpts)
}

// GetTxId is a free data retrieval call binding the contract method 0x6f2258b3.
//
// Solidity: function getTxId() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) GetTxId() ([32]byte, error) {
	return _Synthesis.Contract.GetTxId(&_Synthesis.CallOpts)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCallerSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCaller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "proxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCallerSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCaller) RepresentationReal(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationReal", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCaller) RepresentationSynt(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationSynt", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCallerSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		Recipient     [32]byte
		Chain2address [32]byte
		Amount        *big.Int
		Token         [32]byte
		Stoken        common.Address
		State         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Chain2address = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Token = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Stoken = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.State = *abi.ConvertType(out[5], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 recipient, bytes32 chain2address, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCallerSession) Requests(arg0 [32]byte) (struct {
	Recipient     [32]byte
	Chain2address [32]byte
	Amount        *big.Int
	Token         [32]byte
	Stoken        common.Address
	State         uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashEmergencyUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashEmergencyUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCaller) SynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "synthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCallerSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisSession) TrustedForwarder() (common.Address, error) {
	return _Synthesis.Contract.TrustedForwarder(&_Synthesis.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisCallerSession) TrustedForwarder() (common.Address, error) {
	return _Synthesis.Contract.TrustedForwarder(&_Synthesis.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCallerSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticToken(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "BurnSyntheticToken")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "burnSyntheticToken", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "burnSyntheticToken", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
		},
	)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0x60341612.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x42a3f4f0.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenToSolana(opts *bind.TransactOpts, _stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "BurnSyntheticTokenToSolana")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "burnSyntheticTokenToSolana", _stoken, _pubkeys, _amount, _chainId)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "burnSyntheticTokenToSolana", _stoken, _pubkeys, _amount, _chainId)
		},
	)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x42a3f4f0.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticTokenToSolana(_stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolana(&_Synthesis.TransactOpts, _stoken, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x42a3f4f0.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenToSolana(_stoken common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolana(&_Synthesis.TransactOpts, _stoken, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenTransit(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "BurnSyntheticTokenTransit")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "burnSyntheticToken_transit", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "burnSyntheticToken_transit", _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
		},
	)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticTokenTransit(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenTransit(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// BurnSyntheticTokenTransit is a paid mutator transaction binding the contract method 0xe9a71481.
//
// Solidity: function burnSyntheticToken_transit(address _stoken, uint256 _amount, address _chain2address, address _receiveSide, address _oppositeBridge, uint256 _chainID, bytes _out) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenTransit(_stoken common.Address, _amount *big.Int, _chain2address common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int, _out []byte) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenTransit(&_Synthesis.TransactOpts, _stoken, _amount, _chain2address, _receiveSide, _oppositeBridge, _chainID, _out)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "ChangeBridge")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "changeBridge", _bridge)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "changeBridge", _bridge)
		},
	)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisSession) ChangeBridge(_bridge common.Address) (common.Hash, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactorSession) ChangeBridge(_bridge common.Address) (common.Hash, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisTransactor) CreateRepresentation(opts *bind.TransactOpts, _rtoken [32]byte, _name string, _symbol string) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "CreateRepresentation")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "createRepresentation", _rtoken, _name, _symbol)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "createRepresentation", _rtoken, _name, _symbol)
		},
	)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisSession) CreateRepresentation(_rtoken [32]byte, _name string, _symbol string) (common.Hash, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _name, _symbol)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0x104ccf9a.
//
// Solidity: function createRepresentation(bytes32 _rtoken, string _name, string _symbol) returns()
func (_Synthesis *SynthesisTransactorSession) CreateRepresentation(_rtoken [32]byte, _name string, _symbol string) (common.Hash, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _name, _symbol)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnburn(opts *bind.TransactOpts, _txID [32]byte) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnburn")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "emergencyUnburn", _txID)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnburn", _txID)
		},
	)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisSession) EmergencyUnburn(_txID [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0xbb5f3cca.
//
// Solidity: function emergencyUnburn(bytes32 _txID) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnburn(_txID [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnsyntesizeRequest")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequest", _txID, _receiveSide, _oppositeBridge, _chainID)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnsyntesizeRequest", _txID, _receiveSide, _oppositeBridge, _chainID)
		},
	)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainID)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x926ad0fe.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainID) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainID *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainID)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0xfb47d165.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequestToSolana(opts *bind.TransactOpts, _pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "EmergencyUnsyntesizeRequestToSolana")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequestToSolana", _pubkeys, _bumpSynthesizeRequest, _chainId)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnsyntesizeRequestToSolana", _pubkeys, _bumpSynthesizeRequest, _chainId)
		},
	)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0xfb47d165.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequestToSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0xfb47d165.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequestToSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisTransactor) InitializeFunc(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "InitializeFunc")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "initializeFunc", _bridge, _trustedForwarder)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "initializeFunc", _bridge, _trustedForwarder)
		},
	)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.InitializeFunc(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisTransactorSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.InitializeFunc(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactor) MintSyntheticToken(opts *bind.TransactOpts, _txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "MintSyntheticToken")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "mintSyntheticToken", _txID, _tokenReal, _amount, _to)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "mintSyntheticToken", _txID, _tokenReal, _amount, _to)
		},
	)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactorSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x0ead6192.
//
// Solidity: function mintSyntheticTokenToSolana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactor) MintSyntheticTokenToSolana(opts *bind.TransactOpts, _txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "MintSyntheticTokenToSolana")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "mintSyntheticTokenToSolana", _txID, _tokenReal, _amount, _to)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "mintSyntheticTokenToSolana", _txID, _tokenReal, _amount, _to)
		},
	)
}

// MintSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x0ead6192.
//
// Solidity: function mintSyntheticTokenToSolana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisSession) MintSyntheticTokenToSolana(_txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticTokenToSolana(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x0ead6192.
//
// Solidity: function mintSyntheticTokenToSolana(bytes32 _txID, bytes32 _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactorSession) MintSyntheticTokenToSolana(_txID [32]byte, _tokenReal [32]byte, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticTokenToSolana(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactor) RenounceOwnership(opts *bind.TransactOpts) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "RenounceOwnership")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "renounceOwnership")
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "renounceOwnership")
		},
	)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisSession) RenounceOwnership() (common.Hash, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactorSession) RenounceOwnership() (common.Hash, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisTransactor) SetProxyCurve(opts *bind.TransactOpts, _proxy common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "SetProxyCurve")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "setProxyCurve", _proxy)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "setProxyCurve", _proxy)
		},
	)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisSession) SetProxyCurve(_proxy common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetProxyCurve(&_Synthesis.TransactOpts, _proxy)
}

// SetProxyCurve is a paid mutator transaction binding the contract method 0x286452f4.
//
// Solidity: function setProxyCurve(address _proxy) returns()
func (_Synthesis *SynthesisTransactorSession) SetProxyCurve(_proxy common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetProxyCurve(&_Synthesis.TransactOpts, _proxy)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "SetTrustedForwarder")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "setTrustedForwarder", _forwarder)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "setTrustedForwarder", _forwarder)
		},
	)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisSession) SetTrustedForwarder(_forwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetTrustedForwarder(&_Synthesis.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisTransactorSession) SetTrustedForwarder(_forwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetTrustedForwarder(&_Synthesis.TransactOpts, _forwarder)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	fmt.Printf("DBG: Wrapper run method = %s\n", "TransferOwnership")
	return GsnWrap(
		_Synthesis.gsn,
		func() (common.Hash, error) {
			tx, errIn := _Synthesis.contract.Transact(opts, "transferOwnership", newOwner)
			if tx != nil {
				return tx.Hash(), errIn
			}
			return common.Hash{}, errIn
		},
		func() (common.Hash, error) {
			return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "transferOwnership", newOwner)
		},
	)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisSession) TransferOwnership(newOwner common.Address) (common.Hash, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactorSession) TransferOwnership(newOwner common.Address) (common.Hash, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}

// SynthesisBurnRequestIterator is returned from FilterBurnRequest and is used to iterate over the raw logs and unpacked data for BurnRequest events raised by the Synthesis contract.
type SynthesisBurnRequestIterator struct {
	Event *SynthesisBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequest represents a BurnRequest event raised by the Synthesis contract.
type SynthesisBurnRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequest is a free log retrieval operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequest(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to []common.Address) (*SynthesisBurnRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestIterator{contract: _Synthesis.contract, event: "BurnRequest", logs: logs, sub: sub}, nil
}

// WatchBurnRequest is a free log subscription operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequest(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequest, _id [][32]byte, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequest", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequest)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequest is a log parse operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed _id, address indexed _from, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequest(log types.Log) (*SynthesisBurnRequest, error) {
	event := new(SynthesisBurnRequest)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisBurnRequestSolanaIterator is returned from FilterBurnRequestSolana and is used to iterate over the raw logs and unpacked data for BurnRequestSolana events raised by the Synthesis contract.
type SynthesisBurnRequestSolanaIterator struct {
	Event *SynthesisBurnRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequestSolana represents a BurnRequestSolana event raised by the Synthesis contract.
type SynthesisBurnRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequestSolana is a free log retrieval operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequestSolana(opts *bind.FilterOpts, _id [][32]byte, _from []common.Address, _to [][32]byte) (*SynthesisBurnRequestSolanaIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestSolanaIterator{contract: _Synthesis.contract, event: "BurnRequestSolana", logs: logs, sub: sub}, nil
}

// WatchBurnRequestSolana is a free log subscription operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequestSolana(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequestSolana, _id [][32]byte, _from []common.Address, _to [][32]byte) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequestSolana", _idRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequestSolana)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequestSolana is a log parse operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed _id, address indexed _from, bytes32 indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequestSolana(log types.Log) (*SynthesisBurnRequestSolana, error) {
	event := new(SynthesisBurnRequestSolana)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisCreatedRepresentationIterator is returned from FilterCreatedRepresentation and is used to iterate over the raw logs and unpacked data for CreatedRepresentation events raised by the Synthesis contract.
type SynthesisCreatedRepresentationIterator struct {
	Event *SynthesisCreatedRepresentation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisCreatedRepresentationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisCreatedRepresentation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisCreatedRepresentation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisCreatedRepresentationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisCreatedRepresentationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisCreatedRepresentation represents a CreatedRepresentation event raised by the Synthesis contract.
type SynthesisCreatedRepresentation struct {
	Rtoken [32]byte
	Stoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreatedRepresentation is a free log retrieval operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) FilterCreatedRepresentation(opts *bind.FilterOpts, _rtoken [][32]byte, _stoken []common.Address) (*SynthesisCreatedRepresentationIterator, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}
	var _stokenRule []interface{}
	for _, _stokenItem := range _stoken {
		_stokenRule = append(_stokenRule, _stokenItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "CreatedRepresentation", _rtokenRule, _stokenRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisCreatedRepresentationIterator{contract: _Synthesis.contract, event: "CreatedRepresentation", logs: logs, sub: sub}, nil
}

// WatchCreatedRepresentation is a free log subscription operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) WatchCreatedRepresentation(opts *bind.WatchOpts, sink chan<- *SynthesisCreatedRepresentation, _rtoken [][32]byte, _stoken []common.Address) (event.Subscription, error) {

	var _rtokenRule []interface{}
	for _, _rtokenItem := range _rtoken {
		_rtokenRule = append(_rtokenRule, _rtokenItem)
	}
	var _stokenRule []interface{}
	for _, _stokenItem := range _stoken {
		_stokenRule = append(_stokenRule, _stokenItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "CreatedRepresentation", _rtokenRule, _stokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisCreatedRepresentation)
				if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRepresentation is a log parse operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed _rtoken, address indexed _stoken)
func (_Synthesis *SynthesisFilterer) ParseCreatedRepresentation(log types.Log) (*SynthesisCreatedRepresentation, error) {
	event := new(SynthesisCreatedRepresentation)
	if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Synthesis contract.
type SynthesisOwnershipTransferredIterator struct {
	Event *SynthesisOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisOwnershipTransferred represents a OwnershipTransferred event raised by the Synthesis contract.
type SynthesisOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SynthesisOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisOwnershipTransferredIterator{contract: _Synthesis.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SynthesisOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisOwnershipTransferred)
				if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) ParseOwnershipTransferred(log types.Log) (*SynthesisOwnershipTransferred, error) {
	event := new(SynthesisOwnershipTransferred)
	if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertBurnCompletedIterator is returned from FilterRevertBurnCompleted and is used to iterate over the raw logs and unpacked data for RevertBurnCompleted events raised by the Synthesis contract.
type SynthesisRevertBurnCompletedIterator struct {
	Event *SynthesisRevertBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertBurnCompleted represents a RevertBurnCompleted event raised by the Synthesis contract.
type SynthesisRevertBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnCompleted is a free log retrieval operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterRevertBurnCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisRevertBurnCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertBurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertBurnCompletedIterator{contract: _Synthesis.contract, event: "RevertBurnCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertBurnCompleted is a free log subscription operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchRevertBurnCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisRevertBurnCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertBurnCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertBurnCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnCompleted is a log parse operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseRevertBurnCompleted(log types.Log) (*SynthesisRevertBurnCompleted, error) {
	event := new(SynthesisRevertBurnCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertSynthesizeRequestIterator is returned from FilterRevertSynthesizeRequest and is used to iterate over the raw logs and unpacked data for RevertSynthesizeRequest events raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequestIterator struct {
	Event *SynthesisRevertSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertSynthesizeRequest represents a RevertSynthesizeRequest event raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeRequest is a free log retrieval operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) FilterRevertSynthesizeRequest(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisRevertSynthesizeRequestIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertSynthesizeRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertSynthesizeRequestIterator{contract: _Synthesis.contract, event: "RevertSynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeRequest is a free log subscription operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) WatchRevertSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *SynthesisRevertSynthesizeRequest, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertSynthesizeRequest", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertSynthesizeRequest)
				if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeRequest is a log parse operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed _id, address indexed _to)
func (_Synthesis *SynthesisFilterer) ParseRevertSynthesizeRequest(log types.Log) (*SynthesisRevertSynthesizeRequest, error) {
	event := new(SynthesisRevertSynthesizeRequest)
	if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedIterator is returned from FilterSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for SynthesizeCompleted events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedIterator struct {
	Event *SynthesisSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompleted represents a SynthesizeCompleted event raised by the Synthesis contract.
type SynthesisSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompleted is a free log retrieval operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompleted(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisSynthesizeCompletedIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedIterator{contract: _Synthesis.contract, event: "SynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompleted is a free log subscription operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompleted, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompleted", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompleted is a log parse operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed _id, address indexed _to, uint256 _amount, address _token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompleted(log types.Log) (*SynthesisSynthesizeCompleted, error) {
	event := new(SynthesisSynthesizeCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedSolanaIterator is returned from FilterSynthesizeCompletedSolana and is used to iterate over the raw logs and unpacked data for SynthesizeCompletedSolana events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolanaIterator struct {
	Event *SynthesisSynthesizeCompletedSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompletedSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompletedSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompletedSolana represents a SynthesizeCompletedSolana event raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolana struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompletedSolana is a free log retrieval operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompletedSolana(opts *bind.FilterOpts, _id [][32]byte, _to []common.Address) (*SynthesisSynthesizeCompletedSolanaIterator, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompletedSolana", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedSolanaIterator{contract: _Synthesis.contract, event: "SynthesizeCompletedSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompletedSolana is a free log subscription operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompletedSolana(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompletedSolana, _id [][32]byte, _to []common.Address) (event.Subscription, error) {

	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompletedSolana", _idRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompletedSolana)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompletedSolana is a log parse operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed _id, address indexed _to, uint256 _amount, bytes32 _token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompletedSolana(log types.Log) (*SynthesisSynthesizeCompletedSolana, error) {
	event := new(SynthesisSynthesizeCompletedSolana)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
