// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"senderSide\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_listNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2_solana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_newEpochParticipantsNum\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_newEpochNum\",\"type\":\"uint32\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60c06040526005608081905264322e322e3360d81b60a09081526200002691908162000089565b503480156200003457600080fd5b5060405162002bf238038062002bf283398101604081905262000057916200014c565b600080546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055620001c0565b828054620000979062000183565b90600052602060002090601f016020900481019282620000bb576000855562000106565b82601f10620000d657805160ff191683800117855562000106565b8280016001018555821562000106579182015b8281111562000106578251825591602001919060010190620000e9565b506200011492915062000118565b5090565b5b8082111562000114576000815560010162000119565b80516001600160a01b03811681146200014757600080fd5b919050565b600080604083850312156200015f578182fd5b6200016a836200012f565b91506200017a602084016200012f565b90509250929050565b6002810460018216806200019857607f821691505b60208210811415620001ba57634e487b7160e01b600052602260045260246000fd5b50919050565b612a2280620001d06000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063674822e4116100a2578063aa764d7c11610071578063aa764d7c1461021a578063bd4a5e9014610222578063c02ae95614610235578063e27ad9a514610248578063f2a0c8c01461025b5761010b565b8063674822e4146101d55780636f352196146101e8578063757991a8146101fb5780637da0a877146102125761010b565b806346dec6cb116100de57806346dec6cb14610183578063486ff0cd14610198578063572b6c05146101ad578063579de075146101c05761010b565b806305e3c05b146101105780632d0335ab1461012e578063329ef45f1461014e5780634162169f1461016e575b600080fd5b61011861026e565b6040516101259190612702565b60405180910390f35b61014161013c366004611da3565b610281565b6040516101259190612229565b61016161015c366004611f95565b6102a0565b604051610125919061221e565b610176610364565b604051610125919061220a565b610196610191366004611dbd565b610373565b005b6101a061050d565b60405161012591906122cc565b6101616101bb366004611da3565b61059b565b6101c86105af565b6040516101259190612713565b6101966101e3366004611e38565b6105bf565b6101416101f6366004611e95565b6106a6565b6102036106e2565b6040516101259392919061229a565b61017661072e565b61017661073d565b610196610230366004611ecf565b61074c565b61016161024336600461201f565b610abb565b610196610256366004611e0d565b610b59565b610196610269366004611da3565b610baf565b600a54600160a81b900463ffffffff1681565b6001600160a01b0381166000908152600160205260409020545b919050565b600086866001600160a01b0382166002846102b9610c59565b6001600160a01b0390811682526020808301939093526040918201600090812091861681529252902054146103095760405162461bcd60e51b815260040161030090612456565b60405180910390fd5b6103138585610c8a565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878c8c8c8c60405161034c96959493929190612617565b60405180910390a15060019998505050505050505050565b600a546001600160a01b031681565b600a546001600160a01b0316610387610c59565b6001600160a01b0316146103ad5760405162461bcd60e51b815260040161030090612397565b600060066040516020016103c191906126e4565b604051602081830303815290604052905081156104ba57600a8054600160a81b900463ffffffff169060156103f583612941565b91906101000a81548163ffffffff021916908363ffffffff1602179055505061041c611bc4565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589828260405160200161044f91906126bf565b60408051808303601f1901815290829052600a5461047e9392600191600160a81b900463ffffffff1690612256565b60405180910390a18051819060069061049a9082906002611be9565b5060208201516104b09060028084019190611be9565b5090505050610509565b600a546040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589916105009184918291600191600160a81b900463ffffffff1690612256565b60405180910390a15b5050565b6005805461051a906128eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610546906128eb565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b505050505081565b6004546001600160a01b0390811691161490565b600a54600160a01b900460ff1681565b6001600160a01b03821660008181526002602090815260408083208584528252808320548151808301909252601782527f72656365697665526571756573745632206661696c6564000000000000000000928201929092529092610624918790610cd3565b90508051600014806106455750808060200190518101906106459190611dd9565b6106615760405162461bcd60e51b815260040161030090612482565b7fd1ba58dc4ce565b871bd478664bd9e39d82de1e1fd0e7c0da61d124e6d42af99868585856040516106969493929190612232565b60405180910390a1505050505050565b600082828686896040516020016106c19594939291906121cb565b60405160208183030381529060405280519060200120905095945050505050565b606060008060066040516020016106f991906126e4565b60408051808303601f19018152919052600a549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b6004546001600160a01b031681565b6000546001600160a01b031681565b600a5463ffffffff8083169161076c91600160a81b909104166001612739565b63ffffffff161461078f5760405162461bcd60e51b8152600401610300906123b9565b60006107d08a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cec92505050565b9050600061081389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cec92505050565b9050600061085688888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e5e92505050565b60065490915015158061086a575060075415155b156109c957600a5460039061088a90600160a01b900460ff166002612889565b6108949190612761565b61089d87610f22565b10156108bb5760405162461bcd60e51b8152600401610300906125e0565b600a5460ff600160a01b9091041661010014806108e75750600a546001600160a01b90910460ff161b86105b6109035760405162461bcd60e51b815260040161030090612551565b60008360000151846020015187876040516020016109249493929190612181565b60408051808303601f19018152608083018083529093506109ab92916006918391820190839060029082845b81548152602001906001019080831161095057505050918352505060408051808201918290526020909201919060028481019182845b815481526020019060010190808311610986575050505050815250508483858b610f4c565b6109c75760405162461bcd60e51b81526004016103009061242b565b505b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258960066040516020016109fc91906126e4565b60405160208183030381529060405284604051602001610a1c91906126bf565b60408051601f1981840301815290829052610a3c92916000908990612256565b60405180910390a182518390600690610a589082906002611be9565b506020820151610a6e9060028084019190611be9565b5050600a805463ffffffff909616600160a81b0263ffffffff60a81b1960ff909816600160a01b0260ff60a01b199097169690961796909616949094179094555050505050505050505050565b600086868160026000610acc610c59565b6001600160a01b031660001b815260200190815260200160002060008381526020019081526020016000205414610b155760405162461bcd60e51b815260040161030090612456565b610b1f8585610c8a565b6040517f11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef9061034c90309089908e908e908e908e90612670565b80610b765760405162461bcd60e51b815260040161030090612528565b82610b935760405162461bcd60e51b8152600401610300906124fd565b6000928352600260209081526040808520938552929052912055565b600a546001600160a01b03161580610be15750600a546001600160a01b0316610bd6610c59565b6001600160a01b0316145b610bfd5760405162461bcd60e51b815260040161030090612375565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600060143610801590610c705750610c703361059b565b15610c84575060131936013560601c610c87565b50335b90565b6001600160a01b038216600090815260016020526040812080548392909190610cb283612926565b91905055146105095760405162461bcd60e51b815260040161030090612316565b6060610ce28484600085611196565b90505b9392505050565b610cf4611bc4565b60408051600480825260a082019092526000916020820160808036833701905050905060205b8151610d27906020612889565b8111610d47578381015182820152610d40602082612721565b9050610d1a565b5080600081518110610d6957634e487b7160e01b600052603260045260246000fd5b6020908102919091010151825152805181906001908110610d9a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151825160016020020152805181906002908110610dd157634e487b7160e01b600052603260045260246000fd5b60200260200101518260200151600060028110610dfe57634e487b7160e01b600052603260045260246000fd5b6020020152805181906003908110610e2657634e487b7160e01b600052603260045260246000fd5b60200260200101518260200151600160028110610e5357634e487b7160e01b600052603260045260246000fd5b602002015250919050565b610e66611c27565b60408051600280825260608201835260009260208301908036833701905050905060205b8151610e97906020612889565b8111610eb7578381015182820152610eb0602082612721565b9050610e8a565b5080600081518110610ed957634e487b7160e01b600052603260045260246000fd5b602002602001015182600001818152505080600181518110610f0b57634e487b7160e01b600052603260045260246000fd5b602002602001015182602001818152505050919050565b60005b811561029b57610f366001836128a8565b9091169080610f4481612926565b915050610f25565b60408051808201909152600080825260208201819052908160015b8415610fd65784811615610fc157610f7f81866128a8565b9450610fbe83610fb98b600001518c6020015186604051602001610fa593929190612156565b604051602081830303815290604052611256565b61130f565b92505b60011b81610fce81612926565b925050610f67565b60408051600380825260808201909252600091816020015b610ff6611c27565b815260200190600190039081610fee5750506040805160038082526080820190925291925060009190602082015b61102c611bc4565b81526020019060019003908161102457905050905061104a88611377565b8260008151811061106b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506110968b600001518c602001518b604051602001610fa59392919061211b565b826001815181106110b757634e487b7160e01b600052603260045260246000fd5b602002602001018190525084826002815181106110e457634e487b7160e01b600052603260045260246000fd5b60200260200101819052506110f76113fa565b8160008151811061111857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250898160018151811061114557634e487b7160e01b600052603260045260246000fd5b60200260200101819052508a8160028151811061117257634e487b7160e01b600052603260045260246000fd5b602002602001018190525061118782826114ba565b9b9a5050505050505050505050565b6060824710156111b85760405162461bcd60e51b8152600401610300906123e5565b6111c18561188c565b6111dd5760405162461bcd60e51b81526004016103009061257a565b600080866001600160a01b031685876040516111f991906121ee565b60006040518083038185875af1925050503d8060008114611236576040519150601f19603f3d011682016040523d82523d6000602084013e61123b565b606091505b509150915061124b828286611892565b979650505050505050565b61125e611c27565b600060028360405161127091906121ee565b602060405180830381855afa15801561128d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112b09190611df5565b905060006112cc6000805160206129cd83398151915283612965565b905060005b6112da826118cb565b905080156112fd57604080518082019091529182526020820152915061029b9050565b611308600183612721565b91506112d1565b611317611c27565b61131f611c41565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508061136f5760405162461bcd60e51b8152600401610300906124d2565b505092915050565b61137f611c27565b61138882611907565b156113a75750604080518082019091526000808252602082015261029b565b6040518060400160405280836000015181526020016000805160206129cd83398151915284602001516113da9190612965565b6113f2906000805160206129cd8339815191526128a8565b905292915050565b611402611bc4565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b600081518351146114dd5760405162461bcd60e51b8152600401610300906125b1565b825160006114ec826006612889565b905060008167ffffffffffffffff81111561151757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611540578160200160208202803683370190505b50905060005b8381101561183f5786818151811061156e57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828260066115889190612889565b611593906000612721565b815181106115b157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508681815181106115dd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151828260066115f79190612889565b611602906001612721565b8151811061162057634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085818151811061164c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151515182611665836006612889565b611670906002612721565b8151811061168e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508581815181106116ba57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151510151826116d5836006612889565b6116e0906003612721565b815181106116fe57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085818151811061172a57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160006002811061175657634e487b7160e01b600052603260045260246000fd5b602002015182611767836006612889565b611772906004612721565b8151811061179057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508581815181106117bc57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600281106117e857634e487b7160e01b600052603260045260246000fd5b6020020151826117f9836006612889565b611804906005612721565b8151811061182257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061183781612926565b915050611546565b50611848611c5f565b6000602082602086026020860160086107d05a03fa90508061187c5760405162461bcd60e51b81526004016103009061233e565b5051151593505050505b92915050565b3b151590565b606083156118a1575081610ce5565b8251156118b15782518084602001fd5b8160405162461bcd60e51b815260040161030091906122cc565b60006118866000805160206129cd833981519152806118ec8560038361191d565b6118f7906003612721565b6119019190612965565b90611968565b8051600090158015611886575050602001511590565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa61195e57600080fd5b5051949350505050565b60006119748383611b49565b60011461198357506000611886565b8261199057506000611886565b61199b600483612965565b600314156119cb576119c48360046119b4856001612721565b6119be9190612761565b8461191d565b9050611886565b60006119d86001846128a8565b905060005b6119e8600283612965565b611a0b576119f7600283612761565b9150611a04816001612721565b90506119dd565b60025b611a188186611b49565b60001914611a3257611a2b816001612721565b9050611a0e565b6000611a55876002611a45876001612721565b611a4f9190612761565b8861191d565b90506000611a6488868961191d565b90506000611a7384878a61191d565b905084600080845b5060009050845b83821015611ab8578060011415611a9857611ab8565b611aa48160028e61191d565b905081611ab081612926565b925050611a82565b81611acf57869a5050505050505050505050611886565b611afa856001611adf85886128a8565b611ae991906128a8565b611af49060026127bb565b8e61191d565b92508b611b078480612889565b611b119190612965565b94508b611b1e8489612889565b611b289190612965565b96508b611b358688612889565b611b3f9190612965565b9550819350611a7b565b600080611b6d846002611b5d6001876128a8565b611b679190612761565b8561191d565b9050801580611b7c5750806001145b15611b88579050611886565b611b936001846128a8565b811415611ba557600019915050611886565b60405162461bcd60e51b8152600401610300906122df565b5092915050565b6040518060400160405280611bd7611c7d565b8152602001611be4611c7d565b905290565b8260028101928215611c17579160200282015b82811115611c17578251825591602001919060010190611bfc565b50611c23929150611c9b565b5090565b604051806040016040528060008152602001600081525090565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5b80821115611c235760008155600101611c9c565b80356001600160a01b038116811461029b57600080fd5b60008083601f840112611cd8578182fd5b50813567ffffffffffffffff811115611cef578182fd5b602083019150836020828501011115611d0757600080fd5b9250929050565b600082601f830112611d1e578081fd5b813567ffffffffffffffff80821115611d3957611d396129a5565b604051601f8301601f191681016020018281118282101715611d5d57611d5d6129a5565b604052828152848301602001861015611d74578384fd5b82602086016020830137918201602001929092529392505050565b803563ffffffff8116811461029b57600080fd5b600060208284031215611db4578081fd5b610ce582611cb0565b600060208284031215611dce578081fd5b8135610ce5816129bb565b600060208284031215611dea578081fd5b8151610ce5816129bb565b600060208284031215611e06578081fd5b5051919050565b600080600060608486031215611e21578182fd5b505081359360208301359350604090920135919050565b60008060008060808587031215611e4d578081fd5b84359350602085013567ffffffffffffffff811115611e6a578182fd5b611e7687828801611d0e565b935050611e8560408601611cb0565b9396929550929360600135925050565b600080600080600060a08688031215611eac578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600080600080600060c08a8c031215611eec578384fd5b893567ffffffffffffffff80821115611f03578586fd5b611f0f8d838e01611cc7565b909b50995060208c0135915080821115611f27578586fd5b611f338d838e01611cc7565b909950975060408c0135915080821115611f4b578586fd5b50611f588c828d01611cc7565b90965094505060608a0135925060808a013560ff81168114611f78578283fd5b9150611f8660a08b01611d8f565b90509295985092959850929598565b600080600080600080600060e0888a031215611faf578283fd5b873567ffffffffffffffff811115611fc5578384fd5b611fd18a828b01611d0e565b975050611fe060208901611cb0565b9550611fee60408901611cb0565b9450606088013593506080880135925061200a60a08901611cb0565b915060c0880135905092959891949750929550565b600080600080600080600060e0888a031215612039578081fd5b873567ffffffffffffffff81111561204f578182fd5b61205b8a828b01611d0e565b9750506020880135955060408801359450606088013593506080880135925061200a60a08901611cb0565b8060005b60028110156120a957815184526020938401939091019060010161208a565b50505050565b8060005b60028110156120a95781548452602090930192600191820191016120b3565b600081518084526120ea8160208601602086016128bf565b601f01601f19169290920160200192915050565b600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b60006121278286612086565b6121346040830185612086565b82516121478160808501602087016128bf565b91909101608001949350505050565b60006121628286612086565b61216f6040830185612086565b50608081019190915260a00192915050565b600061218d8287612086565b61219a6040830186612086565b5060f89290921b6001600160f81b031916608083015260e01b6001600160e01b031916608182015260850192915050565b948552602085019390935260408401919091526060830152608082015260a00190565b600082516122008184602087016128bf565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b60006080825261226960808301876120d2565b828103602084015261227b81876120d2565b9415156040840152505063ffffffff9190911660609091015292915050565b6000606082526122ad60608301866120d2565b905060ff8416602083015263ffffffff83166040830152949350505050565b600060208252610ce560208301846120d2565b6020808252601d908201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e000000604082015260600190565b6020808252600e908201526d0dcdedcc6ca40dad2e6dac2e8c6d60931b604082015260600190565b60208082526019908201527f50616972696e67206f7065726174696f6e206661696c65642e00000000000000604082015260600190565b6020808252600890820152676f6e6c792044414f60c01b604082015260600190565b6020808252600890820152674f6e6c792044414f60c01b604082015260600190565b6020808252601290820152713bb937b7339032b837b1b410373ab6b132b960711b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601190820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b604082015260600190565b602080825260129082015271155395149554d511510810d3d395149050d560721b604082015260600190565b60208082526030908201527f726563656976655265717565737456323a20556e61626c6520746f206465636f60408201526f64652072657275726e6564206461746160801b606082015260800190565b602080825260119082015270105919081c1bda5b9d1cc819985a5b1959607a1b604082015260600190565b6020808252601190820152704e554c4c20414444524553532046524f4d60781b604082015260600190565b6020808252600f908201526e4e554c4c204144445245535320544f60881b604082015260600190565b6020808252600f908201526e6269746d61736b20746f6f2062696760881b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601590820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b604082015260600190565b60208082526017908201527f6e6f7420656e6f756768207061727469636970616e7473000000000000000000604082015260600190565b600060e0825261262960e083016120fe565b6001600160a01b03898116602085015260408401899052838203606085015261265282896120d2565b96811660808501529490941660a08301525060c00152509392505050565b600060e0825261268260e083016120fe565b88602084015287604084015282810360608401526126a081886120d2565b6080840196909652505060a081019290925260c0909101529392505050565b60006080820190506126d2828451612086565b6020830151611bbd6040840182612086565b608081016126f282846120af565b61188660408301600285016120af565b63ffffffff91909116815260200190565b60ff91909116815260200190565b6000821982111561273457612734612979565b500190565b600063ffffffff80831681851680830382111561275857612758612979565b01949350505050565b6000826127705761277061298f565b500490565b80825b600180861161278757506127b2565b81870482111561279957612799612979565b808616156127a657918102915b9490941c938002612778565b94509492505050565b6000610ce560001984846000826127d457506001610ce5565b816127e157506000610ce5565b81600181146127f757600281146128015761282e565b6001915050610ce5565b60ff84111561281257612812612979565b6001841b91508482111561282857612828612979565b50610ce5565b5060208310610133831016604e8410600b8410161715612861575081810a8381111561285c5761285c612979565b610ce5565b61286e8484846001612775565b80860482111561288057612880612979565b02949350505050565b60008160001904831182151516156128a3576128a3612979565b500290565b6000828210156128ba576128ba612979565b500390565b60005b838110156128da5781810151838201526020016128c2565b838111156120a95750506000910152565b6002810460018216806128ff57607f821691505b6020821081141561292057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561293a5761293a612979565b5060010190565b600063ffffffff8083168181141561295b5761295b612979565b6001019392505050565b6000826129745761297461298f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146129c957600080fd5b5056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220bc01715dbf623dfbaa74db015e218ccdec75eafd5435b6b9691756354fde0cc864736f6c63430008000033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, listNode common.Address, forwarder common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, listNode, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCaller) ListNode(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_listNode")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCallerSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCallerSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCallerSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCallerSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCallerSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCallerSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x674822e4.
//
// Solidity: function receiveRequestV2(bytes32 reqId, bytes b, address receiveSide, bytes32 bridgeFrom) returns()
func (_Bridge *BridgeTransactor) ReceiveRequestV2(opts *bind.TransactOpts, reqId [32]byte, b []byte, receiveSide common.Address, bridgeFrom [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "receiveRequestV2", reqId, b, receiveSide, bridgeFrom)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x674822e4.
//
// Solidity: function receiveRequestV2(bytes32 reqId, bytes b, address receiveSide, bytes32 bridgeFrom) returns()
func (_Bridge *BridgeSession) ReceiveRequestV2(reqId [32]byte, b []byte, receiveSide common.Address, bridgeFrom [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, reqId, b, receiveSide, bridgeFrom)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x674822e4.
//
// Solidity: function receiveRequestV2(bytes32 reqId, bytes b, address receiveSide, bytes32 bridgeFrom) returns()
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2(reqId [32]byte, b []byte, receiveSide common.Address, bridgeFrom [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, reqId, b, receiveSide, bridgeFrom)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2Solana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2_solana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2Solana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2Solana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2Solana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2Solana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactor) UpdateEpoch(opts *bind.TransactOpts, _newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateEpoch", _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactorSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// BridgeNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Bridge contract.
type BridgeNewEpochIterator struct {
	Event *BridgeNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewEpoch represents a NewEpoch event raised by the Bridge contract.
type BridgeNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*BridgeNewEpochIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &BridgeNewEpochIterator{contract: _Bridge.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *BridgeNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewEpoch)
				if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) ParseNewEpoch(log types.Log) (*BridgeNewEpoch, error) {
	event := new(BridgeNewEpoch)
	if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the Bridge contract.
type BridgeOracleRequestIterator struct {
	Event *BridgeOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequest represents a OracleRequest event raised by the Bridge contract.
type BridgeOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*BridgeOracleRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestIterator{contract: _Bridge.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequest)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequest(log types.Log) (*BridgeOracleRequest, error) {
	event := new(BridgeOracleRequest)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the Bridge contract.
type BridgeOracleRequestSolanaIterator struct {
	Event *BridgeOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequestSolana represents a OracleRequestSolana event raised by the Bridge contract.
type BridgeOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    [32]byte
	OppositeBridge [32]byte
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*BridgeOracleRequestSolanaIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestSolanaIterator{contract: _Bridge.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequestSolana)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequestSolana(log types.Log) (*BridgeOracleRequestSolana, error) {
	event := new(BridgeOracleRequestSolana)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousDao common.Address
	NewDao      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousDao []common.Address, newDao []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousDao []common.Address, newDao []common.Address) (event.Subscription, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the Bridge contract.
type BridgeReceiveRequestIterator struct {
	Event *BridgeReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeReceiveRequest represents a ReceiveRequest event raised by the Bridge contract.
type BridgeReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	SenderSide  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xd1ba58dc4ce565b871bd478664bd9e39d82de1e1fd0e7c0da61d124e6d42af99.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom, bytes32 senderSide)
func (_Bridge *BridgeFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*BridgeReceiveRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeReceiveRequestIterator{contract: _Bridge.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xd1ba58dc4ce565b871bd478664bd9e39d82de1e1fd0e7c0da61d124e6d42af99.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom, bytes32 senderSide)
func (_Bridge *BridgeFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *BridgeReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeReceiveRequest)
				if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xd1ba58dc4ce565b871bd478664bd9e39d82de1e1fd0e7c0da61d124e6d42af99.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom, bytes32 senderSide)
func (_Bridge *BridgeFilterer) ParseReceiveRequest(log types.Log) (*BridgeReceiveRequest, error) {
	event := new(BridgeReceiveRequest)
	if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
