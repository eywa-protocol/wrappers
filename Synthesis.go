// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// SynthesisMetaData contains all meta data concerning the Synthesis contract.
var SynthesisMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rtoken\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stoken\",\"type\":\"address\"}],\"name\":\"CreatedRepresentation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RevertBurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realToken\",\"type\":\"bytes32\"}],\"name\":\"SynthTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"SynthesizeCompletedSolana\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_RENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_SYSTEM_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_TOKEN_PROGRAM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"burnSyntheticTokenToSolana\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"changeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_chainSymbol\",\"type\":\"string\"}],\"name\":\"createRepresentation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_trustedEmergencyExecuter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnburn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnsyntesizeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pubkeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes1\",\"name\":\"_bumpSynthesizeRequest\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"emergencyUnsyntesizeRequestToSolana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListRepresentation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rtoken\",\"type\":\"bytes32\"}],\"name\":\"getRepresentation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"initializeFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenReal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"representationReal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"representationSynt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"stoken\",\"type\":\"address\"},{\"internalType\":\"enumSynthesis.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"programId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pubkey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWritable\",\"type\":\"bool\"}],\"internalType\":\"structSolanaSerialize.SolanaAccountMeta[]\",\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSolanaSerialize.SolanaStandaloneInstruction\",\"name\":\"ix\",\"type\":\"tuple\"}],\"name\":\"serializeSolanaStandaloneInstruction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setCurveProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashEmergencyUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sighashUnsynthesize\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenReal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structSynthesis.SynthParams\",\"name\":\"_synthParams\",\"type\":\"tuple\"}],\"name\":\"synthTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"synthesizeStates\",\"outputs\":[{\"internalType\":\"enumSynthesis.SynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615b03806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620002495760003560e01c80638da5cb5b116200013d578063d30f8cb111620000bb578063e78cea921162000086578063e78cea921462000608578063e834e4ad146200061c578063ec5568891462000626578063edff2c82146200063a578063f2fde38b146200066257600080fd5b8063d30f8cb114620005ac578063d32a991e14620005c3578063d8a14a9314620005da578063da74222814620005f157600080fd5b8063a5ec52661162000108578063a5ec52661462000503578063b04640b7146200051d578063bca738231462000534578063beee73781462000560578063d23fd796146200057757600080fd5b80638da5cb5b146200045a5780639500125b146200046c578063966e0fe914620004835780639d866985146200049a57600080fd5b806344aedc5f11620001cb57806352dd22ee116200019657806352dd22ee14620003dc578063572b6c0514620003e5578063715018a6146200041b5780637c6a151b14620004255780637da0a877146200044857600080fd5b806344aedc5f1462000378578063456eb8b814620003b1578063486ff0cd14620003bb578063502430cd14620003c557600080fd5b806321f1aa0f116200021857806321f1aa0f14620002df5780632ab8c8b014620002f65780632b1106e3146200031c5780633410c15f14620003445780633e7e25c1146200035b57600080fd5b8063067bd07a146200024e57806308774410146200026d5780630e03e49014620002865780632036f36e14620002b3575b600080fd5b6200025a631de44e3d81565b6040519081526020015b60405180910390f35b620002846200027e36600462003300565b62000679565b005b6200029a6200029736600462003325565b90565b6040516001600160a01b03909116815260200162000264565b6200029a620002c436600462003325565b6067602052600090815260409020546001600160a01b031681565b62000284620002f0366004620033a0565b620006f3565b6200030d6200030736600462003533565b62000d34565b604051620002649190620036ed565b6200025a7f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000081565b620002846200035536600462003702565b62000f3c565b6200025a6200036c36600462003300565b6001600160a01b031690565b6200039e6200038936600462003325565b60686020526000908152604090205460ff1681565b60405160ff909116815260200162000264565b6200030d62001066565b6200030d620010a1565b62000284620003d63660046200373a565b62001137565b6200025a600081565b6200040a620003f636600462003300565b6065546001600160a01b0391821691161490565b604051901515815260200162000264565b6200028462001448565b6200025a6200043636600462003300565b60666020526000908152604090205481565b6065546001600160a01b03166200029a565b6033546001600160a01b03166200029a565b620002846200047d3660046200378d565b620014a5565b6200025a62000494366004620037fe565b6200172b565b620004ef620004ab36600462003325565b606a6020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b03811690600160a01b900460ff1686565b6040516200026496959493929190620038ae565b6200050d62001f53565b60405162000264929190620038f5565b620002846200052e3660046200397d565b6200209d565b6200029a6200054536600462003325565b6000908152606760205260409020546001600160a01b031690565b6200025a62000571366004620039e6565b620024e8565b6200059d6200058836600462003325565b606b6020526000908152604090205460ff1681565b60405162000264919062003a69565b62000284620005bd36600462003300565b620027e2565b62000284620005d436600462003a7e565b62002853565b62000284620005eb36600462003ac9565b62002a5c565b620002846200060236600462003300565b62002cc8565b606c546200029a906001600160a01b031681565b6200030d62002d25565b606d546200029a906001600160a01b031681565b6200025a7f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a981565b620002846200067336600462003300565b62002d4e565b6200068362002e0f565b6001600160a01b03166200069f6033546001600160a01b031690565b6001600160a01b031614620006d15760405162461bcd60e51b8152600401620006c89062003b80565b60405180910390fd5b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b631de44e3d8414620007485760405162461bcd60e51b815260206004820152601c60248201527f53796e7468657369733a20696e636f727265637420636861696e4964000000006044820152606401620006c8565b606c546000906001600160a01b0316632d0335ab6200076662002e0f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620007ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d1919062003bb5565b905060006200083089896002818110620007ef57620007ef62003bcf565b60200291909101359050631de44e3d8b8b600081811062000814576200081462003bcf565b90506020020135620008296200036c62002e0f565b8662002e45565b905060016000828152606b602052604090205460ff1660028111156200085a576200085a62003879565b14156200087b5760405162461bcd60e51b8152600401620006c89062003be5565b6000818152606b6020526040808220805460ff1916600217905580516007808252610100820190925290816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181620008aa5750506040805160608101909152909150808b8b6001818110620008fc57620008fc62003bcf565b90506020020135815260200160001515815260200160001515815250816000815181106200092e576200092e62003bcf565b60209081029190910101526040805160608101909152808b8b60048181106200095b576200095b62003bcf565b90506020020135815260200160001515815260200160011515815250816001815181106200098d576200098d62003bcf565b60209081029190910101526040805160608101909152808b8b6007818110620009ba57620009ba62003bcf565b9050602002013581526020016000151581526020016000151581525081600281518110620009ec57620009ec62003bcf565b60209081029190910101526040805160608101909152808b8b600581811062000a195762000a1962003bcf565b905060200201358152602001600015158152602001600115158152508160038151811062000a4b5762000a4b62003bcf565b60209081029190910101526040805160608101909152808b8b600681811062000a785762000a7862003bcf565b905060200201358152602001600015158152602001600115158152508160048151811062000aaa5762000aaa62003bcf565b60209081029190910101526040805160608101909152808b8b600381811062000ad75762000ad762003bcf565b905060200201358152602001600115158152602001600015158152508160058151811062000b095762000b0962003bcf565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160068151811062000b6e5762000b6e62003bcf565b6020908102919091010152606c5460408051606081019091526001600160a01b03909116906331b433f99062000c2f90808e8e600081811062000bb55762000bb562003bcf565b9050602002013581526020018581526020016066606b60976032608d60ac60f4603f60405160200162000bf098979695949392919062003c2f565b60408051601f198184030181529082905262000c17918f908e908e908e9060200162003c8a565b60405160208183030381529060405281525062000d34565b8c8c600081811062000c455762000c4562003bcf565b602002919091013590508d8d600281811062000c655762000c6562003bcf565b90506020020135631de44e3d8762000c7c62002e0f565b8a6040518863ffffffff1660e01b815260040162000ca1979695949392919062003cd3565b6020604051808303816000875af115801562000cc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce7919062003d22565b5062000cf262002e0f565b6001600160a01b0316827f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050505050565b60208082015151604051606092600883811c62ff00ff1663ff00ff009490911b9390931692909217601081811c91901b179160009162000d899184910160e09190911b6001600160e01b031916815260040190565b6040516020818303038152906040529050606060005b85602001515181101562000e97578560200151818151811062000dc65762000dc662003bcf565b6020026020010151600001518660200151828151811062000deb5762000deb62003bcf565b6020026020010151602001518760200151838151811062000e105762000e1062003bcf565b60200260200101516040015160405160200162000e4a9392919092835290151560f890811b6020840152901515901b602182015260220190565b6040516020818303038152906040529150828260405160200162000e7092919062003d42565b6040516020818303038152906040529250808062000e8e9062003d75565b91505062000d9f565b50845160405162000ead91849160200162003d9f565b60408051601f198184030181528282529087015151600881811c62ff00ff1663ff00ff009290911b9190911617601081811c91901b179450925062000ef9908390859060200162003dc3565b604051602081830303815290604052915081856040015160405160200162000f2392919062003d42565b60408051601f1981840301815291905295945050505050565b600054610100900460ff1662000f595760005460ff161562000f5d565b303b155b62000fc25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620006c8565b600054610100900460ff1615801562000fe5576000805461ffff19166101011790555b62000fef62002e92565b62000ff962002ebc565b60408051808201909152600580825264322e322e3360d81b60209092019182526200102791606e916200322f565b50606c80546001600160a01b0319166001600160a01b0385161790556200104e8262002efa565b801562001061576000805461ff00191690555b505050565b607360ea606f606d608360a7602560466040516020016200108f98979695949392919062003c2f565b60405160208183030381529060405281565b606e8054620010b09062003df7565b80601f0160208091040260200160405190810160405280929190818152602001828054620010de9062003df7565b80156200112f5780601f1062001103576101008083540402835291602001916200112f565b820191906000526020600020905b8154815290600101906020018083116200111157829003601f168201915b505050505081565b606c546001600160a01b031633146200118c5760405162461bcd60e51b815260206004820152601660248201527553796e7468657369733a20627269646765206f6e6c7960501b6044820152606401620006c8565b6000858152606a6020908152604080832081518084018a90526bffffffffffffffffffffffff1960608a901b16818401524660548201527f656d657267656e6379556e6275726e28627974657333322c616464726573732c60748201527575696e74382c627974657333322c627974657333322960501b60948201528251808203608a01815260aa820184528051908501207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060ca83015260e680830182905284518084039091018152610106909201909352805193019290922091929091620012799087878762002f1c565b905060016004840154600160a01b900460ff166002811115620012a057620012a062003879565b14620013065760405162461bcd60e51b815260206004820152602e60248201527f53796e7468657369733a207374617465206e6f74206f70656e206f722074782060448201526d191bd95cc81b9bdd08195e1a5cdd60921b6064820152608401620006c8565b6001600160a01b038116835414620013615760405162461bcd60e51b815260206004820152601b60248201527f53796e7468657369733a20696e76616c6964207478206f776e657200000000006044820152606401620006c8565b60048381018054600160a11b60ff60a01b19821617909155845460028601546040516340c10f1960e01b81526001600160a01b0392831694810194909452602484015216906340c10f1990604401600060405180830381600087803b158015620013ca57600080fd5b505af1158015620013df573d6000803e3d6000fd5b505084549150620013ed9050565b60028401546004850154604080519283526001600160a01b0391821660208401529216918a917f9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615910160405180910390a35050505050505050565b6200145262002e0f565b6001600160a01b03166200146e6033546001600160a01b031690565b6001600160a01b031614620014975760405162461bcd60e51b8152600401620006c89062003b80565b620014a36000620030cd565b565b60016000888152606b602052604090205460ff166002811115620014cd57620014cd62003879565b1415620014ee5760405162461bcd60e51b8152600401620006c89062003be5565b6000878152606b60209081526040808320805460ff19166002179055805160608101909152603b808252909162005a339083013980519060200120886200153462002e0f565b60405160248101929092526001600160a01b0316604482015260ff861660648201526084810185905260a4810184905260c40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152606c549091506000906001600160a01b0316632d0335ab620015ba62002e0f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620015ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001625919062003bb5565b90506000620016506001600160a01b038916886001600160a01b038c16620008296200036c62002e0f565b606c549091506001600160a01b031663329ef45f848b8b8b866200167362002e0f565b896040518863ffffffff1660e01b815260040162001698979695949392919062003e34565b6020604051808303816000875af1158015620016b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016de919062003d22565b50620016e962002e0f565b6001600160a01b0316817f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a350505050505050505050565b6000631de44e3d8214620017825760405162461bcd60e51b815260206004820152601c60248201527f53796e7468657369733a20696e636f727265637420636861696e4964000000006044820152606401620006c8565b67ffffffffffffffff8310620017db5760405162461bcd60e51b815260206004820152601b60248201527f53796e7468657369733a20616d6f756e7420746f6f206c6172676500000000006044820152606401620006c8565b65ff000000ff00600884811b91821664ff000000ff9186901c91821617601090811b67ff000000ff0000009390931666ff000000ff00009290921691909117901c17602081811b6bffffffffffffffff000000001691901c63ffffffff16176001600160a01b038816639dc29fac6200185362002e0f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b1580156200189c57600080fd5b505af1158015620018b1573d6000803e3d6000fd5b5050606c54604051632d0335ab60e01b81526001600160a01b038b81166004830152600094509091169150632d0335ab90602401602060405180830381865afa15801562001903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001929919062003bb5565b9050620019898787600281811062001945576200194562003bcf565b60200291909101359050631de44e3d898960008181106200196a576200196a62003bcf565b90506020020135620019828c6001600160a01b031690565b8562002e45565b604080516009808252610140820190925291945060009190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181620019a657505060408051606081019091529091508089896001818110620019f857620019f862003bcf565b905060200201358152602001600015158152602001600015158152508160008151811062001a2a5762001a2a62003bcf565b60209081029190910101526040805160608101909152808989600781811062001a575762001a5762003bcf565b905060200201358152602001600015158152602001600015158152508160018151811062001a895762001a8962003bcf565b60209081029190910101526040805160608101909152808989600481811062001ab65762001ab662003bcf565b905060200201358152602001600015158152602001600115158152508160028151811062001ae85762001ae862003bcf565b60209081029190910101526040805160608101909152808989600581811062001b155762001b1562003bcf565b905060200201358152602001600015158152602001600115158152508160038151811062001b475762001b4762003bcf565b60209081029190910101526040805160608101909152808989600681811062001b745762001b7462003bcf565b905060200201358152602001600015158152602001600115158152508160048151811062001ba65762001ba662003bcf565b60209081029190910101526040805160608101909152808989600381811062001bd35762001bd362003bcf565b905060200201358152602001600115158152602001600015158152508160058151811062001c055762001c0562003bcf565b602002602001018190525060405180606001604052807f06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a960001b8152602001600015158152602001600015158152508160068151811062001c6a5762001c6a62003bcf565b602002602001018190525060405180606001604052807f06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000060001b8152602001600015158152602001600015158152508160078151811062001ccf5762001ccf62003bcf565b602002602001018190525060405180606001604052806000801b8152602001600015158152602001600015158152508160088151811062001d145762001d1462003bcf565b6020908102919091010152606c5460408051606081019091526001600160a01b03909116906331b433f99062001db790808c8c600081811062001d5b5762001d5b62003bcf565b905060200201358152602001858152602001607360ea606f606d608360a76025604660405160200162001d9698979695949392919062003c2f565b60408051601f198184030181529082905262000c17918a9060200162003e86565b8a8a600081811062001dcd5762001dcd62003bcf565b602002919091013590508b8b600281811062001ded5762001ded62003bcf565b90506020020135631de44e3d898f896040518863ffffffff1660e01b815260040162001e20979695949392919062003cd3565b6020604051808303816000875af115801562001e40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e66919062003d22565b506000848152606a602052604090206001600160a01b038a1681558888600681811062001e975762001e9762003bcf565b602002919091013560018301555060048101805460028301899055600160a01b6001600160a81b03199091166001600160a01b038e16171790558888600681811062001ee75762001ee762003bcf565b905060200201358a6001600160a01b0316867fc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c68a8f60405162001f3d9291909182526001600160a01b0316602082015260400190565b60405180910390a4505050509695505050505050565b606954606090819060008167ffffffffffffffff81111562001f795762001f7962003437565b60405190808252806020026020018201604052801562001fa3578160200160208202803683370190505b50905060005b828110156200203b57606760006069838154811062001fcc5762001fcc62003bcf565b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b03168282815181106200200e576200200e62003bcf565b6001600160a01b039092166020928302919091019091015280620020328162003d75565b91505062001fa9565b50606981818054806020026020016040519081016040528092919081815260200182805480156200208c57602002820191906000526020600020905b81548152602001906001019080831162002077575b505050505091509350935050509091565b6000858152606760205260409020546001600160a01b031680620021045760405162461bcd60e51b815260206004820152601a60248201527f53796e7468657369733a2073796e7468206e6f7420666f756e640000000000006044820152606401620006c8565b8160400135816001600160a01b0316633408e4706040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002170919062003bb5565b1415620021da5760405162461bcd60e51b815260206004820152603160248201527f53796e7468657369733a2063616e206e6f742073796e74686573697a6520696e604482015270103a34329034b73a34b0b61031b430b4b760791b6064820152608401620006c8565b806001600160a01b0316639dc29fac620021f362002e0f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101889052604401600060405180830381600087803b1580156200223c57600080fd5b505af115801562002251573d6000803e3d6000fd5b5050606c54604051632d0335ab60e01b81526001600160a01b038881166004830152600094509091169150632d0335ab90602401602060405180830381865afa158015620022a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022c9919062003bb5565b905060006200230f620022e76200036c604087016020880162003300565b6040860135620022ff6200036c602089018962003300565b6001600160a01b038a1662000829565b9050600060405180606001604052806033815260200162005a9b60339139805160209091012060405160248101849052604481018b9052606481018a90526001600160a01b038816608482015260a40160408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b031990941693909317909252606c549092506001600160a01b03169063329ef45f908390620023b89089018962003300565b620023ca60408a0160208b0162003300565b8960400135878d8a6040518863ffffffff1660e01b8152600401620023f6979695949392919062003e34565b6020604051808303816000875af115801562002416573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200243c919062003d22565b506000828152606a602052604090206001600160a01b03881681556001600160a01b0387166001820155600481018054600283018b9055600160a01b6001600160a81b03199091166001600160a01b038881169190911791909117909155604080518b8152602081018d9052898316928b169186917fea223381588a80dc010e33d8cfcb15d108292534e74a2a0ac274b4c8b8c3c714910160405180910390a450505050505050505050565b6000876001600160a01b0316639dc29fac6200250362002e0f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018a9052604401600060405180830381600087803b1580156200254c57600080fd5b505af115801562002561573d6000803e3d6000fd5b5050606c54604051632d0335ab60e01b81526001600160a01b038a81166004830152600094509091169150632d0335ab90602401602060405180830381865afa158015620025b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025d9919062003bb5565b9050620026046001600160a01b038516846001600160a01b0388166001600160a01b038b1662001982565b915060006040518060600160405280602d815260200162005a6e602d913980516020918201206001600160a01b03808d1660009081526066909352604092839020549251602481018790526044810193909352606483018c9052891660848301529060a401604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050606c60009054906101000a90046001600160a01b03166001600160a01b031663329ef45f82888888888e896040518863ffffffff1660e01b8152600401620026ed979695949392919062003e34565b6020604051808303816000875af11580156200270d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002733919062003d22565b506000838152606a602052604090206001600160a01b03891681556001600160a01b0388166001820155600481018054600283018c9055600160a01b6001600160a81b03199091166001600160a01b038e811691821792909217909255604080518d815260208101939093528a821692918c169187917fc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75910160405180910390a4505050979650505050505050565b620027ec62002e0f565b6001600160a01b0316620028086033546001600160a01b031690565b6001600160a01b031614620028315760405162461bcd60e51b8152600401620006c89062003b80565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b606c546001600160a01b0316331480620028775750606d546001600160a01b031633145b620028c55760405162461bcd60e51b815260206004820181905260248201527f53796e7468657369733a206f6e6c79207472757374656420636f6e74726163746044820152606401620006c8565b6000848152606b602052604081205460ff166002811115620028eb57620028eb62003879565b14620029785760405162461bcd60e51b815260206004820152604f60248201527f53796e7468657369733a20656d657267656e6379556e73796e74686573697a6560448201527f64526571756573742063616c6c6564206f7220746f6b656e732068617665206260648201526e19595b881cde5b9d1a195cda5e9959608a1b608482015260a401620006c8565b6001600160a01b038381166000908152606760205260408082205481516340c10f1960e01b815285851660048201526024810187905291519316926340c10f199260448084019391929182900301818387803b158015620029d857600080fd5b505af1158015620029ed573d6000803e3d6000fd5b5050506000858152606b6020526040902080546001925060ff191682800217905550604080518381526001600160a01b03858116602083015283169186917f95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7910160405180910390a350505050565b62002a6662002e0f565b6001600160a01b031662002a826033546001600160a01b031690565b6001600160a01b03161462002aab5760405162461bcd60e51b8152600401620006c89062003b80565b6000868152606760205260409020546001600160a01b03161562002ae35760405162461bcd60e51b8152600401620006c89062003eba565b6001600160a01b0386166000908152606660205260409020541562002b1c5760405162461bcd60e51b8152600401620006c89062003eba565b600062002c0660008860405160200162002b3891815260200190565b604051602081830303815290604052805190602001206040518060200162002b6090620032be565b601f1982820381018352601f90910116604081905262002b85908a9060200162003f02565b6040516020818303038152906040528860405160200162002ba7919062003f02565b6040516020818303038152906040528b898e8a60405160200162002bd19695949392919062003f2d565b60408051601f198184030181529082905262002bf1929160200162003d42565b6040516020818303038152906040526200311f565b600088815260676020908152604080832080546001600160a01b0319166001600160a01b0386169081179091558352606682528083208b90558a835260689091528120805460ff191660ff8a161790556069805460018101825591527f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080188905590506040516001600160a01b0382169088907f0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac0290600090a350505050505050565b62002cd262002e0f565b6001600160a01b031662002cee6033546001600160a01b031690565b6001600160a01b03161462002d175760405162461bcd60e51b8152600401620006c89062003b80565b62002d228162002efa565b50565b6066606b60976032608d60ac60f4603f6040516020016200108f98979695949392919062003c2f565b62002d5862002e0f565b6001600160a01b031662002d746033546001600160a01b031690565b6001600160a01b03161462002d9d5760405162461bcd60e51b8152600401620006c89062003b80565b6001600160a01b03811662002e045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006c8565b62002d2281620030cd565b60006014361080159062002e2d57506065546001600160a01b031633145b1562002e40575060131936013560601c90565b503390565b6040805160208082019490945280820192909252606082019490945246608082015260a081019290925260c0808301949094528251808303909401845260e0909101909152815191012090565b600054610100900460ff16620014a35760405162461bcd60e51b8152600401620006c89062003f8e565b600054610100900460ff1662002ee65760405162461bcd60e51b8152600401620006c89062003f8e565b620014a362002ef462002e0f565b620030cd565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111562002f9b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620006c8565b8360ff16601b148062002fb157508360ff16601c145b6200300a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401620006c8565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156200305f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116620030c45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620006c8565b95945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008084471015620031745760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620006c8565b8251620031c45760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620006c8565b8383516020850187f590506001600160a01b038116620032275760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620006c8565b949350505050565b8280546200323d9062003df7565b90600052602060002090601f016020900481019282620032615760008555620032ac565b82601f106200327c57805160ff1916838001178555620032ac565b82800160010185558215620032ac579182015b82811115620032ac5782518255916020019190600101906200328f565b50620032ba929150620032cc565b5090565b611a598062003fda83390190565b5b80821115620032ba5760008155600101620032cd565b80356001600160a01b0381168114620032fb57600080fd5b919050565b6000602082840312156200331357600080fd5b6200331e82620032e3565b9392505050565b6000602082840312156200333857600080fd5b5035919050565b60008083601f8401126200335257600080fd5b50813567ffffffffffffffff8111156200336b57600080fd5b6020830191508360208260051b85010111156200338757600080fd5b9250929050565b803560ff81168114620032fb57600080fd5b600080600080600080600060c0888a031215620033bc57600080fd5b873567ffffffffffffffff811115620033d457600080fd5b620033e28a828b016200333f565b90985096505060208801356001600160f81b0319811681146200340457600080fd5b9450604088013593506200341b606089016200338e565b92506080880135915060a0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171562003473576200347362003437565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715620034a557620034a562003437565b604052919050565b801515811462002d2257600080fd5b600082601f830112620034ce57600080fd5b813567ffffffffffffffff811115620034eb57620034eb62003437565b62003500601f8201601f191660200162003479565b8181528460208386010111156200351657600080fd5b816020850160208301376000918101602001919091529392505050565b600060208083850312156200354757600080fd5b823567ffffffffffffffff808211156200356057600080fd5b818501915060608083880312156200357757600080fd5b620035816200344d565b8335815284840135838111156200359757600080fd5b8401601f81018913620035a957600080fd5b803584811115620035be57620035be62003437565b620035ce878260051b0162003479565b8181529084028201870190878101908b831115620035eb57600080fd5b928801925b82841015620036505785848d0312156200360a5760008081fd5b620036146200344d565b84358152898501356200362781620034ad565b818b01526040858101356200363c81620034ad565b9082015282529285019290880190620035f0565b80898601525050505060408401359450828511156200366e57600080fd5b6200367c88868601620034bc565b6040820152979650505050505050565b60005b83811015620036a95781810151838201526020016200368f565b83811115620036b9576000848401525b50505050565b60008151808452620036d98160208601602086016200368c565b601f01601f19169290920160200192915050565b6020815260006200331e6020830184620036bf565b600080604083850312156200371657600080fd5b6200372183620032e3565b91506200373160208401620032e3565b90509250929050565b600080600080600060a086880312156200375357600080fd5b853594506200376560208701620032e3565b935062003775604087016200338e565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a031215620037a957600080fd5b87359650620037bb60208901620032e3565b9550620037cb60408901620032e3565b945060608801359350620037e2608089016200338e565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060a087890312156200381857600080fd5b6200382387620032e3565b95506200383360208801620032e3565b9450604087013567ffffffffffffffff8111156200385057600080fd5b6200385e89828a016200333f565b979a9699509760608101359660809091013595509350505050565b634e487b7160e01b600052602160045260246000fd5b6003811062002d2257634e487b7160e01b600052602160045260246000fd5b8681526020810186905260408101859052606081018490526001600160a01b038316608082015260c08101620038e4836200388f565b8260a0830152979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015620039305781518452928401929084019060010162003912565b5050508381038285015284518082528583019183019060005b81811015620039705783516001600160a01b03168352928401929184019160010162003949565b5090979650505050505050565b600080600080600085870360e08112156200399757600080fd5b8635955060208701359450620039b060408801620032e3565b9350620039c060608801620032e3565b92506060607f1982011215620039d557600080fd5b506080860190509295509295909350565b600080600080600080600060e0888a03121562003a0257600080fd5b62003a0d88620032e3565b96506020880135955062003a2460408901620032e3565b945062003a3460608901620032e3565b935062003a4460808901620032e3565b925062003a5460a08901620032e3565b915060c0880135905092959891949750929550565b6020810162003a78836200388f565b91905290565b6000806000806080858703121562003a9557600080fd5b8435935062003aa760208601620032e3565b92506040850135915062003abe60608601620032e3565b905092959194509250565b60008060008060008060c0878903121562003ae357600080fd5b8635955062003af5602088016200338e565b9450604087013567ffffffffffffffff8082111562003b1357600080fd5b62003b218a838b01620034bc565b9550606089013591508082111562003b3857600080fd5b62003b468a838b01620034bc565b94506080890135935060a089013591508082111562003b6457600080fd5b5062003b7389828a01620034bc565b9150509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121562003bc857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602a908201527f53796e7468657369733a2073796e74686574696320746f6b656e7320616c726560408201526918591e481b5a5b9d195960b21b606082015260800190565b6001600160f81b031960f8998a1b8116825297891b8816600182015295881b8716600287015293871b8616600386015291861b85166004850152851b84166005840152841b8316600683015290921b16600782015260080190565b6000865162003c9e818460208b016200368c565b6001600160f81b031996871692019182525060f89390931b909316600183015260028201526022810191909152604201919050565b60e08152600062003ce860e083018a620036bf565b6020830198909852506040810195909552606085019390935260808401919091526001600160a01b031660a083015260c090910152919050565b60006020828403121562003d3557600080fd5b81516200331e81620034ad565b6000835162003d568184602088016200368c565b83519083019062003d6c8183602088016200368c565b01949350505050565b600060001982141562003d9857634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835162003db38184602088016200368c565b9190910191825250602001919050565b6000835162003dd78184602088016200368c565b60e09390931b6001600160e01b0319169190920190815260040192915050565b600181811c9082168062003e0c57607f821691505b6020821081141562003e2e57634e487b7160e01b600052602260045260246000fd5b50919050565b60e08152600062003e4960e083018a620036bf565b6001600160a01b0398891660208401529688166040830152506060810194909452608084019290925290931660a082015260c00191909152919050565b6000835162003e9a8184602088016200368c565b60c09390931b6001600160c01b0319169190920190815260080192915050565b60208082526028908201527f53796e7468657369733a20726570726573656e746174696f6e20616c72656164604082015267792065786973747360c01b606082015260800190565b606560f81b81526000825162003f208160018501602087016200368c565b9190910160010192915050565b60c08152600062003f4260c0830189620036bf565b828103602084015262003f568189620036bf565b905060ff8716604084015285606084015284608084015282810360a084015262003f818185620036bf565b9998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162001a5938038062001a598339810160408190526200005a9162000379565b6040518060400160405280600c81526020016b29bcb6b134b7b9b4b9a3a9a760a11b81525080604051806040016040528060018152602001603160f81b81525088886000620000ae6200020260201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081516200010d90600490602085019062000206565b5080516200012390600590602084019062000206565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805190850120905250610100528751620001c0925060079189019062000206565b50600882905560098390558051620001e090600a90602084019062000206565b5050600b805460ff191660ff9490941693909317909255506200047592505050565b3390565b828054620002149062000438565b90600052602060002090601f01602090048101928262000238576000855562000283565b82601f106200025357805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028357825182559160200191906001019062000266565b506200029192915062000295565b5090565b5b8082111562000291576000815560010162000296565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002d457600080fd5b81516001600160401b0380821115620002f157620002f1620002ac565b604051601f8301601f19908116603f011681019082821181831017156200031c576200031c620002ac565b816040528381526020925086838588010111156200033957600080fd5b600091505b838210156200035d57858201830151818301840152908201906200033e565b838211156200036f5760008385830101525b9695505050505050565b60008060008060008060c087890312156200039357600080fd5b86516001600160401b0380821115620003ab57600080fd5b620003b98a838b01620002c2565b97506020890151915080821115620003d057600080fd5b620003de8a838b01620002c2565b96506040890151915060ff82168214620003f757600080fd5b606089015160808a015160a08b01519397509095509350808211156200041c57600080fd5b506200042b89828a01620002c2565b9150509295509295509295565b600181811c908216806200044d57607f821691505b602082108114156200046f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051611594620004c5600039600061086901526000610de101526000610e3001526000610e0b01526000610d8f01526000610db801526115946000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806374773412116100f95780639f0c812511610097578063a918adf511610071578063a918adf514610347578063d505accf1461035a578063dd62ed3e1461036d578063f2fde38b1461038057600080fd5b80639f0c812514610319578063a457c2d714610321578063a9059cbb1461033457600080fd5b80638da5cb5b116100d35780638da5cb5b146102d057806395d89b41146102eb5780639be4e7b2146102f35780639dc29fac1461030657600080fd5b806374773412146102ac57806375325049146102b55780637ecebe00146102bd57600080fd5b806332424aa3116101665780633950935111610140578063395093511461025357806340c10f191461026657806370a082311461027b578063715018a6146102a457600080fd5b806332424aa3146102365780633408e470146102435780633644e5151461024b57600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ef57806323b872dd146102015780632e9800af14610214578063313ce5671461021d575b600080fd5b6101b6610393565b6040516101c391906112cb565b60405180910390f35b6101df6101da36600461133c565b610425565b60405190151581526020016101c3565b6003545b6040519081526020016101c3565b6101df61020f366004611366565b61043b565b6101f360085481565b600b5460ff165b60405160ff90911681526020016101c3565b600b546102249060ff1681565b6009546101f3565b6101f36104f1565b6101df61026136600461133c565b610500565b61027961027436600461133c565b610537565b005b6101f36102893660046113a2565b6001600160a01b031660009081526001602052604090205490565b61027961056f565b6101f360095481565b6101b66105e3565b6101f36102cb3660046113a2565b610671565b6000546040516001600160a01b0390911681526020016101c3565b6101b6610691565b610279610301366004611366565b6106a0565b61027961031436600461133c565b6106f3565b6101b6610727565b6101df61032f36600461133c565b610734565b6101df61034236600461133c565b610791565b610279610355366004611366565b61079e565b6102796103683660046113c4565b610815565b6101f361037b366004611437565b610979565b61027961038e3660046113a2565b6109a4565b6060600480546103a29061146a565b80601f01602080910402602001604051908101604052809291908181526020018280546103ce9061146a565b801561041b5780601f106103f05761010080835404028352916020019161041b565b820191906000526020600020905b8154815290600101906020018083116103fe57829003601f168201915b5050505050905090565b6000610432338484610a8e565b50600192915050565b6000610448848484610bb3565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156104d25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104e685336104e186856114b5565b610a8e565b506001949350505050565b60006104fb610d8b565b905090565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916104329185906104e19086906114cc565b6000546001600160a01b031633146105615760405162461bcd60e51b81526004016104c9906114e4565b61056b8282610e7e565b5050565b6000546001600160a01b031633146105995760405162461bcd60e51b81526004016104c9906114e4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600a80546105f09061146a565b80601f016020809104026020016040519081016040528092919081815260200182805461061c9061146a565b80156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b505050505081565b6001600160a01b0381166000908152600660205260408120545b92915050565b6060600580546103a29061146a565b6000546001600160a01b031633146106ca5760405162461bcd60e51b81526004016104c9906114e4565b6106d48382610e7e565b6106ee8383836106e48787610979565b6104e191906114cc565b505050565b6000546001600160a01b0316331461071d5760405162461bcd60e51b81526004016104c9906114e4565b61056b8282610f5d565b600780546105f09061146a565b3360009081526002602090815260408083206001600160a01b0386168452909152812054828110156107785760405162461bcd60e51b81526004016104c990611519565b61078733856104e186856114b5565b5060019392505050565b6000610432338484610bb3565b6000546001600160a01b031633146107c85760405162461bcd60e51b81526004016104c9906114e4565b60006107d48484610979565b9050818110156107f65760405162461bcd60e51b81526004016104c990611519565b61080584846104e185856114b5565b61080f8483610f5d565b50505050565b834211156108655760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104c9565b60007f00000000000000000000000000000000000000000000000000000000000000008888886108948c6110ac565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006108ef826110d4565b905060006108ff82878787611122565b9050896001600160a01b0316816001600160a01b0316146109625760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104c9565b61096d8a8a8a610a8e565b50505050505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000546001600160a01b031633146109ce5760405162461bcd60e51b81526004016104c9906114e4565b6001600160a01b038116610a335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c9565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610af05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c9565b6001600160a01b038216610b515760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c9565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610c175760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c9565b6001600160a01b038216610c795760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c9565b6001600160a01b03831660009081526001602052604090205481811015610cf15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104c9565b610cfb82826114b5565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290610d319084906114cc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d7d91815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610dda57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610ed45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104c9565b8060036000828254610ee691906114cc565b90915550506001600160a01b03821660009081526001602052604081208054839290610f139084906114cc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610fbd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104c9565b6001600160a01b038216600090815260016020526040902054818110156110315760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104c9565b61103b82826114b5565b6001600160a01b038416600090815260016020526040812091909155600380548492906110699084906114b5565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ba6565b6001600160a01b03811660009081526006602052604090208054600181018255905b50919050565b600061068b6110e1610d8b565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561119f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104c9565b8360ff16601b14806111b457508360ff16601c145b61120b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104c9565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561125f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112c25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104c9565b95945050505050565b600060208083528351808285015260005b818110156112f8578581018301518582016040015282016112dc565b8181111561130a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461133757600080fd5b919050565b6000806040838503121561134f57600080fd5b61135883611320565b946020939093013593505050565b60008060006060848603121561137b57600080fd5b61138484611320565b925061139260208501611320565b9150604084013590509250925092565b6000602082840312156113b457600080fd5b6113bd82611320565b9392505050565b600080600080600080600060e0888a0312156113df57600080fd5b6113e888611320565b96506113f660208901611320565b95506040880135945060608801359350608088013560ff8116811461141a57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561144a57600080fd5b61145383611320565b915061146160208401611320565b90509250929050565b600181811c9082168061147e57607f821691505b602082108114156110ce57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156114c7576114c761149f565b500390565b600082198211156114df576114df61149f565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b60608201526080019056fea26469706673582212200506df1b20cf72db9456aeaa85de51ccdc80b5a8080e5d680989031094f4151064736f6c634300080a0033656d657267656e6379556e73796e74686573697a6528627974657333322c616464726573732c75696e74382c627974657333322c62797465733332756e73796e74686573697a6528627974657333322c616464726573732c75696e743235362c61646472657373296d696e7453796e746865746963546f6b656e28627974657333322c616464726573732c75696e743235362c6164647265737329a2646970667358221220b2e4f80f7739c7c74560c838173a6c1878ba7920434d525ca613ec9032bb899664736f6c634300080a0033",
}

// SynthesisABI is the input ABI used to generate the binding from.
// Deprecated: Use SynthesisMetaData.ABI instead.
var SynthesisABI = SynthesisMetaData.ABI

// SynthesisBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SynthesisMetaData.Bin instead.
var SynthesisBin = SynthesisMetaData.Bin

// DeploySynthesis deploys a new Ethereum contract, binding an instance of Synthesis to it.
func DeploySynthesis(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Synthesis, error) {
	parsed, err := SynthesisMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SynthesisBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// Synthesis is an auto generated Go binding around an Ethereum contract.
type Synthesis struct {
	SynthesisCaller     // Read-only binding to the contract
	SynthesisTransactor // Write-only binding to the contract
	SynthesisFilterer   // Log filterer for contract events
}

// SynthesisCaller is an auto generated read-only Go binding around an Ethereum contract.
type SynthesisCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SynthesisTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_Synthesis *SynthesisTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_Synthesis.gsn = opts
}

// SynthesisFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SynthesisFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SynthesisSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SynthesisSession struct {
	Contract     *Synthesis        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SynthesisCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SynthesisCallerSession struct {
	Contract *SynthesisCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SynthesisTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SynthesisTransactorSession struct {
	Contract     *SynthesisTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SynthesisRaw is an auto generated low-level Go binding around an Ethereum contract.
type SynthesisRaw struct {
	Contract *Synthesis // Generic contract binding to access the raw methods on
}

// SynthesisCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SynthesisCallerRaw struct {
	Contract *SynthesisCaller // Generic read-only contract binding to access the raw methods on
}

// SynthesisTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SynthesisTransactorRaw struct {
	Contract *SynthesisTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSynthesis creates a new instance of Synthesis, bound to a specific deployed contract.
func NewSynthesis(address common.Address, backend bind.ContractBackend) (*Synthesis, error) {
	contract, err := bindSynthesis(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Synthesis{SynthesisCaller: SynthesisCaller{contract: contract}, SynthesisTransactor: SynthesisTransactor{contract: contract}, SynthesisFilterer: SynthesisFilterer{contract: contract}}, nil
}

// NewSynthesisCaller creates a new read-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisCaller(address common.Address, caller bind.ContractCaller) (*SynthesisCaller, error) {
	contract, err := bindSynthesis(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisCaller{contract: contract}, nil
}

// NewSynthesisTransactor creates a new write-only instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisTransactor(address common.Address, transactor bind.ContractTransactor) (*SynthesisTransactor, error) {
	contract, err := bindSynthesis(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SynthesisTransactor{contract: contract}, nil
}

// NewSynthesisFilterer creates a new log filterer instance of Synthesis, bound to a specific deployed contract.
func NewSynthesisFilterer(address common.Address, filterer bind.ContractFilterer) (*SynthesisFilterer, error) {
	contract, err := bindSynthesis(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SynthesisFilterer{contract: contract}, nil
}

// bindSynthesis binds a generic wrapper to an already deployed contract.
func bindSynthesis(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SynthesisABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.SynthesisCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthesisTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Synthesis *SynthesisCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Synthesis.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Synthesis *SynthesisTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Synthesis *SynthesisTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Synthesis.Contract.contract.Transact(opts, method, params...)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCaller) SOLANACHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANACHAINID is a free data retrieval call binding the contract method 0x067bd07a.
//
// Solidity: function SOLANA_CHAIN_ID() view returns(uint256)
func (_Synthesis *SynthesisCallerSession) SOLANACHAINID() (*big.Int, error) {
	return _Synthesis.Contract.SOLANACHAINID(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANARENT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_RENT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANARENT is a free data retrieval call binding the contract method 0x2b1106e3.
//
// Solidity: function SOLANA_RENT() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANARENT() ([32]byte, error) {
	return _Synthesis.Contract.SOLANARENT(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANASYSTEMPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_SYSTEM_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANASYSTEMPROGRAM is a free data retrieval call binding the contract method 0x52dd22ee.
//
// Solidity: function SOLANA_SYSTEM_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANASYSTEMPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANASYSTEMPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCaller) SOLANATOKENPROGRAM(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "SOLANA_TOKEN_PROGRAM")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// SOLANATOKENPROGRAM is a free data retrieval call binding the contract method 0xedff2c82.
//
// Solidity: function SOLANA_TOKEN_PROGRAM() view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) SOLANATOKENPROGRAM() ([32]byte, error) {
	return _Synthesis.Contract.SOLANATOKENPROGRAM(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_Synthesis *SynthesisCallerSession) Bridge() (common.Address, error) {
	return _Synthesis.Contract.Bridge(&_Synthesis.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Synthesis.Contract.CastToAddress(&_Synthesis.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_Synthesis *SynthesisCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _Synthesis.Contract.CastToAddress(&_Synthesis.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Synthesis.Contract.CastToBytes32(&_Synthesis.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_Synthesis *SynthesisCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _Synthesis.Contract.CastToBytes32(&_Synthesis.CallOpts, a)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCaller) GetListRepresentation(opts *bind.CallOpts) ([][32]byte, []common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getListRepresentation")

	if err != nil {
		return *new([][32]byte), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)

	return out0, out1, err

}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetListRepresentation is a free data retrieval call binding the contract method 0xa5ec5266.
//
// Solidity: function getListRepresentation() view returns(bytes32[], address[])
func (_Synthesis *SynthesisCallerSession) GetListRepresentation() ([][32]byte, []common.Address, error) {
	return _Synthesis.Contract.GetListRepresentation(&_Synthesis.CallOpts)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCaller) GetRepresentation(opts *bind.CallOpts, _rtoken [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "getRepresentation", _rtoken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// GetRepresentation is a free data retrieval call binding the contract method 0xbca73823.
//
// Solidity: function getRepresentation(bytes32 _rtoken) view returns(address)
func (_Synthesis *SynthesisCallerSession) GetRepresentation(_rtoken [32]byte) (common.Address, error) {
	return _Synthesis.Contract.GetRepresentation(&_Synthesis.CallOpts, _rtoken)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Synthesis *SynthesisCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Synthesis.Contract.IsTrustedForwarder(&_Synthesis.CallOpts, forwarder)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Synthesis *SynthesisCallerSession) Owner() (common.Address, error) {
	return _Synthesis.Contract.Owner(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCaller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "proxy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() view returns(address)
func (_Synthesis *SynthesisCallerSession) Proxy() (common.Address, error) {
	return _Synthesis.Contract.Proxy(&_Synthesis.CallOpts)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCaller) RepresentationReal(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationReal", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationReal is a free data retrieval call binding the contract method 0x7c6a151b.
//
// Solidity: function representationReal(address ) view returns(bytes32)
func (_Synthesis *SynthesisCallerSession) RepresentationReal(arg0 common.Address) ([32]byte, error) {
	return _Synthesis.Contract.RepresentationReal(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCaller) RepresentationSynt(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "representationSynt", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// RepresentationSynt is a free data retrieval call binding the contract method 0x2036f36e.
//
// Solidity: function representationSynt(bytes32 ) view returns(address)
func (_Synthesis *SynthesisCallerSession) RepresentationSynt(arg0 [32]byte) (common.Address, error) {
	return _Synthesis.Contract.RepresentationSynt(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Token  [32]byte
	Stoken common.Address
	State  uint8
}, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		From   [32]byte
		To     [32]byte
		Amount *big.Int
		Token  [32]byte
		Stoken common.Address
		State  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.From = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.To = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Token = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Stoken = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.State = *abi.ConvertType(out[5], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Token  [32]byte
	Stoken common.Address
	State  uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(bytes32 from, bytes32 to, uint256 amount, bytes32 token, address stoken, uint8 state)
func (_Synthesis *SynthesisCallerSession) Requests(arg0 [32]byte) (struct {
	From   [32]byte
	To     [32]byte
	Amount *big.Int
	Token  [32]byte
	Stoken common.Address
	State  uint8
}, error) {
	return _Synthesis.Contract.Requests(&_Synthesis.CallOpts, arg0)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCaller) SerializeSolanaStandaloneInstruction(opts *bind.CallOpts, ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "serializeSolanaStandaloneInstruction", ix)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SerializeSolanaStandaloneInstruction is a free data retrieval call binding the contract method 0x2ab8c8b0.
//
// Solidity: function serializeSolanaStandaloneInstruction((bytes32,(bytes32,bool,bool)[],bytes) ix) pure returns(bytes)
func (_Synthesis *SynthesisCallerSession) SerializeSolanaStandaloneInstruction(ix SolanaSerializeSolanaStandaloneInstruction) ([]byte, error) {
	return _Synthesis.Contract.SerializeSolanaStandaloneInstruction(&_Synthesis.CallOpts, ix)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashEmergencyUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashEmergencyUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashEmergencyUnsynthesize is a free data retrieval call binding the contract method 0xe834e4ad.
//
// Solidity: function sighashEmergencyUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashEmergencyUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashEmergencyUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCaller) SighashUnsynthesize(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "sighashUnsynthesize")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SighashUnsynthesize is a free data retrieval call binding the contract method 0x456eb8b8.
//
// Solidity: function sighashUnsynthesize() view returns(bytes)
func (_Synthesis *SynthesisCallerSession) SighashUnsynthesize() ([]byte, error) {
	return _Synthesis.Contract.SighashUnsynthesize(&_Synthesis.CallOpts)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCaller) SynthesizeStates(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "synthesizeStates", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// SynthesizeStates is a free data retrieval call binding the contract method 0xd23fd796.
//
// Solidity: function synthesizeStates(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCallerSession) SynthesizeStates(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.SynthesizeStates(&_Synthesis.CallOpts, arg0)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCaller) TokenDecimals(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "tokenDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisSession) TokenDecimals(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.TokenDecimals(&_Synthesis.CallOpts, arg0)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x44aedc5f.
//
// Solidity: function tokenDecimals(bytes32 ) view returns(uint8)
func (_Synthesis *SynthesisCallerSession) TokenDecimals(arg0 [32]byte) (uint8, error) {
	return _Synthesis.Contract.TokenDecimals(&_Synthesis.CallOpts, arg0)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisSession) TrustedForwarder() (common.Address, error) {
	return _Synthesis.Contract.TrustedForwarder(&_Synthesis.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Synthesis *SynthesisCallerSession) TrustedForwarder() (common.Address, error) {
	return _Synthesis.Contract.TrustedForwarder(&_Synthesis.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Synthesis.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Synthesis *SynthesisCallerSession) VersionRecipient() (string, error) {
	return _Synthesis.Contract.VersionRecipient(&_Synthesis.CallOpts)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0xbeee7378.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _from, address _to, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticToken(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "burnSyntheticToken", _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenOverGsn(opts *bind.TransactOpts, _stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "burnSyntheticToken", _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0xbeee7378.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _from, address _to, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}
func (_Synthesis *SynthesisSession) BurnSyntheticTokenOverGsn(_stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenOverGsn(&_Synthesis.TransactOpts, _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}

// BurnSyntheticToken is a paid mutator transaction binding the contract method 0xbeee7378.
//
// Solidity: function burnSyntheticToken(address _stoken, uint256 _amount, address _from, address _to, address _receiveSide, address _oppositeBridge, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticToken(_stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticToken(&_Synthesis.TransactOpts, _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenOverGsn(_stoken common.Address, _amount *big.Int, _from common.Address, _to common.Address, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenOverGsn(&_Synthesis.TransactOpts, _stoken, _amount, _from, _to, _receiveSide, _oppositeBridge, _chainId)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x966e0fe9.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, address _from, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenToSolana(opts *bind.TransactOpts, _stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "burnSyntheticTokenToSolana", _stoken, _from, _pubkeys, _amount, _chainId)
}
func (_Synthesis *SynthesisTransactor) BurnSyntheticTokenToSolanaOverGsn(opts *bind.TransactOpts, _stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "burnSyntheticTokenToSolana", _stoken, _from, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x966e0fe9.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, address _from, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisSession) BurnSyntheticTokenToSolana(_stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolana(&_Synthesis.TransactOpts, _stoken, _from, _pubkeys, _amount, _chainId)
}
func (_Synthesis *SynthesisSession) BurnSyntheticTokenToSolanaOverGsn(_stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolanaOverGsn(&_Synthesis.TransactOpts, _stoken, _from, _pubkeys, _amount, _chainId)
}

// BurnSyntheticTokenToSolana is a paid mutator transaction binding the contract method 0x966e0fe9.
//
// Solidity: function burnSyntheticTokenToSolana(address _stoken, address _from, bytes32[] _pubkeys, uint256 _amount, uint256 _chainId) returns(bytes32 txID)
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenToSolana(_stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (*types.Transaction, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolana(&_Synthesis.TransactOpts, _stoken, _from, _pubkeys, _amount, _chainId)
}
func (_Synthesis *SynthesisTransactorSession) BurnSyntheticTokenToSolanaOverGsn(_stoken common.Address, _from common.Address, _pubkeys [][32]byte, _amount *big.Int, _chainId *big.Int) (common.Hash, error) {
	return _Synthesis.Contract.BurnSyntheticTokenToSolanaOverGsn(&_Synthesis.TransactOpts, _stoken, _from, _pubkeys, _amount, _chainId)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactor) ChangeBridge(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "changeBridge", _bridge)
}
func (_Synthesis *SynthesisTransactor) ChangeBridgeOverGsn(opts *bind.TransactOpts, _bridge common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "changeBridge", _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}
func (_Synthesis *SynthesisSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Synthesis.Contract.ChangeBridgeOverGsn(&_Synthesis.TransactOpts, _bridge)
}

// ChangeBridge is a paid mutator transaction binding the contract method 0x08774410.
//
// Solidity: function changeBridge(address _bridge) returns()
func (_Synthesis *SynthesisTransactorSession) ChangeBridge(_bridge common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.ChangeBridge(&_Synthesis.TransactOpts, _bridge)
}
func (_Synthesis *SynthesisTransactorSession) ChangeBridgeOverGsn(_bridge common.Address) (common.Hash, error) {
	return _Synthesis.Contract.ChangeBridgeOverGsn(&_Synthesis.TransactOpts, _bridge)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0xd8a14a93.
//
// Solidity: function createRepresentation(bytes32 _rtoken, uint8 _decimals, string _name, string _symbol, uint256 _chainId, string _chainSymbol) returns()
func (_Synthesis *SynthesisTransactor) CreateRepresentation(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "createRepresentation", _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}
func (_Synthesis *SynthesisTransactor) CreateRepresentationOverGsn(opts *bind.TransactOpts, _rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "createRepresentation", _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0xd8a14a93.
//
// Solidity: function createRepresentation(bytes32 _rtoken, uint8 _decimals, string _name, string _symbol, uint256 _chainId, string _chainSymbol) returns()
func (_Synthesis *SynthesisSession) CreateRepresentation(_rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (*types.Transaction, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}
func (_Synthesis *SynthesisSession) CreateRepresentationOverGsn(_rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (common.Hash, error) {
	return _Synthesis.Contract.CreateRepresentationOverGsn(&_Synthesis.TransactOpts, _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}

// CreateRepresentation is a paid mutator transaction binding the contract method 0xd8a14a93.
//
// Solidity: function createRepresentation(bytes32 _rtoken, uint8 _decimals, string _name, string _symbol, uint256 _chainId, string _chainSymbol) returns()
func (_Synthesis *SynthesisTransactorSession) CreateRepresentation(_rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (*types.Transaction, error) {
	return _Synthesis.Contract.CreateRepresentation(&_Synthesis.TransactOpts, _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}
func (_Synthesis *SynthesisTransactorSession) CreateRepresentationOverGsn(_rtoken [32]byte, _decimals uint8, _name string, _symbol string, _chainId *big.Int, _chainSymbol string) (common.Hash, error) {
	return _Synthesis.Contract.CreateRepresentationOverGsn(&_Synthesis.TransactOpts, _rtoken, _decimals, _name, _symbol, _chainId, _chainSymbol)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0x502430cd.
//
// Solidity: function emergencyUnburn(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnburn(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnburn", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactor) EmergencyUnburnOverGsn(opts *bind.TransactOpts, _txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnburn", _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0x502430cd.
//
// Solidity: function emergencyUnburn(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisSession) EmergencyUnburn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Synthesis *SynthesisSession) EmergencyUnburnOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnburnOverGsn(&_Synthesis.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnburn is a paid mutator transaction binding the contract method 0x502430cd.
//
// Solidity: function emergencyUnburn(bytes32 _txID, address _trustedEmergencyExecuter, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnburn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnburn(&_Synthesis.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactorSession) EmergencyUnburnOverGsn(_txID [32]byte, _trustedEmergencyExecuter common.Address, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnburnOverGsn(&_Synthesis.TransactOpts, _txID, _trustedEmergencyExecuter, _v, _r, _s)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x9500125b.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequest(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequestOverGsn(opts *bind.TransactOpts, _txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnsyntesizeRequest", _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x9500125b.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestOverGsn(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnsyntesizeRequest is a paid mutator transaction binding the contract method 0x9500125b.
//
// Solidity: function emergencyUnsyntesizeRequest(bytes32 _txID, address _receiveSide, address _oppositeBridge, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequest(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequest(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequestOverGsn(_txID [32]byte, _receiveSide common.Address, _oppositeBridge common.Address, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestOverGsn(&_Synthesis.TransactOpts, _txID, _receiveSide, _oppositeBridge, _chainId, _v, _r, _s)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0x21f1aa0f.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequestToSolana(opts *bind.TransactOpts, _pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "emergencyUnsyntesizeRequestToSolana", _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactor) EmergencyUnsyntesizeRequestToSolanaOverGsn(opts *bind.TransactOpts, _pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "emergencyUnsyntesizeRequestToSolana", _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0x21f1aa0f.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequestToSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisSession) EmergencyUnsyntesizeRequestToSolanaOverGsn(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolanaOverGsn(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}

// EmergencyUnsyntesizeRequestToSolana is a paid mutator transaction binding the contract method 0x21f1aa0f.
//
// Solidity: function emergencyUnsyntesizeRequestToSolana(bytes32[] _pubkeys, bytes1 _bumpSynthesizeRequest, uint256 _chainId, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequestToSolana(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolana(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}
func (_Synthesis *SynthesisTransactorSession) EmergencyUnsyntesizeRequestToSolanaOverGsn(_pubkeys [][32]byte, _bumpSynthesizeRequest [1]byte, _chainId *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _Synthesis.Contract.EmergencyUnsyntesizeRequestToSolanaOverGsn(&_Synthesis.TransactOpts, _pubkeys, _bumpSynthesizeRequest, _chainId, _v, _r, _s)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisTransactor) InitializeFunc(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "initializeFunc", _bridge, _trustedForwarder)
}
func (_Synthesis *SynthesisTransactor) InitializeFuncOverGsn(opts *bind.TransactOpts, _bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "initializeFunc", _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.InitializeFunc(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}
func (_Synthesis *SynthesisSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.InitializeFuncOverGsn(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}

// InitializeFunc is a paid mutator transaction binding the contract method 0x3410c15f.
//
// Solidity: function initializeFunc(address _bridge, address _trustedForwarder) returns()
func (_Synthesis *SynthesisTransactorSession) InitializeFunc(_bridge common.Address, _trustedForwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.InitializeFunc(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}
func (_Synthesis *SynthesisTransactorSession) InitializeFuncOverGsn(_bridge common.Address, _trustedForwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.InitializeFuncOverGsn(&_Synthesis.TransactOpts, _bridge, _trustedForwarder)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactor) MintSyntheticToken(opts *bind.TransactOpts, _txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "mintSyntheticToken", _txID, _tokenReal, _amount, _to)
}
func (_Synthesis *SynthesisTransactor) MintSyntheticTokenOverGsn(opts *bind.TransactOpts, _txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "mintSyntheticToken", _txID, _tokenReal, _amount, _to)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}
func (_Synthesis *SynthesisSession) MintSyntheticTokenOverGsn(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticTokenOverGsn(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// MintSyntheticToken is a paid mutator transaction binding the contract method 0xd32a991e.
//
// Solidity: function mintSyntheticToken(bytes32 _txID, address _tokenReal, uint256 _amount, address _to) returns()
func (_Synthesis *SynthesisTransactorSession) MintSyntheticToken(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.MintSyntheticToken(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}
func (_Synthesis *SynthesisTransactorSession) MintSyntheticTokenOverGsn(_txID [32]byte, _tokenReal common.Address, _amount *big.Int, _to common.Address) (common.Hash, error) {
	return _Synthesis.Contract.MintSyntheticTokenOverGsn(&_Synthesis.TransactOpts, _txID, _tokenReal, _amount, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "renounceOwnership")
}
func (_Synthesis *SynthesisTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisSession) RenounceOwnership() (*types.Transaction, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}
func (_Synthesis *SynthesisSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Synthesis.Contract.RenounceOwnershipOverGsn(&_Synthesis.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Synthesis *SynthesisTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Synthesis.Contract.RenounceOwnership(&_Synthesis.TransactOpts)
}
func (_Synthesis *SynthesisTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _Synthesis.Contract.RenounceOwnershipOverGsn(&_Synthesis.TransactOpts)
}

// SetCurveProxy is a paid mutator transaction binding the contract method 0xd30f8cb1.
//
// Solidity: function setCurveProxy(address _proxy) returns()
func (_Synthesis *SynthesisTransactor) SetCurveProxy(opts *bind.TransactOpts, _proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "setCurveProxy", _proxy)
}
func (_Synthesis *SynthesisTransactor) SetCurveProxyOverGsn(opts *bind.TransactOpts, _proxy common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "setCurveProxy", _proxy)
}

// SetCurveProxy is a paid mutator transaction binding the contract method 0xd30f8cb1.
//
// Solidity: function setCurveProxy(address _proxy) returns()
func (_Synthesis *SynthesisSession) SetCurveProxy(_proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetCurveProxy(&_Synthesis.TransactOpts, _proxy)
}
func (_Synthesis *SynthesisSession) SetCurveProxyOverGsn(_proxy common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetCurveProxyOverGsn(&_Synthesis.TransactOpts, _proxy)
}

// SetCurveProxy is a paid mutator transaction binding the contract method 0xd30f8cb1.
//
// Solidity: function setCurveProxy(address _proxy) returns()
func (_Synthesis *SynthesisTransactorSession) SetCurveProxy(_proxy common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetCurveProxy(&_Synthesis.TransactOpts, _proxy)
}
func (_Synthesis *SynthesisTransactorSession) SetCurveProxyOverGsn(_proxy common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetCurveProxyOverGsn(&_Synthesis.TransactOpts, _proxy)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_Synthesis *SynthesisTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetTrustedForwarder(&_Synthesis.TransactOpts, _forwarder)
}
func (_Synthesis *SynthesisSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetTrustedForwarderOverGsn(&_Synthesis.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_Synthesis *SynthesisTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.SetTrustedForwarder(&_Synthesis.TransactOpts, _forwarder)
}
func (_Synthesis *SynthesisTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _Synthesis.Contract.SetTrustedForwarderOverGsn(&_Synthesis.TransactOpts, _forwarder)
}

// SynthTransfer is a paid mutator transaction binding the contract method 0xb04640b7.
//
// Solidity: function synthTransfer(bytes32 _tokenReal, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns()
func (_Synthesis *SynthesisTransactor) SynthTransfer(opts *bind.TransactOpts, _tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "synthTransfer", _tokenReal, _amount, _from, _to, _synthParams)
}
func (_Synthesis *SynthesisTransactor) SynthTransferOverGsn(opts *bind.TransactOpts, _tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "synthTransfer", _tokenReal, _amount, _from, _to, _synthParams)
}

// SynthTransfer is a paid mutator transaction binding the contract method 0xb04640b7.
//
// Solidity: function synthTransfer(bytes32 _tokenReal, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns()
func (_Synthesis *SynthesisSession) SynthTransfer(_tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthTransfer(&_Synthesis.TransactOpts, _tokenReal, _amount, _from, _to, _synthParams)
}
func (_Synthesis *SynthesisSession) SynthTransferOverGsn(_tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (common.Hash, error) {
	return _Synthesis.Contract.SynthTransferOverGsn(&_Synthesis.TransactOpts, _tokenReal, _amount, _from, _to, _synthParams)
}

// SynthTransfer is a paid mutator transaction binding the contract method 0xb04640b7.
//
// Solidity: function synthTransfer(bytes32 _tokenReal, uint256 _amount, address _from, address _to, (address,address,uint256) _synthParams) returns()
func (_Synthesis *SynthesisTransactorSession) SynthTransfer(_tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (*types.Transaction, error) {
	return _Synthesis.Contract.SynthTransfer(&_Synthesis.TransactOpts, _tokenReal, _amount, _from, _to, _synthParams)
}
func (_Synthesis *SynthesisTransactorSession) SynthTransferOverGsn(_tokenReal [32]byte, _amount *big.Int, _from common.Address, _to common.Address, _synthParams SynthesisSynthParams) (common.Hash, error) {
	return _Synthesis.Contract.SynthTransferOverGsn(&_Synthesis.TransactOpts, _tokenReal, _amount, _from, _to, _synthParams)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_Synthesis *SynthesisTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_Synthesis.gsn, SynthesisMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}
func (_Synthesis *SynthesisSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Synthesis.Contract.TransferOwnershipOverGsn(&_Synthesis.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Synthesis *SynthesisTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Synthesis.Contract.TransferOwnership(&_Synthesis.TransactOpts, newOwner)
}
func (_Synthesis *SynthesisTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _Synthesis.Contract.TransferOwnershipOverGsn(&_Synthesis.TransactOpts, newOwner)
}

// SynthesisBurnRequestIterator is returned from FilterBurnRequest and is used to iterate over the raw logs and unpacked data for BurnRequest events raised by the Synthesis contract.
type SynthesisBurnRequestIterator struct {
	Event *SynthesisBurnRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequest represents a BurnRequest event raised by the Synthesis contract.
type SynthesisBurnRequest struct {
	Id     [32]byte
	From   common.Address
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequest is a free log retrieval operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to []common.Address) (*SynthesisBurnRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestIterator{contract: _Synthesis.contract, event: "BurnRequest", logs: logs, sub: sub}, nil
}

// WatchBurnRequest is a free log subscription operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequest(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequest, id [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequest", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequest)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequest is a log parse operation binding the contract event 0xc9956c099ac2218b5efa7ef3e2a449c6f1afbf7ac3f4dbb27846253e53ff6f75.
//
// Solidity: event BurnRequest(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequest(log types.Log) (*SynthesisBurnRequest, error) {
	event := new(SynthesisBurnRequest)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisBurnRequestSolanaIterator is returned from FilterBurnRequestSolana and is used to iterate over the raw logs and unpacked data for BurnRequestSolana events raised by the Synthesis contract.
type SynthesisBurnRequestSolanaIterator struct {
	Event *SynthesisBurnRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisBurnRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisBurnRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisBurnRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisBurnRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisBurnRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisBurnRequestSolana represents a BurnRequestSolana event raised by the Synthesis contract.
type SynthesisBurnRequestSolana struct {
	Id     [32]byte
	From   common.Address
	To     [32]byte
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnRequestSolana is a free log retrieval operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) FilterBurnRequestSolana(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to [][32]byte) (*SynthesisBurnRequestSolanaIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "BurnRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisBurnRequestSolanaIterator{contract: _Synthesis.contract, event: "BurnRequestSolana", logs: logs, sub: sub}, nil
}

// WatchBurnRequestSolana is a free log subscription operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) WatchBurnRequestSolana(opts *bind.WatchOpts, sink chan<- *SynthesisBurnRequestSolana, id [][32]byte, from []common.Address, to [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "BurnRequestSolana", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisBurnRequestSolana)
				if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnRequestSolana is a log parse operation binding the contract event 0xc6d6292436ddeb6658af181fe7f18ff0e87726ae3d33b80e531b99d1b75b37c6.
//
// Solidity: event BurnRequestSolana(bytes32 indexed id, address indexed from, bytes32 indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) ParseBurnRequestSolana(log types.Log) (*SynthesisBurnRequestSolana, error) {
	event := new(SynthesisBurnRequestSolana)
	if err := _Synthesis.contract.UnpackLog(event, "BurnRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisCreatedRepresentationIterator is returned from FilterCreatedRepresentation and is used to iterate over the raw logs and unpacked data for CreatedRepresentation events raised by the Synthesis contract.
type SynthesisCreatedRepresentationIterator struct {
	Event *SynthesisCreatedRepresentation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisCreatedRepresentationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisCreatedRepresentation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisCreatedRepresentation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisCreatedRepresentationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisCreatedRepresentationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisCreatedRepresentation represents a CreatedRepresentation event raised by the Synthesis contract.
type SynthesisCreatedRepresentation struct {
	Rtoken [32]byte
	Stoken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreatedRepresentation is a free log retrieval operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed rtoken, address indexed stoken)
func (_Synthesis *SynthesisFilterer) FilterCreatedRepresentation(opts *bind.FilterOpts, rtoken [][32]byte, stoken []common.Address) (*SynthesisCreatedRepresentationIterator, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}
	var stokenRule []interface{}
	for _, stokenItem := range stoken {
		stokenRule = append(stokenRule, stokenItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "CreatedRepresentation", rtokenRule, stokenRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisCreatedRepresentationIterator{contract: _Synthesis.contract, event: "CreatedRepresentation", logs: logs, sub: sub}, nil
}

// WatchCreatedRepresentation is a free log subscription operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed rtoken, address indexed stoken)
func (_Synthesis *SynthesisFilterer) WatchCreatedRepresentation(opts *bind.WatchOpts, sink chan<- *SynthesisCreatedRepresentation, rtoken [][32]byte, stoken []common.Address) (event.Subscription, error) {

	var rtokenRule []interface{}
	for _, rtokenItem := range rtoken {
		rtokenRule = append(rtokenRule, rtokenItem)
	}
	var stokenRule []interface{}
	for _, stokenItem := range stoken {
		stokenRule = append(stokenRule, stokenItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "CreatedRepresentation", rtokenRule, stokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisCreatedRepresentation)
				if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRepresentation is a log parse operation binding the contract event 0x0fdd64ca71aae9e0eff106ac8bc9854e33442396ca6bc92a54841a1cca4dac02.
//
// Solidity: event CreatedRepresentation(bytes32 indexed rtoken, address indexed stoken)
func (_Synthesis *SynthesisFilterer) ParseCreatedRepresentation(log types.Log) (*SynthesisCreatedRepresentation, error) {
	event := new(SynthesisCreatedRepresentation)
	if err := _Synthesis.contract.UnpackLog(event, "CreatedRepresentation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Synthesis contract.
type SynthesisOwnershipTransferredIterator struct {
	Event *SynthesisOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisOwnershipTransferred represents a OwnershipTransferred event raised by the Synthesis contract.
type SynthesisOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SynthesisOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisOwnershipTransferredIterator{contract: _Synthesis.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SynthesisOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisOwnershipTransferred)
				if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Synthesis *SynthesisFilterer) ParseOwnershipTransferred(log types.Log) (*SynthesisOwnershipTransferred, error) {
	event := new(SynthesisOwnershipTransferred)
	if err := _Synthesis.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertBurnCompletedIterator is returned from FilterRevertBurnCompleted and is used to iterate over the raw logs and unpacked data for RevertBurnCompleted events raised by the Synthesis contract.
type SynthesisRevertBurnCompletedIterator struct {
	Event *SynthesisRevertBurnCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertBurnCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertBurnCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertBurnCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertBurnCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertBurnCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertBurnCompleted represents a RevertBurnCompleted event raised by the Synthesis contract.
type SynthesisRevertBurnCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRevertBurnCompleted is a free log retrieval operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) FilterRevertBurnCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*SynthesisRevertBurnCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertBurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertBurnCompletedIterator{contract: _Synthesis.contract, event: "RevertBurnCompleted", logs: logs, sub: sub}, nil
}

// WatchRevertBurnCompleted is a free log subscription operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) WatchRevertBurnCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisRevertBurnCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertBurnCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertBurnCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBurnCompleted is a log parse operation binding the contract event 0x9493a56a97907eea22cfa71b25b1900a9afc3041e4de977a2717b964d3eac615.
//
// Solidity: event RevertBurnCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) ParseRevertBurnCompleted(log types.Log) (*SynthesisRevertBurnCompleted, error) {
	event := new(SynthesisRevertBurnCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "RevertBurnCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisRevertSynthesizeRequestIterator is returned from FilterRevertSynthesizeRequest and is used to iterate over the raw logs and unpacked data for RevertSynthesizeRequest events raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequestIterator struct {
	Event *SynthesisRevertSynthesizeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisRevertSynthesizeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisRevertSynthesizeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisRevertSynthesizeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisRevertSynthesizeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisRevertSynthesizeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisRevertSynthesizeRequest represents a RevertSynthesizeRequest event raised by the Synthesis contract.
type SynthesisRevertSynthesizeRequest struct {
	Id  [32]byte
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRevertSynthesizeRequest is a free log retrieval operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed id, address indexed to)
func (_Synthesis *SynthesisFilterer) FilterRevertSynthesizeRequest(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*SynthesisRevertSynthesizeRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "RevertSynthesizeRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisRevertSynthesizeRequestIterator{contract: _Synthesis.contract, event: "RevertSynthesizeRequest", logs: logs, sub: sub}, nil
}

// WatchRevertSynthesizeRequest is a free log subscription operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed id, address indexed to)
func (_Synthesis *SynthesisFilterer) WatchRevertSynthesizeRequest(opts *bind.WatchOpts, sink chan<- *SynthesisRevertSynthesizeRequest, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "RevertSynthesizeRequest", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisRevertSynthesizeRequest)
				if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertSynthesizeRequest is a log parse operation binding the contract event 0x9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa8617.
//
// Solidity: event RevertSynthesizeRequest(bytes32 indexed id, address indexed to)
func (_Synthesis *SynthesisFilterer) ParseRevertSynthesizeRequest(log types.Log) (*SynthesisRevertSynthesizeRequest, error) {
	event := new(SynthesisRevertSynthesizeRequest)
	if err := _Synthesis.contract.UnpackLog(event, "RevertSynthesizeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthTransferIterator is returned from FilterSynthTransfer and is used to iterate over the raw logs and unpacked data for SynthTransfer events raised by the Synthesis contract.
type SynthesisSynthTransferIterator struct {
	Event *SynthesisSynthTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthTransfer represents a SynthTransfer event raised by the Synthesis contract.
type SynthesisSynthTransfer struct {
	Id        [32]byte
	From      common.Address
	To        common.Address
	Amount    *big.Int
	RealToken [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSynthTransfer is a free log retrieval operation binding the contract event 0xea223381588a80dc010e33d8cfcb15d108292534e74a2a0ac274b4c8b8c3c714.
//
// Solidity: event SynthTransfer(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, bytes32 realToken)
func (_Synthesis *SynthesisFilterer) FilterSynthTransfer(opts *bind.FilterOpts, id [][32]byte, from []common.Address, to []common.Address) (*SynthesisSynthTransferIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthTransfer", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthTransferIterator{contract: _Synthesis.contract, event: "SynthTransfer", logs: logs, sub: sub}, nil
}

// WatchSynthTransfer is a free log subscription operation binding the contract event 0xea223381588a80dc010e33d8cfcb15d108292534e74a2a0ac274b4c8b8c3c714.
//
// Solidity: event SynthTransfer(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, bytes32 realToken)
func (_Synthesis *SynthesisFilterer) WatchSynthTransfer(opts *bind.WatchOpts, sink chan<- *SynthesisSynthTransfer, id [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthTransfer", idRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthTransfer)
				if err := _Synthesis.contract.UnpackLog(event, "SynthTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthTransfer is a log parse operation binding the contract event 0xea223381588a80dc010e33d8cfcb15d108292534e74a2a0ac274b4c8b8c3c714.
//
// Solidity: event SynthTransfer(bytes32 indexed id, address indexed from, address indexed to, uint256 amount, bytes32 realToken)
func (_Synthesis *SynthesisFilterer) ParseSynthTransfer(log types.Log) (*SynthesisSynthTransfer, error) {
	event := new(SynthesisSynthTransfer)
	if err := _Synthesis.contract.UnpackLog(event, "SynthTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedIterator is returned from FilterSynthesizeCompleted and is used to iterate over the raw logs and unpacked data for SynthesizeCompleted events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedIterator struct {
	Event *SynthesisSynthesizeCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompleted represents a SynthesizeCompleted event raised by the Synthesis contract.
type SynthesisSynthesizeCompleted struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompleted is a free log retrieval operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompleted(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*SynthesisSynthesizeCompletedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedIterator{contract: _Synthesis.contract, event: "SynthesizeCompleted", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompleted is a free log subscription operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompleted(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompleted, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompleted", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompleted)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompleted is a log parse operation binding the contract event 0x95b6058c9127027e5bcd170e6da61f7d1f0b074726e189dd29037fab3363cfb7.
//
// Solidity: event SynthesizeCompleted(bytes32 indexed id, address indexed to, uint256 amount, address token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompleted(log types.Log) (*SynthesisSynthesizeCompleted, error) {
	event := new(SynthesisSynthesizeCompleted)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SynthesisSynthesizeCompletedSolanaIterator is returned from FilterSynthesizeCompletedSolana and is used to iterate over the raw logs and unpacked data for SynthesizeCompletedSolana events raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolanaIterator struct {
	Event *SynthesisSynthesizeCompletedSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SynthesisSynthesizeCompletedSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SynthesisSynthesizeCompletedSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SynthesisSynthesizeCompletedSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SynthesisSynthesizeCompletedSolana represents a SynthesizeCompletedSolana event raised by the Synthesis contract.
type SynthesisSynthesizeCompletedSolana struct {
	Id     [32]byte
	To     common.Address
	Amount *big.Int
	Token  [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSynthesizeCompletedSolana is a free log retrieval operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed id, address indexed to, uint256 amount, bytes32 token)
func (_Synthesis *SynthesisFilterer) FilterSynthesizeCompletedSolana(opts *bind.FilterOpts, id [][32]byte, to []common.Address) (*SynthesisSynthesizeCompletedSolanaIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.FilterLogs(opts, "SynthesizeCompletedSolana", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SynthesisSynthesizeCompletedSolanaIterator{contract: _Synthesis.contract, event: "SynthesizeCompletedSolana", logs: logs, sub: sub}, nil
}

// WatchSynthesizeCompletedSolana is a free log subscription operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed id, address indexed to, uint256 amount, bytes32 token)
func (_Synthesis *SynthesisFilterer) WatchSynthesizeCompletedSolana(opts *bind.WatchOpts, sink chan<- *SynthesisSynthesizeCompletedSolana, id [][32]byte, to []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Synthesis.contract.WatchLogs(opts, "SynthesizeCompletedSolana", idRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SynthesisSynthesizeCompletedSolana)
				if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSynthesizeCompletedSolana is a log parse operation binding the contract event 0x830cdbc928657695fea360e180c669155ee61408533a72baa9df865687e79552.
//
// Solidity: event SynthesizeCompletedSolana(bytes32 indexed id, address indexed to, uint256 amount, bytes32 token)
func (_Synthesis *SynthesisFilterer) ParseSynthesizeCompletedSolana(log types.Log) (*SynthesisSynthesizeCompletedSolana, error) {
	event := new(SynthesisSynthesizeCompletedSolana)
	if err := _Synthesis.contract.UnpackLog(event, "SynthesizeCompletedSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
