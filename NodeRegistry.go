// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// NodeRegistryMetaData contains all meta data concerning the NodeRegistry contract.
var NodeRegistryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"CreatedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"name\":\"NewSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EYWA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkPermissionTrustList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"_node\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLSPubKeys\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshot\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hostIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EYWA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nodeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statFilterLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506154ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063ab7a87dd116100b8578063e29581aa1161007c578063e29581aa146105d1578063f21b79f9146105e6578063f2a0c8c0146105ee578063f2fde38b14610601578063fa7796481461061457600080fd5b8063ab7a87dd14610551578063c4d66de814610585578063cf9f47d814610598578063da742228146105ab578063e27ad9a5146105be57600080fd5b80638da5cb5b116100ff5780638da5cb5b146104ec5780639434b989146104fd5780639711715a146105105780639c54297c1461051a5780639d2090481461053157600080fd5b8063715018a6146104a7578063757991a8146104af5780637595ea2b146104c65780637da0a877146104db57600080fd5b8063461a42e7116101b35780634f907a69116101825780634f907a69146103c35780635093865e146103d6578063572b6c0514610404578063579de075146104265780636f3521961461044c57600080fd5b8063461a42e71461035957806346dec6cb14610388578063486ff0cd1461039b5780634cd47f39146103b057600080fd5b806331b433f9116101fa57806331b433f9146102d2578063329ef45f146102f557806336967b6f146103085780633e7e25c11461032c5780634162169f1461034657600080fd5b806305e3c05b1461022c5780630e03e4901461025d578063135160af146102865780632d0335ab1461029b575b600080fd5b606d5461024390600160a81b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61026e61026b36600461463f565b90565b6040516001600160a01b039091168152602001610254565b610299610294366004614699565b610623565b005b6102c46102a9366004614779565b6001600160a01b031660009081526020819052604090205490565b604051908152602001610254565b6102e56102e0366004614796565b6108fb565b6040519015158152602001610254565b6102e561030336600461481c565b6109e4565b61031b610316366004614779565b610ae1565b6040516102549594939291906148f4565b6102c461033a366004614779565b6001600160a01b031690565b606d5461026e906001600160a01b031681565b6102e5610367366004614779565b6001600160a01b039081166000818152607360205260409020549091161490565b610299610396366004614953565b610c2d565b6103a3610c5a565b6040516102549190614970565b60705461026e906001600160a01b031681565b6102996103d1366004614699565b610ce8565b6102e56103e4366004614779565b6001600160a01b0390811660009081526073602052604090205416151590565b6102e5610412366004614779565b6067546001600160a01b0391821691161490565b606d5461043a90600160a01b900460ff1681565b60405160ff9091168152602001610254565b6102c461045a366004614983565b6040805160208082019490945280820192909252606082019490945246608082015260a081019290925260c0808301949094528251808303909401845260e0909101909152815191012090565b610299610f58565b6104b7610fad565b604051610254939291906149be565b6104ce610ff9565b6040516102549190614a45565b6067546001600160a01b031661026e565b6035546001600160a01b031661026e565b61029961050b366004614a58565b611159565b6075546102c49081565b61052261123c565b60405161025493929190614a91565b61054461053f366004614779565b611402565b6040516102549190614b71565b61026e61055f366004614c4e565b80516020818301810180516074825292820191909301209152546001600160a01b031681565b610299610593366004614779565b61157d565b6102996105a6366004614c93565b61165e565b6102996105b9366004614779565b6118be565b6102996105cc366004614d81565b611910565b6105d96119da565b6040516102549190614dad565b606f546102c4565b6102996105fc366004614779565b611bfc565b61029961060f366004614779565b611cc9565b6102c4670de0b6b3a764000081565b6069541515806106345750606a5415155b6106755760405162461bcd60e51b815260206004820152600d60248201526c195c1bd8da081b9bdd081cd95d609a1b60448201526064015b60405180910390fd5b604080516080810180835261070a928c928c928a928a928a928a928a9291606991839190820190839060029082845b8154815260200190600101908083116106a457505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116106da57505050919092525050606d54600160a01b900460ff169050611d80565b600061075788888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075292508e91508d9050611f5e565b611fb2565b9050600080600080610768856120e7565b9296509094509250905061077d606e85612135565b156107b95760405162461bcd60e51b815260206004820152600c60248201526b20b63932b0b23c9039b2b2b760a11b604482015260640161066c565b600061080e826040518060400160405280602081526020017f4272696467653a20726563656976655265717565737456323a206661696c6564815250856001600160a01b03166121869092919063ffffffff16565b905080516000148061082f57508080602001905181019061082f9190614e25565b6108a15760405162461bcd60e51b815260206004820152603860248201527f4272696467653a20726563656976655265717565737456323a20756e61626c6560448201527f20746f206465636f64652072657475726e656420646174610000000000000000606482015260840161066c565b604080518681526001600160a01b03851660208201529081018590527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f29060600160405180910390a1505050505050505050505050505050565b600086866001600061090e61033a61219d565b815260208082019290925260409081016000908120848252835281812085825290925290205460ff1615156001146109885760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640161066c565b61099285856121d1565b7f2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea1330878d8d8c8c6040516109cb96959493929190614e6b565b60405180910390a15060019a9950505050505050505050565b60008686600160006109f761033a61219d565b81526020019081526020016000206000610a17836001600160a01b031690565b81526020019081526020016000206000610a37846001600160a01b031690565b815260208101919091526040016000205460ff161515600114610a9c5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e7472616374000000000000604482015260640161066c565b610aa685856121d1565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878d8d8d8d8d6040516109cb9796959493929190614eca565b6073602052600090815260409020805460018201546002830180546001600160a01b03938416949290931692610b1690614f3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4290614f3d565b8015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b505050505090806003018054610ba490614f3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd090614f3d565b8015610c1d5780601f10610bf257610100808354040283529160200191610c1d565b820191906000526020600020905b815481529060010190602001808311610c0057829003601f168201915b5050505050908060040154905085565b610c3681612243565b606d54607554600160a81b90910463ffffffff1610610c5757610c576123fd565b50565b60688054610c6790614f3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9390614f3d565b8015610ce05780601f10610cb557610100808354040283529160200191610ce0565b820191906000526020600020905b815481529060010190602001808311610cc357829003601f168201915b505050505081565b606954151580610cf95750606a5415155b15610d8c57604080516080810180835260698054938301938452610d8c938d938d938b938b938b938b938b93919283918390600290606a606086018083116106a4575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116106da57505050919092525050606d54600160a01b900460ff169050611d80565b6000610dd488888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075292508e91508d9050611f5e565b90506000806000610de4846126c8565b606d54929550909350915063ffffffff80851691610e0c91600160a81b909104166001614f88565b63ffffffff1614610e545760405162461bcd60e51b81526020600482015260126024820152713bb937b7339032b837b1b410373ab6b132b960711b604482015260640161066c565b6000610e5f83612703565b80519091508190606990610e769082906002614370565b506020820151610e8c9060028084019190614370565b5050606d805464ffffffffff60a01b1916600160a01b60ff86160263ffffffff60a81b191617600160a81b63ffffffff88160217905550610ecd606e612821565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa925896069604051602001610f009190614fd3565b60405160208183030381529060405282604051602001610f209190615014565b60408051601f1981840301815290829052610f4092916000908990615040565b60405180910390a15050505050505050505050505050565b610f6061219d565b6001600160a01b0316610f7b6035546001600160a01b031690565b6001600160a01b031614610fa15760405162461bcd60e51b815260040161066c90615084565b610fab600061289f565b565b60606000806069604051602001610fc49190614fd3565b60408051808303601f19018152919052606d549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b6060600061100760716128f1565b6001600160401b0381111561101e5761101e614b84565b60405190808252806020026020018201604052801561105157816020015b606081526020019060019003908161103c5790505b50905060005b61106160716128f1565b81101561115357607360006110776071846128fb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060030180546110a590614f3d565b80601f01602080910402602001604051908101604052809291908181526020018280546110d190614f3d565b801561111e5780601f106110f35761010080835404028352916020019161111e565b820191906000526020600020905b81548152906001019060200180831161110157829003601f168201915b505050505082828151811061113557611135614e0f565b6020026020010181905250808061114b906150b9565b915050611057565b50919050565b600254610100900460ff166111745760025460ff1615611178565b303b155b6111945760405162461bcd60e51b815260040161066c906150d4565b600254610100900460ff161580156111b6576002805461ffff19166101011790555b60408051808201909152600c81526b5a45524f5f4144445245535360a01b60208201526001600160a01b0384166112005760405162461bcd60e51b815260040161066c9190614970565b50607080546001600160a01b0319166001600160a01b0385161790556112258261157d565b8015611237576002805461ff00191690555b505050565b60608060006075600101607560020160756000015482805480602002602001604051908101604052809291908181526020016000905b8282101561131e57838290600052602060002001805461129190614f3d565b80601f01602080910402602001604051908101604052809291908181526020018280546112bd90614f3d565b801561130a5780601f106112df5761010080835404028352916020019161130a565b820191906000526020600020905b8154815290600101906020018083116112ed57829003601f168201915b505050505081526020019060010190611272565b50505050925081805480602002602001604051908101604052809291908181526020016000905b828210156113f157838290600052602060002001805461136490614f3d565b80601f016020809104026020016040519081016040528092919081815260200182805461139090614f3d565b80156113dd5780601f106113b2576101008083540402835291602001916113dd565b820191906000526020600020905b8154815290600101906020018083116113c057829003601f168201915b505050505081526020019060010190611345565b505050509150925092509250909192565b61140a6143ae565b6001600160a01b03808316600090815260736020908152604091829020825160a081018452815485168152600182015490941691840191909152600281018054919284019161145890614f3d565b80601f016020809104026020016040519081016040528092919081815260200182805461148490614f3d565b80156114d15780601f106114a6576101008083540402835291602001916114d1565b820191906000526020600020905b8154815290600101906020018083116114b457829003601f168201915b505050505081526020016003820180546114ea90614f3d565b80601f016020809104026020016040519081016040528092919081815260200182805461151690614f3d565b80156115635780601f1061153857610100808354040283529160200191611563565b820191906000526020600020905b81548152906001019060200180831161154657829003601f168201915b505050505081526020016004820154815250509050919050565b600254610100900460ff166115985760025460ff161561159c565b303b155b6115b85760405162461bcd60e51b815260040161066c906150d4565b600254610100900460ff161580156115da576002805461ffff19166101011790555b6115e2612907565b6115ea61292e565b60408051808201909152600580825264322e322e3360d81b6020909201918252611616916068916143ef565b5061161f61219d565b606d80546001600160a01b0319166001600160a01b039290921691909117905561164882612965565b801561165a576002805461ff00191690555b5050565b845160705460405163cfcae1a560e01b81526001600160a01b039283166004820181905292909116602482018190526044820152606480820152610fa0608482015260a481019190915260009073__$e8b888148fe85a76067767bf6ce2a23c03$",
}

// NodeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeRegistryMetaData.ABI instead.
var NodeRegistryABI = NodeRegistryMetaData.ABI

// NodeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeRegistryMetaData.Bin instead.
var NodeRegistryBin = NodeRegistryMetaData.Bin

// DeployNodeRegistry deploys a new Ethereum contract, binding an instance of NodeRegistry to it.
func DeployNodeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeRegistry, error) {
	parsed, err := NodeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NodeRegistry is an auto generated Go binding around an Ethereum contract.
type NodeRegistry struct {
	NodeRegistryCaller     // Read-only binding to the contract
	NodeRegistryTransactor // Write-only binding to the contract
	NodeRegistryFilterer   // Log filterer for contract events
}

// NodeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_NodeRegistry *NodeRegistryTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_NodeRegistry.gsn = opts
}

// NodeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeRegistrySession struct {
	Contract     *NodeRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeRegistryCallerSession struct {
	Contract *NodeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// NodeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeRegistryTransactorSession struct {
	Contract     *NodeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// NodeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRegistryRaw struct {
	Contract *NodeRegistry // Generic contract binding to access the raw methods on
}

// NodeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeRegistryCallerRaw struct {
	Contract *NodeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// NodeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeRegistryTransactorRaw struct {
	Contract *NodeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeRegistry creates a new instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistry(address common.Address, backend bind.ContractBackend) (*NodeRegistry, error) {
	contract, err := bindNodeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NewNodeRegistryCaller creates a new read-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryCaller(address common.Address, caller bind.ContractCaller) (*NodeRegistryCaller, error) {
	contract, err := bindNodeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCaller{contract: contract}, nil
}

// NewNodeRegistryTransactor creates a new write-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeRegistryTransactor, error) {
	contract, err := bindNodeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryTransactor{contract: contract}, nil
}

// NewNodeRegistryFilterer creates a new log filterer instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeRegistryFilterer, error) {
	contract, err := bindNodeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryFilterer{contract: contract}, nil
}

// bindNodeRegistry binds a generic wrapper to an already deployed contract.
func bindNodeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.NodeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transact(opts, method, params...)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) EYWA(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "EYWA")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistrySession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) MINCOLLATERAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "MIN_COLLATERAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistrySession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistrySession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) CheckPermissionTrustList(opts *bind.CallOpts, _owner common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "checkPermissionTrustList", _owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) CheckPermissionTrustList(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _owner)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0x461a42e7.
//
// Solidity: function checkPermissionTrustList(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) CheckPermissionTrustList(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _owner)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistrySession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCallerSession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistrySession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCallerSession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCaller) GetBLSPubKeys(opts *bind.CallOpts) ([][]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getBLSPubKeys")

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistrySession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCallerSession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistrySession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCaller) GetNode(opts *bind.CallOpts, _owner common.Address) (NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNode", _owner)

	if err != nil {
		return *new(NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodeRegistryNode)).(*NodeRegistryNode)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistrySession) GetNode(_owner common.Address) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _owner)
}

// GetNode is a free data retrieval call binding the contract method 0x9d209048.
//
// Solidity: function getNode(address _owner) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCallerSession) GetNode(_owner common.Address) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _owner)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCaller) GetNodes(opts *bind.CallOpts) ([]NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNodes")

	if err != nil {
		return *new([]NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new([]NodeRegistryNode)).(*[]NodeRegistryNode)

	return out0, err

}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistrySession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCallerSession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCaller) GetSnapshot(opts *bind.CallOpts) ([][]byte, []string, *big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getSnapshot")

	if err != nil {
		return *new([][]byte), *new([]string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistrySession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCaller) HostIds(opts *bind.CallOpts, arg0 string) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "hostIds", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistrySession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) NodeExists(opts *bind.CallOpts, _owner common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "nodeExists", _owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) NodeExists(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _owner)
}

// NodeExists is a free data retrieval call binding the contract method 0x5093865e.
//
// Solidity: function nodeExists(address _owner) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) NodeExists(_owner common.Address) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _owner)
}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCaller) OwnedNodes(opts *bind.CallOpts, arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "ownedNodes", arg0)

	outstruct := new(struct {
		Owner     common.Address
		Pool      common.Address
		HostId    string
		BlsPubKey []byte
		NodeId    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Pool = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HostId = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.BlsPubKey = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.NodeId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistrySession) OwnedNodes(arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// OwnedNodes is a free data retrieval call binding the contract method 0x36967b6f.
//
// Solidity: function ownedNodes(address ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCallerSession) OwnedNodes(arg0 common.Address) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistryCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistrySession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _NodeRegistry.Contract.PrepareRqId(&_NodeRegistry.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_NodeRegistry *NodeRegistryCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _NodeRegistry.Contract.PrepareRqId(&_NodeRegistry.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCaller) Snapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "snapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistrySession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCallerSession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) StatFilterLen(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "statFilterLen")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) StatFilterLen() (*big.Int, error) {
	return _NodeRegistry.Contract.StatFilterLen(&_NodeRegistry.CallOpts)
}

// StatFilterLen is a free data retrieval call binding the contract method 0xf21b79f9.
//
// Solidity: function statFilterLen() view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) StatFilterLen() (*big.Int, error) {
	return _NodeRegistry.Contract.StatFilterLen(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistrySession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistrySession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCallerSession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactor) AddContractBindOverGsn(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistrySession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistrySession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayer(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "createRelayer", _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayerOverGsn(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "createRelayer", _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistrySession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistrySession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoTransferOwnership", newDao)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnershipOverGsn(opts *bind.TransactOpts, newDao common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequestOverGsn(opts *bind.TransactOpts, resetEpoch bool) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize", forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) InitializeOverGsn(opts *bind.TransactOpts, forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistrySession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize2(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize2", _EYWA, _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) Initialize2OverGsn(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize2", _EYWA, _forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize2(_EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}
func (_NodeRegistry *NodeRegistrySession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0x9434b989.
//
// Solidity: function initialize2(address _EYWA, address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2(_EYWA common.Address, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2OverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "renounceOwnership")
}
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistrySession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistrySession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2OverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolanaOverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpoch(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpochOverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// NodeRegistryCreatedRelayerIterator is returned from FilterCreatedRelayer and is used to iterate over the raw logs and unpacked data for CreatedRelayer events raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayerIterator struct {
	Event *NodeRegistryCreatedRelayer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryCreatedRelayerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryCreatedRelayer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryCreatedRelayer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryCreatedRelayerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryCreatedRelayerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryCreatedRelayer represents a CreatedRelayer event raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayer struct {
	Owner       common.Address
	RelayerPool common.Address
	HostId      string
	BlsPubKey   []byte
	NodeId      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreatedRelayer is a free log retrieval operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) FilterCreatedRelayer(opts *bind.FilterOpts, owner []common.Address) (*NodeRegistryCreatedRelayerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCreatedRelayerIterator{contract: _NodeRegistry.contract, event: "CreatedRelayer", logs: logs, sub: sub}, nil
}

// WatchCreatedRelayer is a free log subscription operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) WatchCreatedRelayer(opts *bind.WatchOpts, sink chan<- *NodeRegistryCreatedRelayer, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryCreatedRelayer)
				if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRelayer is a log parse operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) ParseCreatedRelayer(log types.Log) (*NodeRegistryCreatedRelayer, error) {
	event := new(NodeRegistryCreatedRelayer)
	if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the NodeRegistry contract.
type NodeRegistryNewEpochIterator struct {
	Event *NodeRegistryNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewEpoch represents a NewEpoch event raised by the NodeRegistry contract.
type NodeRegistryNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*NodeRegistryNewEpochIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewEpochIterator{contract: _NodeRegistry.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewEpoch) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewEpoch)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewEpoch(log types.Log) (*NodeRegistryNewEpoch, error) {
	event := new(NodeRegistryNewEpoch)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewSnapshotIterator is returned from FilterNewSnapshot and is used to iterate over the raw logs and unpacked data for NewSnapshot events raised by the NodeRegistry contract.
type NodeRegistryNewSnapshotIterator struct {
	Event *NodeRegistryNewSnapshot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewSnapshotIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewSnapshot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewSnapshot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewSnapshotIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewSnapshotIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewSnapshot represents a NewSnapshot event raised by the NodeRegistry contract.
type NodeRegistryNewSnapshot struct {
	SnapNum *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSnapshot is a free log retrieval operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewSnapshot(opts *bind.FilterOpts) (*NodeRegistryNewSnapshotIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewSnapshotIterator{contract: _NodeRegistry.contract, event: "NewSnapshot", logs: logs, sub: sub}, nil
}

// WatchNewSnapshot is a free log subscription operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewSnapshot(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewSnapshot) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewSnapshot)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSnapshot is a log parse operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewSnapshot(log types.Log) (*NodeRegistryNewSnapshot, error) {
	event := new(NodeRegistryNewSnapshot)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestIterator struct {
	Event *NodeRegistryOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequest represents a OracleRequest event raised by the NodeRegistry contract.
type NodeRegistryOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*NodeRegistryOracleRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestIterator{contract: _NodeRegistry.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequest(log types.Log) (*NodeRegistryOracleRequest, error) {
	event := new(NodeRegistryOracleRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolanaIterator struct {
	Event *NodeRegistryOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequestSolana represents a OracleRequestSolana event raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*NodeRegistryOracleRequestSolanaIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestSolanaIterator{contract: _NodeRegistry.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequestSolana)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequestSolana(log types.Log) (*NodeRegistryOracleRequestSolana, error) {
	event := new(NodeRegistryOracleRequestSolana)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferredIterator struct {
	Event *NodeRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NodeRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOwnershipTransferredIterator{contract: _NodeRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NodeRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOwnershipTransferred)
				if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*NodeRegistryOwnershipTransferred, error) {
	event := new(NodeRegistryOwnershipTransferred)
	if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the NodeRegistry contract.
type NodeRegistryReceiveRequestIterator struct {
	Event *NodeRegistryReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryReceiveRequest represents a ReceiveRequest event raised by the NodeRegistry contract.
type NodeRegistryReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*NodeRegistryReceiveRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryReceiveRequestIterator{contract: _NodeRegistry.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryReceiveRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) ParseReceiveRequest(log types.Log) (*NodeRegistryReceiveRequest, error) {
	event := new(NodeRegistryReceiveRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
