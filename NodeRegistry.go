// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf("")
)

// NodeRegistryMetaData contains all meta data concerning the NodeRegistry contract.

var NodeRegistryMetaData = &bind.MetaData{

	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"CreatedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"name\":\"NewSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EYWA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"checkPermissionTrustList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"_node\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLSPubKeys\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"internalType\":\"structNodeRegistry.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshot\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hostIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EYWA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blsPubKey\",\"type\":\"bytes32\"}],\"name\":\"nodeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownedNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hostId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqIdFilter\",\"outputs\":[{\"internalType\":\"contractReqIdFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setRelayerPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2ToSolana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txMerkleProve\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615d4a80620000216000396000f3fe60806040523480156200001157600080fd5b50600436106200026d5760003560e01c80637595ea2b1162000155578063cf9f47d811620000c7578063eee57a381162000086578063eee57a38146200062e578063f2a0c8c0146200065c578063f2fde38b1462000673578063fa779648146200068a578063fc358197146200062e57600080fd5b8063cf9f47d814620005bc578063da6b6c6a14620005d3578063da74222814620005e7578063e27ad9a514620005fe578063e29581aa146200061557600080fd5b80639c54297c11620001145780639c54297c1462000512578063a2991687146200052d578063ab7a87dd1462000557578063bde199e4146200058e578063c4d66de814620005a557600080fd5b80637595ea2b14620004b35780637da0a87714620004cc5780638da5cb5b14620004de5780639013ae0814620004f05780639711715a146200050757600080fd5b806346dec6cb11620001ef578063572b6c0511620001ae578063572b6c05146200042a578063579de075146200044f578063715018a614620004775780637320660d1462000481578063757991a8146200049857600080fd5b806346dec6cb14620003a9578063486ff0cd14620003c05780634cd47f3914620003d95780634f907a6914620003ed57806350c946fe146200040457600080fd5b806331b433f9116200023c57806331b433f91462000325578063329ef45f146200034d5780633e7e25c114620003645780634162169f14620003815780634219dc40146200039557600080fd5b806305e3c05b14620002725780630e03e49014620002a4578063135160af14620002d15780632d0335ab14620002ea575b600080fd5b606d546200028a90600160a81b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b620002b8620002b536600462004bea565b90565b6040516001600160a01b0390911681526020016200029b565b620002e8620002e236600462004c48565b6200069a565b005b62000316620002fb36600462004d36565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016200029b565b6200033c6200033636600462004d56565b620009ed565b60405190151581526020016200029b565b6200033c6200035e36600462004de2565b62000adf565b620003166200037536600462004d36565b6001600160a01b031690565b606d54620002b8906001600160a01b031681565b607054620002b8906001600160a01b031681565b620002e8620003ba36600462004e7b565b62000be7565b620003ca62000c19565b6040516200029b919062004ef8565b606f54620002b8906001600160a01b031681565b620002e8620003fe36600462004c48565b62000caf565b6200041b6200041536600462004bea565b62000fdd565b6040516200029b919062004f76565b6200033c6200043b36600462004d36565b6067546001600160a01b0391821691161490565b606d546200046490600160a01b900460ff1681565b60405160ff90911681526020016200029b565b620002e862001169565b620002e86200049236600462004d36565b620011c6565b620004a262001237565b6040516200029b9392919062004f8b565b620004bd62001285565b6040516200029b919062005015565b6067546001600160a01b0316620002b8565b6035546001600160a01b0316620002b8565b620002e86200050136600462004d36565b620013ed565b607554620003169081565b6200051c6200145e565b6040516200029b939291906200502a565b620005446200053e36600462004bea565b62001638565b6040516200029b959493929190620050ab565b620002b862000568366004620051d5565b80516020818301810180516074825292820191909301209152546001600160a01b031681565b620002e86200059f3660046200520d565b62001794565b620002e8620005b636600462004d36565b62001899565b620002e8620005cd36600462005271565b620019d7565b606e54620002b8906001600160a01b031681565b620002e8620005f836600462004d36565b62001c49565b620002e86200060f36600462005370565b62001ca3565b6200061f62001dc0565b6040516200029b91906200539d565b6200033c6200063f36600462004bea565b6000908152607360205260409020546001600160a01b0316151590565b620002e86200066d36600462004d36565b62002001565b620002e86200068436600462004d36565b620020d3565b62000316670de0b6b3a764000081565b606954151580620006ac5750606a5415155b620006ee5760405162461bcd60e51b815260206004820152600d60248201526c195c1bd8da081b9bdd081cd95d609a1b60448201526064015b60405180910390fd5b604080516080810180835262000787928c928c928a928a928a928a928a9291606991839190820190839060029082845b8154815260200190600101908083116200071e57505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116200075557505050919092525050606d54600160a01b900460ff16905062002194565b6000620007d888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620007d292508e91508d905062002384565b620023dc565b9050600080600080620007eb856200252b565b606e54604051632bf85b9160e21b81526004810186905294985092965090945092506001600160a01b03169063afe16e44906024016020604051808303816000875af115801562000840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000866919062005419565b15620008a45760405162461bcd60e51b815260206004820152600c60248201526b20b63932b0b23c9039b2b2b760a11b6044820152606401620006e5565b6000620008fb826040518060400160405280602081526020017f4272696467653a20726563656976655265717565737456323a206661696c6564815250856001600160a01b0316620025819092919063ffffffff16565b90508051600014806200091f5750808060200190518101906200091f919062005419565b620009935760405162461bcd60e51b815260206004820152603860248201527f4272696467653a20726563656976655265717565737456323a20756e61626c6560448201527f20746f206465636f64652072657475726e6564206461746100000000000000006064820152608401620006e5565b604080518681526001600160a01b03851660208201529081018590527ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f29060600160405180910390a1505050505050505050505050505050565b600086866001600062000a03620003756200259a565b815260208082019290925260409081016000908120848252835281812085825290925290205460ff16151560011462000a7f5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e74726163740000000000006044820152606401620006e5565b62000a8b8585620025d0565b7f2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea1330878d8d8c8c60405162000ac69695949392919062005462565b60405180910390a15060019a9950505050505050505050565b600086866001600062000af5620003756200259a565b8152602001908152602001600020600062000b16836001600160a01b031690565b8152602001908152602001600020600062000b37846001600160a01b031690565b815260208101919091526040016000205460ff16151560011462000b9e5760405162461bcd60e51b815260206004820152601a60248201527f4272696467653a20756e7472757374656420636f6e74726163740000000000006044820152606401620006e5565b62000baa8585620025d0565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878d8d8d8d8d60405162000ac69796959493929190620054c4565b62000bf28162002646565b606d54607554600160a81b90910463ffffffff161062000c165762000c16620027c1565b50565b6068805462000c28906200553a565b80601f016020809104026020016040519081016040528092919081815260200182805462000c56906200553a565b801562000ca75780601f1062000c7b5761010080835404028352916020019162000ca7565b820191906000526020600020905b81548152906001019060200180831162000c8957829003601f168201915b505050505081565b60695415158062000cc15750606a5415155b1562000d595760408051608081018083526069805493830193845262000d59938d938d938b938b938b938b938b93919283918390600290606a606086018083116200071e575050509183525050604080518082019182905260028481018054835260209485019492939092600387019085018083116200075557505050919092525050606d54600160a01b900460ff16905062002194565b600062000da488888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620007d292508e91508d905062002384565b9050600080600062000db68462002abc565b606d54929550909350915063ffffffff8085169162000de091600160a81b90910416600162005587565b63ffffffff161462000e2a5760405162461bcd60e51b81526020600482015260126024820152713bb937b7339032b837b1b410373ab6b132b960711b6044820152606401620006e5565b600062000e378362002afd565b8051909150819060699062000e509082906002620048fd565b50602082015162000e689060028084019190620048fd565b5050606d805464ffffffffff60a01b1916600160a01b60ff86160263ffffffff60a81b191617600160a81b63ffffffff88160217905550606e546040805163083197ef60e41b815290516001600160a01b03909216916383197ef09160048082019260009290919082900301818387803b15801562000ee657600080fd5b505af115801562000efb573d6000803e3d6000fd5b5050505060405162000f0d9062004940565b604051809103906000f08015801562000f2a573d6000803e3d6000fd5b50606e80546001600160a01b0319166001600160a01b03929092169190911790556040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa925899062000f8190606990602001620055d7565b6040516020818303038152906040528260405160200162000fa391906200561e565b60408051601f198184030181529082905262000fc5929160009089906200564e565b60405180910390a15050505050505050505050505050565b62000fe76200494e565b600082815260736020908152604091829020825160a08101845281546001600160a01b03908116825260018301541692810192909252600281018054929391929184019162001036906200553a565b80601f016020809104026020016040519081016040528092919081815260200182805462001064906200553a565b8015620010b55780601f106200108957610100808354040283529160200191620010b5565b820191906000526020600020905b8154815290600101906020018083116200109757829003601f168201915b50505050508152602001600382018054620010d0906200553a565b80601f0160208091040260200160405190810160405280929190818152602001828054620010fe906200553a565b80156200114f5780601f1062001123576101008083540402835291602001916200114f565b820191906000526020600020905b8154815290600101906020018083116200113157829003601f168201915b505050505081526020016004820154815250509050919050565b620011736200259a565b6001600160a01b03166200118f6035546001600160a01b031690565b6001600160a01b031614620011b85760405162461bcd60e51b8152600401620006e59062005696565b620011c4600062002c35565b565b620011d06200259a565b6001600160a01b0316620011ec6035546001600160a01b031690565b6001600160a01b031614620012155760405162461bcd60e51b8152600401620006e59062005696565b607080546001600160a01b0319166001600160a01b0392909216919091179055565b60606000806069604051602001620012509190620055d7565b60408051808303601f19018152919052606d549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b6060600062001295607162002c87565b6001600160401b03811115620012af57620012af62005100565b604051908082528060200260200182016040528015620012e457816020015b6060815260200190600190039081620012ce5790505b50905060005b620012f6607162002c87565b811015620013e757607360006200130f60718462002c92565b815260200190815260200160002060030180546200132d906200553a565b80601f01602080910402602001604051908101604052809291908181526020018280546200135b906200553a565b8015620013ac5780601f106200138057610100808354040283529160200191620013ac565b820191906000526020600020905b8154815290600101906020018083116200138e57829003601f168201915b5050505050828281518110620013c657620013c662005403565b60200260200101819052508080620013de90620056cb565b915050620012ea565b50919050565b620013f76200259a565b6001600160a01b0316620014136035546001600160a01b031690565b6001600160a01b0316146200143c5760405162461bcd60e51b8152600401620006e59062005696565b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b60608060006075600101607560020160756000015482805480602002602001604051908101604052809291908181526020016000905b828210156200154a578382906000526020600020018054620014b6906200553a565b80601f0160208091040260200160405190810160405280929190818152602001828054620014e4906200553a565b8015620015355780601f10620015095761010080835404028352916020019162001535565b820191906000526020600020905b8154815290600101906020018083116200151757829003601f168201915b50505050508152602001906001019062001494565b50505050925081805480602002602001604051908101604052809291908181526020016000905b828210156200162757838290600052602060002001805462001593906200553a565b80601f0160208091040260200160405190810160405280929190818152602001828054620015c1906200553a565b8015620016125780601f10620015e65761010080835404028352916020019162001612565b820191906000526020600020905b815481529060010190602001808311620015f457829003601f168201915b50505050508152602001906001019062001571565b505050509150925092509250909192565b6073602052600090815260409020805460018201546002830180546001600160a01b039384169492909316926200166f906200553a565b80601f01602080910402602001604051908101604052809291908181526020018280546200169d906200553a565b8015620016ee5780601f10620016c257610100808354040283529160200191620016ee565b820191906000526020600020905b815481529060010190602001808311620016d057829003601f168201915b50505050509080600301805462001705906200553a565b80601f016020809104026020016040519081016040528092919081815260200182805462001733906200553a565b8015620017845780601f10620017585761010080835404028352916020019162001784565b820191906000526020600020905b8154815290600101906020018083116200176657829003601f168201915b5050505050908060040154905085565b600254610100900460ff16620017b15760025460ff1615620017b5565b303b155b620017d45760405162461bcd60e51b8152600401620006e590620056e9565b600254610100900460ff16158015620017f7576002805461ffff19166101011790555b60408051808201909152600c81526b5a45524f5f4144445245535360a01b60208201526001600160a01b038516620018445760405162461bcd60e51b8152600401620006e5919062004ef8565b50607080546001600160a01b038085166001600160a01b031992831617909255606f805492871692909116919091179055620018808362001899565b801562001893576002805461ff00191690555b50505050565b600254610100900460ff16620018b65760025460ff1615620018ba565b303b155b620018d95760405162461bcd60e51b8152600401620006e590620056e9565b600254610100900460ff16158015620018fc576002805461ffff19166101011790555b6200190662002ca0565b6200191062002cca565b60408051808201909152600580825264322e322e3360d81b60209092019182526200193e916068916200498f565b50620019496200259a565b606d80546001600160a01b0319166001600160a01b0392909216919091179055604051620019779062004940565b604051809103906000f08015801562001994573d6000803e3d6000fd5b50606e80546001600160a01b0319166001600160a01b0392909216919091179055620019c08262002d08565b8015620019d3576002805461ff00191690555b5050565b6070548551606f5460405163cfcae1a560e01b81526001600160a01b0392831660048201819052918316602482018190526044820152606480820152610fa0608482015260a4810191909152600092919091169063cfcae1a59060c4016020604051808303816000875af115801562001a54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a7a919062005737565b606f549091506000906001600160a01b03166370a0823162001a9b6200259a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562001ae0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b06919062005757565b9050670de0b6b3a764000081101562001b625760405162461bcd60e51b815260206004820181905260248201527f4e6f646552656769737472793a20696e73756666696369656e742066756e64736044820152606401620006e5565b606f546001600160a01b031663d505accf62001b7d6200259a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064810189905260ff8816608482015260a4810187905260c4810186905260e401600060405180830381600087803b15801562001bea57600080fd5b505af115801562001bff573d6000803e3d6000fd5b5050505062001c2662001c116200259a565b606f546001600160a01b031690848462002d2a565b6001600160a01b038216602088015262001c408762002d86565b50505050505050565b62001c536200259a565b6001600160a01b031662001c6f6035546001600160a01b031690565b6001600160a01b03161462001c985760405162461bcd60e51b8152600401620006e59062005696565b62000c168162002d08565b62001cad6200259a565b6001600160a01b031662001cc96035546001600160a01b031690565b6001600160a01b03161462001cf25760405162461bcd60e51b8152600401620006e59062005696565b8062001d415760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e76616c69642027746f272061646472657373000000006044820152606401620006e5565b8262001d905760405162461bcd60e51b815260206004820152601e60248201527f4272696467653a20696e76616c6964202766726f6d27206164647265737300006044820152606401620006e5565b6000928352600160208181526040808620948652938152838520928552919091529120805460ff19169091179055565b6060600062001dd0607162002c87565b6001600160401b0381111562001dea5762001dea62005100565b60405190808252806020026020018201604052801562001e2757816020015b62001e136200494e565b81526020019060019003908162001e095790505b50905060005b62001e39607162002c87565b811015620013e7576073600062001e5260718462002c92565b81526020808201929092526040908101600020815160a08101835281546001600160a01b03908116825260018301541693810193909352600281018054919284019162001e9f906200553a565b80601f016020809104026020016040519081016040528092919081815260200182805462001ecd906200553a565b801562001f1e5780601f1062001ef25761010080835404028352916020019162001f1e565b820191906000526020600020905b81548152906001019060200180831162001f0057829003601f168201915b5050505050815260200160038201805462001f39906200553a565b80601f016020809104026020016040519081016040528092919081815260200182805462001f67906200553a565b801562001fb85780601f1062001f8c5761010080835404028352916020019162001fb8565b820191906000526020600020905b81548152906001019060200180831162001f9a57829003601f168201915b5050505050815260200160048201548152505082828151811062001fe05762001fe062005403565b6020026020010181905250808062001ff890620056cb565b91505062001e2d565b606d546001600160a01b03161580620020365750606d546001600160a01b03166200202b6200259a565b6001600160a01b0316145b620020775760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b6044820152606401620006e5565b606d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606d80546001600160a01b0319166001600160a01b0392909216919091179055565b620020dd6200259a565b6001600160a01b0316620020f96035546001600160a01b031690565b6001600160a01b031614620021225760405162461bcd60e51b8152600401620006e59062005696565b6001600160a01b038116620021895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006e5565b62000c168162002c35565b6000620021d788888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062002afd92505050565b905060006200221c87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200304392505050565b905060036200223060ff8516600262005771565b6200223c9190620057a9565b620022478662003108565b11620022965760405162461bcd60e51b815260206004820152601760248201527f6e6f7420656e6f756768207061727469636970616e74730000000000000000006044820152606401620006e5565b8260ff1660ff1480620022ae5750600160ff84161b85105b620022ee5760405162461bcd60e51b815260206004820152600f60248201526e6269746d61736b20746f6f2062696760881b6044820152606401620006e5565b6200233584838d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792508b91506200313d9050565b620023775760405162461bcd60e51b81526020600482015260116024820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b6044820152606401620006e5565b5050505050505050505050565b6000620023d56200239a606860488587620057c0565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506200336b92505050565b9392505050565b606060006060620023ee8583620033c8565b925090506000620023ff82620034e5565b905060006021848851620024149190620057ec565b620024209190620057a9565b905060008060005b83811015620024d7576200243d8a886200355e565b975091506200244d8a8862003622565b9750925060ff82166200246e57620024668386620036b9565b9450620024c2565b8160ff16600114156200248757620024668584620036b9565b60405162461bcd60e51b815260206004820152600f60248201526e1b595c9adb19541c9bdd9948195bd9608a1b6044820152606401620006e5565b80620024ce81620056cb565b91505062002428565b508784146200251c5760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19541c9bdd99481c9bdbdd60821b6044820152606401620006e5565b50929450505050505b92915050565b60008060006060600062002540868262003622565b909550905062002551868262003622565b90945090506200256286826200373c565b9093509050620025738682620033c8565b509496939550919392915050565b6060620025928484600085620037dd565b949350505050565b600060143610801590620025b857506067546001600160a01b031633145b15620025cb575060131936013560601c90565b503390565b6001600160a01b038216600090815260208190526040812080548392909190620025fa83620056cb565b9190505514620019d35760405162461bcd60e51b8152602060048201526016602482015275084e4d2c8ceca7440dcdedcc6ca40dad2e6dac2e8c6d60531b6044820152606401620006e5565b606d546001600160a01b03166200265c6200259a565b6001600160a01b031614620026a75760405162461bcd60e51b815260206004820152601060248201526f4272696467653a206f6e6c792044414f60801b6044820152606401620006e5565b60006069604051602001620026bd9190620055d7565b60405160208183030381529060405290508115620019d357606d8054600160a81b900463ffffffff16906015620026f48362005806565b91906101000a81548163ffffffff021916908363ffffffff160217905550506200271d62004a0b565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258982826040516020016200275291906200561e565b60408051808303601f1901815290829052606d54620027839392600191600160a81b900463ffffffff16906200564e565b60405180910390a180518190606990620027a19082906002620048fd565b506020820151620027b99060028084019190620048fd565b505050505050565b6000607581815590620027d660768262004a34565b620027e660028301600062004a54565b50506000620027f6607162002c87565b6001600160401b0381111562002810576200281062005100565b6040519080825280602002602001820160405280156200283a578160200160208202803683370190505b50905060005b6200284c607162002c87565b8110156200288a57808282815181106200286a576200286a62005403565b6020908102919091010152806200288181620056cb565b91505062002840565b5060006200289a600143620057ec565b4090506000620028ab607162002c87565b90506032811115620028bb575060325b60005b8181101562002a5b5782675851f42d4c957f2d026714057b7ef767814f019250600081620028ed607162002c87565b620028f99190620057ec565b6200290590856200582d565b62002911908362005844565b90506000607360006200294b88858151811062002932576200293262005403565b6020026020010151607162002c9290919063ffffffff16565b8152602081019190915260400160009081206076805460018101825592526003810180549193507fb5732705f5241370a28908c2fe1303cb223f03b90d857fd0573f003f79fefed49092019190620029a3906200553a565b620029b092919062004a74565b50607780546001810182556000919091526002820180547f7901cb5addcae2d210a531c604a76a660d77039093bac314de0816a16392aff190920191620029f7906200553a565b62002a0492919062004a74565b5085838151811062002a1a5762002a1a62005403565b602002602001015186838151811062002a375762002a3762005403565b6020026020010181815250505050808062002a5290620056cb565b915050620028be565b50606d5462002a7990600160a81b900463ffffffff16600162005587565b63ffffffff1660758190556040519081527f5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c61989060200160405180910390a1505050565b60006060818062002ace858262003918565b909450905062002adf85826200355e565b909250905062002af08582620033c8565b5093959394509092915050565b62002b0762004a0b565b60408051600480825260a082019092526000916020820160808036833701905050905060205b815162002b3c90602062005771565b811162002b6057838101518282015262002b5860208262005844565b905062002b2d565b508060008151811062002b775762002b7762005403565b602090810291909101015182515280518190600190811062002b9d5762002b9d62005403565b602090810291909101015182516001602002015280518190600290811062002bc95762002bc962005403565b6020026020010151826020015160006002811062002beb5762002beb62005403565b602002015280518190600390811062002c085762002c0862005403565b6020026020010151826020015160016002811062002c2a5762002c2a62005403565b602002015250919050565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600062002525825490565b6000620023d58383620039f4565b600254610100900460ff16620011c45760405162461bcd60e51b8152600401620006e5906200585f565b600254610100900460ff1662002cf45760405162461bcd60e51b8152600401620006e5906200585f565b620011c462002d026200259a565b62002c35565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526200189390859062003a7f565b6060810151805160209182012060008181526073835260409081902054905191926001600160a01b0391909116159162002dee91017f4e6f646552656769737472793a206e6f646520616c72656164792065786973748152607360f81b602082015260210190565b6040516020818303038152906040529062002e1e5760405162461bcd60e51b8152600401620006e5919062004ef8565b5062002e296200259a565b6001600160a01b031682600001516001600160a01b0316146040518060400160405280600c81526020016b5a45524f5f4144445245535360a01b8152509062002e875760405162461bcd60e51b8152600401620006e5919062004ef8565b50604080830151518151808301909252600c82526b5a45524f5f4144445245535360a01b602083015262002ed05760405162461bcd60e51b8152600401620006e5919062004ef8565b5062002edd607162002c87565b60808301528151604080840151905160749162002efa91620058aa565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062002f4d826060015180519060200120607162003b5d90919063ffffffff16565b5060608201518051602091820120600090815260738252604090819020845181546001600160a01b039182166001600160a01b031991821617835584870151600184018054919093169116179055908401518051859362002fb69260028501929101906200498f565b506060820151805162002fd49160038401916020909101906200498f565b506080820151816004015590505081600001516001600160a01b03167f25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c668360200151846040015185606001518660800151604051620030379493929190620058c8565b60405180910390a25050565b6040805180820182526000808252602082018190528251600280825260608201909452919290919081602001602082028036833701905050905060205b81516200308f90602062005771565b8111620030b3578381015182820152620030ab60208262005844565b905062003080565b5080600081518110620030ca57620030ca62005403565b602002602001015182600001818152505080600181518110620030f157620030f162005403565b602002602001015182602001818152505050919050565b60005b811562003138576200311f600183620057ec565b90911690806200312f81620056cb565b9150506200310b565b919050565b60408051808201909152600080825260208201819052908160015b8415620031d45784811615620031bc57620031748186620057ec565b9450620031b983620031b38b600001518c60200151866040516020016200319e9392919062005914565b60405160208183030381529060405262003b6b565b62003c3c565b92505b60011b81620031cb81620056cb565b92505062003158565b60408051600380825260808201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081620031ec5750506040805160038082526080820190925291925060009190602082015b6200323962004a0b565b8152602001906001900390816200322f5790505090506200325a8862003cd8565b8260008151811062003270576200327062005403565b60200260200101819052506200329e8b600001518c602001518b6040516020016200319e9392919062005940565b82600181518110620032b457620032b462005403565b60200260200101819052508482600281518110620032d657620032d662005403565b6020026020010181905250620032eb62003d6f565b8160008151811062003301576200330162005403565b6020026020010181905250898160018151811062003323576200332362005403565b60200260200101819052508a8160028151811062003345576200334562005403565b60200260200101819052506200335c828262003e31565b9b9a5050505050505050505050565b60008151602014620033c05760405162461bcd60e51b815260206004820152601760248201527f6279746573206c656e677468206973206e6f742033322e0000000000000000006044820152606401620006e5565b506020015190565b6060600080620033d98585620041d8565b8651909550909150620033ed828662005844565b1115801562003406575062003403818562005844565b84105b620034605760405162461bcd60e51b8152602060048201526024808201527f4e65787456617242797465732c206f66667365742065786365656473206d6178604482015263696d756d60e01b6064820152608401620006e5565b6060811580156200347d57604051915060208201604052620034c9565b6040519150601f8316801560200281840101848101888315602002848c0101015b81831015620034b85780518352602092830192016200349e565b5050848452601f01601f1916604052505b5080620034d7838762005844565b9350935050505b9250929050565b60006002600083604051602001620034ff92919062005981565b60408051601f19818403018152908290526200351b91620058aa565b602060405180830381855afa15801562003539573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062002525919062005757565b600080835183600162003572919062005844565b111580156200358c57506200358983600162005844565b83105b620035e45760405162461bcd60e51b815260206004820152602160248201527f4e65787455696e74382c204f66667365742065786365656473206d6178696d756044820152606d60f81b6064820152608401620006e5565b6000604051846020870101518060001a82535060018101604052601f8103519150508084600162003616919062005844565b92509250509250929050565b600080835183602062003636919062005844565b111580156200365057506200364d83602062005844565b83105b6200369e5760405162461bcd60e51b815260206004820181905260248201527f4e657874486173682c206f66667365742065786365656473206d6178696d756d6044820152606401620006e5565b60006020840185015190508084602062003616919062005844565b604051600160f81b6020820152602181018390526041810182905260009060029060610160408051601f1981840301815290829052620036f991620058aa565b602060405180830381855afa15801562003717573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620023d5919062005757565b600080835183601462003750919062005844565b111580156200376a57506200376783601462005844565b83105b620037c45760405162461bcd60e51b815260206004820152602360248201527f4e657874416464726573732c206f66667365742065786365656473206d6178696044820152626d756d60e81b6064820152608401620006e5565b83830160200151606081901c6200361685601462005844565b606082471015620038405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620006e5565b6001600160a01b0385163b620038995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620006e5565b600080866001600160a01b03168587604051620038b79190620058aa565b60006040518083038185875af1925050503d8060008114620038f6576040519150601f19603f3d011682016040523d82523d6000602084013e620038fb565b606091505b50915091506200390d8282866200434b565b979650505050505050565b60008083518360046200392c919062005844565b111580156200394657506200394383600462005844565b83105b6200399f5760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7433322c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401620006e5565b600060405160046000600182038760208a0101515b83831015620039d65780821a83860153600183019250600182039150620039b4565b505050016040819052601f1901519050806200361685600462005844565b8154600090821062003a545760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401620006e5565b82600001828154811062003a6c5762003a6c62005403565b9060005260206000200154905092915050565b600062003ad6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620025819092919063ffffffff16565b80519091501562003b58578080602001905181019062003af7919062005419565b62003b585760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620006e5565b505050565b6000620023d5838362004389565b6040805180820190915260008082526020820152600060028360405162003b939190620058aa565b602060405180830381855afa15801562003bb1573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062003bd6919062005757565b9050600062003bf560008051602062005cf5833981519152836200582d565b905060005b62003c0582620043db565b9050801562003c27576040805180820190915291825260208201529392505050565b62003c3460018362005844565b915062003bfa565b604080518082019091526000808252602082015262003c5a62004af8565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508062003cd05760405162461bcd60e51b8152602060048201526011602482015270105919081c1bda5b9d1cc819985a5b1959607a1b6044820152606401620006e5565b505092915050565b604080518082019091526000808252602082015262003cf78262004420565b1562003d16575050604080518082019091526000808252602082015290565b60405180604001604052808360000151815260200160008051602062005cf5833981519152846020015162003d4c91906200582d565b62003d679060008051602062005cf5833981519152620057ec565b905292915050565b62003d7962004a0b565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b6000815183511462003e7e5760405162461bcd60e51b81526020600482015260156024820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b6044820152606401620006e5565b8251600062003e8f82600662005771565b90506000816001600160401b0381111562003eae5762003eae62005100565b60405190808252806020026020018201604052801562003ed8578160200160208202803683370190505b50905060005b83811015620041595786818151811062003efc5762003efc62005403565b6020026020010151600001518282600662003f18919062005771565b62003f2590600062005844565b8151811062003f385762003f3862005403565b60200260200101818152505086818151811062003f595762003f5962005403565b6020026020010151602001518282600662003f75919062005771565b62003f8290600162005844565b8151811062003f955762003f9562005403565b60200260200101818152505085818151811062003fb65762003fb662005403565b602090810291909101015151518262003fd183600662005771565b62003fde90600262005844565b8151811062003ff15762003ff162005403565b60200260200101818152505085818151811062004012576200401262005403565b602090810291909101810151510151826200402f83600662005771565b6200403c90600362005844565b815181106200404f576200404f62005403565b60200260200101818152505085818151811062004070576200407062005403565b60200260200101516020015160006002811062004091576200409162005403565b602002015182620040a483600662005771565b620040b190600462005844565b81518110620040c457620040c462005403565b602002602001018181525050858181518110620040e557620040e562005403565b60200260200101516020015160016002811062004106576200410662005403565b6020020151826200411983600662005771565b6200412690600562005844565b8151811062004139576200413962005403565b6020908102919091010152806200415081620056cb565b91505062003ede565b506200416462004b16565b6000602082602086026020860160086107d05a03fa905080620041ca5760405162461bcd60e51b815260206004820152601960248201527f50616972696e67206f7065726174696f6e206661696c65642e000000000000006044820152606401620006e5565b505115159695505050505050565b6000806000620041e985856200355e565b94509050600060fd60ff831614156200427f5762004208868662004437565b955061ffff16905060fd811080159062004224575061ffff8111155b620042725760405162461bcd60e51b815260206004820152601f60248201527f4e65787455696e7431362c2076616c7565206f7574736964652072616e6765006044820152606401620006e5565b9250839150620034de9050565b8160ff1660fe1415620042d75762004298868662003918565b955063ffffffff16905061ffff81118015620042b8575063ffffffff8111155b620042725760405162461bcd60e51b8152600401620006e590620059b2565b8160ff1660ff14156200432357620042f08686620044f9565b95506001600160401b0316905063ffffffff8111620042725760405162461bcd60e51b8152600401620006e590620059b2565b5060ff811660fd8110620042725760405162461bcd60e51b8152600401620006e590620059b2565b606083156200435c575081620023d5565b8251156200436d5782518084602001fd5b8160405162461bcd60e51b8152600401620006e5919062004ef8565b6000818152600183016020526040812054620043d25750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562002525565b50600062002525565b60006200252560008051602062005cf5833981519152806200440085600383620045d5565b6200440d90600362005844565b6200441991906200582d565b9062004621565b805160009015801562002525575050602001511590565b60008083518360026200444b919062005844565b111580156200446557506200446283600262005844565b83105b620044be5760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7431362c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401620006e5565b6000604051846020870101518060011a82538060001a60018301535060028101604052601e8103519150508084600262003616919062005844565b60008083518360086200450d919062005844565b111580156200452757506200452483600862005844565b83105b620045805760405162461bcd60e51b815260206004820152602260248201527f4e65787455696e7436342c206f66667365742065786365656473206d6178696d604482015261756d60f01b6064820152608401620006e5565b600060405160086000600182038760208a0101515b83831015620045b75780821a8386015360018301925060018203915062004595565b505050016040819052601f1901519050806200361685600862005844565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa6200461757600080fd5b5051949350505050565b60006200462f83836200484b565b600114620046405750600062002525565b826200464f5750600062002525565b6200465c6004836200582d565b6003141562004694576200468c8360046200467985600162005844565b620046859190620057a9565b84620045d5565b905062002525565b6000620046a3600184620057ec565b905060005b620046b56002836200582d565b620046de57620046c7600283620057a9565b9150620046d681600162005844565b9050620046a8565b60025b620046ed81866200484b565b600019146200470b576200470381600162005844565b9050620046e1565b6000620047348760026200472187600162005844565b6200472d9190620057a9565b88620045d5565b9050600062004745888689620045d5565b905060006200475684878a620045d5565b905084600080845b5060009050845b83821015620047a35780600114156200477e57620047a3565b6200478c8160028e620045d5565b9050816200479a81620056cb565b92505062004765565b81620047bc57869a505050505050505050505062002525565b620047ef856001620047cf8588620057ec565b620047db9190620057ec565b620047e890600262005ae4565b8e620045d5565b92508b620047fe848062005771565b6200480a91906200582d565b94508b62004819848962005771565b6200482591906200582d565b96508b62004834868862005771565b6200484091906200582d565b95508193506200475e565b6000806200487584600262004862600187620057ec565b6200486e9190620057a9565b85620045d5565b9050801580620048855750806001145b156200489357905062002525565b620048a0600184620057ec565b811415620048b45760001991505062002525565b60405162461bcd60e51b815260206004820152601d60248201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e0000006044820152606401620006e5565b82600281019282156200492e579160200282015b828111156200492e57825182559160200191906001019062004911565b506200493c92915062004b34565b5090565b6102028062005af383390190565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b8280546200499d906200553a565b90600052602060002090601f016020900481019282620049c157600085556200492e565b82601f10620049dc57805160ff19168380011785556200492e565b828001600101855582156200492e57918201828111156200492e57825182559160200191906001019062004911565b604051806040016040528062004a2062004b4b565b815260200162004a2f62004b4b565b905290565b508054600082559060005260206000209081019062000c16919062004b69565b508054600082559060005260206000209081019062000c16919062004b8a565b82805462004a82906200553a565b90600052602060002090601f01602090048101928262004aa657600085556200492e565b82601f1062004ab957805485556200492e565b828001600101855582156200492e57600052602060002091601f016020900482015b828111156200492e57825482559160010191906001019062004adb565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b808211156200493c576000815560010162004b35565b60405180604001604052806002906020820280368337509192915050565b808211156200493c57600062004b80828262004bab565b5060010162004b69565b808211156200493c57600062004ba1828262004bab565b5060010162004b8a565b50805462004bb9906200553a565b6000825580601f1062004bca575050565b601f01602090049060005260206000209081019062000c16919062004b34565b60006020828403121562004bfd57600080fd5b5035919050565b60008083601f84011262004c1757600080fd5b5081356001600160401b0381111562004c2f57600080fd5b602083019150836020828501011115620034de57600080fd5b600080600080600080600080600060a08a8c03121562004c6757600080fd5b89356001600160401b038082111562004c7f57600080fd5b62004c8d8d838e0162004c04565b909b50995060208c013591508082111562004ca757600080fd5b62004cb58d838e0162004c04565b909950975060408c013591508082111562004ccf57600080fd5b62004cdd8d838e0162004c04565b909750955060608c013591508082111562004cf757600080fd5b5062004d068c828d0162004c04565b9a9d999c50979a9699959894979660800135949350505050565b6001600160a01b038116811462000c1657600080fd5b60006020828403121562004d4957600080fd5b8135620023d58162004d20565b60008060008060008060008060e0898b03121562004d7357600080fd5b88356001600160401b0381111562004d8a57600080fd5b62004d988b828c0162004c04565b9099509750506020890135955060408901359450606089013593506080890135925060a089013562004dca8162004d20565b8092505060c089013590509295985092959890939650565b60008060008060008060008060e0898b03121562004dff57600080fd5b88356001600160401b0381111562004e1657600080fd5b62004e248b828c0162004c04565b909950975050602089013562004e3a8162004d20565b9550604089013562004e4c8162004d20565b9450606089013593506080890135925060a089013562004dca8162004d20565b801515811462000c1657600080fd5b60006020828403121562004e8e57600080fd5b8135620023d58162004e6c565b60005b8381101562004eb857818101518382015260200162004e9e565b83811115620018935750506000910152565b6000815180845262004ee481602086016020860162004e9b565b601f01601f19169290920160200192915050565b602081526000620023d5602083018462004eca565b600060018060a01b0380835116845280602084015116602085015250604082015160a0604085015262004f4460a085018262004eca565b90506060830151848203606086015262004f5f828262004eca565b915050608083015160808501528091505092915050565b602081526000620023d5602083018462004f0d565b60608152600062004fa0606083018662004eca565b905060ff8416602083015263ffffffff83166040830152949350505050565b6000815180845260208085019450848260051b860182860160005b858110156200500857838303895262004ff583835162004eca565b9885019892509084019060010162004fda565b5090979650505050505050565b602081526000620023d5602083018462004fbf565b6060815260006200503f606083018662004fbf565b6020838203818501528186518084528284019150828160051b85010183890160005b838110156200509357601f198784030185526200508083835162004eca565b9486019492509085019060010162005061565b50508095505050505050826040830152949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090620050d99083018662004eca565b8281036060840152620050ed818662004eca565b9150508260808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200513b576200513b62005100565b60405290565b600082601f8301126200515357600080fd5b81356001600160401b038082111562005170576200517062005100565b604051601f8301601f19908116603f011681019082821181831017156200519b576200519b62005100565b81604052838152866020858801011115620051b557600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215620051e857600080fd5b81356001600160401b03811115620051ff57600080fd5b620025928482850162005141565b6000806000606084860312156200522357600080fd5b8335620052308162004d20565b92506020840135620052428162004d20565b91506040840135620052548162004d20565b809150509250925092565b803560ff811681146200313857600080fd5b600080600080600060a086880312156200528a57600080fd5b85356001600160401b0380821115620052a257600080fd5b9087019060a0828a031215620052b757600080fd5b620052c162005116565b8235620052ce8162004d20565b81526020830135620052e08162004d20565b6020820152604083013582811115620052f857600080fd5b620053068b82860162005141565b6040830152506060830135828111156200531f57600080fd5b6200532d8b82860162005141565b606083015250608083013560808201528097505050506020860135935062005358604087016200525f565b94979396509394606081013594506080013592915050565b6000806000606084860312156200538657600080fd5b505081359360208301359350604090920135919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620053f657603f19888603018452620053e385835162004f0d565b94509285019290850190600101620053c4565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200542c57600080fd5b8151620023d58162004e6c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c0815260006200548d60c08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b8860208401528760408401528281036060840152620054ae81878962005439565b6080840195909552505060a00152949350505050565b60e081526000620054ef60e08301600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b6001600160a01b038a81166020850152604084018a905283820360608501526200551b82898b62005439565b96811660808501529490941660a08301525060c0015250949350505050565b600181811c908216806200554f57607f821691505b60208210811415620013e757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115620055a957620055a962005571565b01949350505050565b8060005b600281101562001893578154845260209093019260019182019101620055b6565b60808101620055e78284620055b2565b620025256040830160028501620055b2565b8060005b600281101562001893578151845260209384019390910190600101620055fd565b600060808201905062005633828451620055f9565b6020830151620056476040840182620055f9565b5092915050565b60808152600062005663608083018762004eca565b828103602084015262005677818762004eca565b9415156040840152505063ffffffff9190911660609091015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415620056e257620056e262005571565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156200574a57600080fd5b8151620023d58162004d20565b6000602082840312156200576a57600080fd5b5051919050565b60008160001904831182151516156200578e576200578e62005571565b500290565b634e487b7160e01b600052601260045260246000fd5b600082620057bb57620057bb62005793565b500490565b60008085851115620057d157600080fd5b83861115620057df57600080fd5b5050820193919092039150565b60008282101562005801576200580162005571565b500390565b600063ffffffff8083168181141562005823576200582362005571565b6001019392505050565b6000826200583f576200583f62005793565b500690565b600082198211156200585a576200585a62005571565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251620058be81846020870162004e9b565b9190910192915050565b6001600160a01b0385168152608060208201819052600090620058ee9083018662004eca565b828103604084015262005902818662004eca565b91505082606083015295945050505050565b620059208185620055f9565b6200592f6040820184620055f9565b608081019190915260a00192915050565b6200594c8185620055f9565b6200595b6040820184620055f9565b600082516200597281608085016020870162004e9b565b91909101608001949350505050565b60ff60f81b8360f81b16815260008251620059a481600185016020870162004e9b565b919091016001019392505050565b6020808252818101527f4e65787456617255696e742c2076616c7565206f7574736964652072616e6765604082015260600190565b600181815b8085111562005a2857816000190482111562005a0c5762005a0c62005571565b8085161562005a1a57918102915b93841c9390800290620059ec565b509250929050565b60008262005a415750600162002525565b8162005a505750600062002525565b816001811462005a69576002811462005a745762005a94565b600191505062002525565b60ff84111562005a885762005a8862005571565b50506001821b62002525565b5060208310610133831016604e8410600b841016171562005ab9575081810a62002525565b62005ac58383620059e7565b806000190482111562005adc5762005adc62005571565b029392505050565b6000620023d5838362005a3056fe6080604052600180546001600160a01b0319163317905534801561002257600080fd5b506101d0806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806383197ef0146100465780638da5cb5b14610050578063afe16e4414610080575b600080fd5b61004e6100a3565b005b600154610063906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009361008e366004610181565b6100fc565b6040519015158152602001610077565b6001546001600160a01b031633146100ee5760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6001546001600160a01b0316ff5b6001546000906001600160a01b031633146101455760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016100e5565b60008281526020819052604090205460ff161561016457506001919050565b506000908152602081905260408120805460ff1916600117905590565b60006020828403121561019357600080fd5b503591905056fea2646970667358221220c69ba55cc60c62534bcb6ef49f32647b97455f63db7db3994aa55b2fdedd950e64736f6c634300080a003330644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220c93b68b0b9165f5bc929cd1fdc47926b03833654ad0c9206d97d07c0b3f1360c64736f6c634300080a0033",
}

// NodeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeRegistryMetaData.ABI instead.
var NodeRegistryABI = NodeRegistryMetaData.ABI

// NodeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeRegistryMetaData.Bin instead.
var NodeRegistryBin = NodeRegistryMetaData.Bin

// DeployNodeRegistry deploys a new Ethereum contract, binding an instance of NodeRegistry to it.
func DeployNodeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeRegistry, error) {
	parsed, err := NodeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NodeRegistry is an auto generated Go binding around an Ethereum contract.
type NodeRegistry struct {
	NodeRegistryCaller     // Read-only binding to the contract
	NodeRegistryTransactor // Write-only binding to the contract
	NodeRegistryFilterer   // Log filterer for contract events
}

// NodeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
	gsn      *GsnCallOpts
}

func (_NodeRegistry *NodeRegistryTransactor) SetGSNOptions(opts *GsnCallOpts) {
	_NodeRegistry.gsn = opts
}

// NodeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeRegistrySession struct {
	Contract     *NodeRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeRegistryCallerSession struct {
	Contract *NodeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// NodeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeRegistryTransactorSession struct {
	Contract     *NodeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// NodeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRegistryRaw struct {
	Contract *NodeRegistry // Generic contract binding to access the raw methods on
}

// NodeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeRegistryCallerRaw struct {
	Contract *NodeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// NodeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeRegistryTransactorRaw struct {
	Contract *NodeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeRegistry creates a new instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistry(address common.Address, backend bind.ContractBackend) (*NodeRegistry, error) {
	contract, err := bindNodeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeRegistry{NodeRegistryCaller: NodeRegistryCaller{contract: contract}, NodeRegistryTransactor: NodeRegistryTransactor{contract: contract}, NodeRegistryFilterer: NodeRegistryFilterer{contract: contract}}, nil
}

// NewNodeRegistryCaller creates a new read-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryCaller(address common.Address, caller bind.ContractCaller) (*NodeRegistryCaller, error) {
	contract, err := bindNodeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCaller{contract: contract}, nil
}

// NewNodeRegistryTransactor creates a new write-only instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeRegistryTransactor, error) {
	contract, err := bindNodeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryTransactor{contract: contract}, nil
}

// NewNodeRegistryFilterer creates a new log filterer instance of NodeRegistry, bound to a specific deployed contract.
func NewNodeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeRegistryFilterer, error) {
	contract, err := bindNodeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryFilterer{contract: contract}, nil
}

// bindNodeRegistry binds a generic wrapper to an already deployed contract.
func bindNodeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.NodeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.NodeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeRegistry *NodeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeRegistry *NodeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeRegistry.Contract.contract.Transact(opts, method, params...)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) EYWA(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "EYWA")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistrySession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// EYWA is a free data retrieval call binding the contract method 0x4cd47f39.
//
// Solidity: function EYWA() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) EYWA() (common.Address, error) {
	return _NodeRegistry.Contract.EYWA(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) MINCOLLATERAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "MIN_COLLATERAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// MINCOLLATERAL is a free data retrieval call binding the contract method 0xfa779648.
//
// Solidity: function MIN_COLLATERAL() view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) MINCOLLATERAL() (*big.Int, error) {
	return _NodeRegistry.Contract.MINCOLLATERAL(&_NodeRegistry.CallOpts)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCaller) CastToAddress(opts *bind.CallOpts, x [32]byte) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToAddress", x)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistrySession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToAddress is a free data retrieval call binding the contract method 0x0e03e490.
//
// Solidity: function castToAddress(bytes32 x) pure returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) CastToAddress(x [32]byte) (common.Address, error) {
	return _NodeRegistry.Contract.CastToAddress(&_NodeRegistry.CallOpts, x)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCaller) CastToBytes32(opts *bind.CallOpts, a common.Address) ([32]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "castToBytes32", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistrySession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CastToBytes32 is a free data retrieval call binding the contract method 0x3e7e25c1.
//
// Solidity: function castToBytes32(address a) pure returns(bytes32)
func (_NodeRegistry *NodeRegistryCallerSession) CastToBytes32(a common.Address) ([32]byte, error) {
	return _NodeRegistry.Contract.CastToBytes32(&_NodeRegistry.CallOpts, a)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) CheckPermissionTrustList(opts *bind.CallOpts, _blsPubKey [32]byte) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "checkPermissionTrustList", _blsPubKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) CheckPermissionTrustList(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _blsPubKey)
}

// CheckPermissionTrustList is a free data retrieval call binding the contract method 0xeee57a38.
//
// Solidity: function checkPermissionTrustList(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) CheckPermissionTrustList(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.CheckPermissionTrustList(&_NodeRegistry.CallOpts, _blsPubKey)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Dao() (common.Address, error) {
	return _NodeRegistry.Contract.Dao(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistrySession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_NodeRegistry *NodeRegistryCallerSession) EpochNum() (uint32, error) {
	return _NodeRegistry.Contract.EpochNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistrySession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_NodeRegistry *NodeRegistryCallerSession) EpochParticipantsNum() (uint8, error) {
	return _NodeRegistry.Contract.EpochParticipantsNum(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCaller) GetBLSPubKeys(opts *bind.CallOpts) ([][]byte, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getBLSPubKeys")

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistrySession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetBLSPubKeys is a free data retrieval call binding the contract method 0x7595ea2b.
//
// Solidity: function getBLSPubKeys() view returns(bytes[])
func (_NodeRegistry *NodeRegistryCallerSession) GetBLSPubKeys() ([][]byte, error) {
	return _NodeRegistry.Contract.GetBLSPubKeys(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistrySession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_NodeRegistry *NodeRegistryCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _NodeRegistry.Contract.GetEpoch(&_NodeRegistry.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCaller) GetNode(opts *bind.CallOpts, _blsPubKey [32]byte) (NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNode", _blsPubKey)

	if err != nil {
		return *new(NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodeRegistryNode)).(*NodeRegistryNode)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistrySession) GetNode(_blsPubKey [32]byte) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _blsPubKey)
}

// GetNode is a free data retrieval call binding the contract method 0x50c946fe.
//
// Solidity: function getNode(bytes32 _blsPubKey) view returns((address,address,string,bytes,uint256))
func (_NodeRegistry *NodeRegistryCallerSession) GetNode(_blsPubKey [32]byte) (NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNode(&_NodeRegistry.CallOpts, _blsPubKey)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCaller) GetNodes(opts *bind.CallOpts) ([]NodeRegistryNode, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNodes")

	if err != nil {
		return *new([]NodeRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new([]NodeRegistryNode)).(*[]NodeRegistryNode)

	return out0, err

}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistrySession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNodes is a free data retrieval call binding the contract method 0xe29581aa.
//
// Solidity: function getNodes() view returns((address,address,string,bytes,uint256)[])
func (_NodeRegistry *NodeRegistryCallerSession) GetNodes() ([]NodeRegistryNode, error) {
	return _NodeRegistry.Contract.GetNodes(&_NodeRegistry.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistrySession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _NodeRegistry.Contract.GetNonce(&_NodeRegistry.CallOpts, from)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCaller) GetSnapshot(opts *bind.CallOpts) ([][]byte, []string, *big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "getSnapshot")

	if err != nil {
		return *new([][]byte), *new([]string), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistrySession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x9c54297c.
//
// Solidity: function getSnapshot() view returns(bytes[], string[], uint256)
func (_NodeRegistry *NodeRegistryCallerSession) GetSnapshot() ([][]byte, []string, *big.Int, error) {
	return _NodeRegistry.Contract.GetSnapshot(&_NodeRegistry.CallOpts)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCaller) HostIds(opts *bind.CallOpts, arg0 string) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "hostIds", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistrySession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// HostIds is a free data retrieval call binding the contract method 0xab7a87dd.
//
// Solidity: function hostIds(string ) view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) HostIds(arg0 string) (common.Address, error) {
	return _NodeRegistry.Contract.HostIds(&_NodeRegistry.CallOpts, arg0)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _NodeRegistry.Contract.IsTrustedForwarder(&_NodeRegistry.CallOpts, forwarder)
}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCaller) NodeExists(opts *bind.CallOpts, _blsPubKey [32]byte) (bool, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "nodeExists", _blsPubKey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistrySession) NodeExists(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _blsPubKey)
}

// NodeExists is a free data retrieval call binding the contract method 0xfc358197.
//
// Solidity: function nodeExists(bytes32 _blsPubKey) view returns(bool)
func (_NodeRegistry *NodeRegistryCallerSession) NodeExists(_blsPubKey [32]byte) (bool, error) {
	return _NodeRegistry.Contract.NodeExists(&_NodeRegistry.CallOpts, _blsPubKey)
}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCaller) OwnedNodes(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "ownedNodes", arg0)

	outstruct := new(struct {
		Owner     common.Address
		Pool      common.Address
		HostId    string
		BlsPubKey []byte
		NodeId    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Pool = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HostId = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.BlsPubKey = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.NodeId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistrySession) OwnedNodes(arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// OwnedNodes is a free data retrieval call binding the contract method 0xa2991687.
//
// Solidity: function ownedNodes(bytes32 ) view returns(address owner, address pool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryCallerSession) OwnedNodes(arg0 [32]byte) (struct {
	Owner     common.Address
	Pool      common.Address
	HostId    string
	BlsPubKey []byte
	NodeId    *big.Int
}, error) {
	return _NodeRegistry.Contract.OwnedNodes(&_NodeRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistrySession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) Owner() (common.Address, error) {
	return _NodeRegistry.Contract.Owner(&_NodeRegistry.CallOpts)
}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) PoolFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "poolFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistrySession) PoolFactory() (common.Address, error) {
	return _NodeRegistry.Contract.PoolFactory(&_NodeRegistry.CallOpts)
}

// PoolFactory is a free data retrieval call binding the contract method 0x4219dc40.
//
// Solidity: function poolFactory() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) PoolFactory() (common.Address, error) {
	return _NodeRegistry.Contract.PoolFactory(&_NodeRegistry.CallOpts)
}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) ReqIdFilter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "reqIdFilter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistrySession) ReqIdFilter() (common.Address, error) {
	return _NodeRegistry.Contract.ReqIdFilter(&_NodeRegistry.CallOpts)
}

// ReqIdFilter is a free data retrieval call binding the contract method 0xda6b6c6a.
//
// Solidity: function reqIdFilter() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) ReqIdFilter() (common.Address, error) {
	return _NodeRegistry.Contract.ReqIdFilter(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCaller) Snapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "snapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistrySession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// Snapshot is a free data retrieval call binding the contract method 0x9711715a.
//
// Solidity: function snapshot() view returns(uint256 snapNum)
func (_NodeRegistry *NodeRegistryCallerSession) Snapshot() (*big.Int, error) {
	return _NodeRegistry.Contract.Snapshot(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistrySession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_NodeRegistry *NodeRegistryCallerSession) TrustedForwarder() (common.Address, error) {
	return _NodeRegistry.Contract.TrustedForwarder(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NodeRegistry.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistrySession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_NodeRegistry *NodeRegistryCallerSession) VersionRecipient() (string, error) {
	return _NodeRegistry.Contract.VersionRecipient(&_NodeRegistry.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactor) AddContractBindOverGsn(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistrySession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistrySession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.AddContractBind(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}
func (_NodeRegistry *NodeRegistryTransactorSession) AddContractBindOverGsn(from [32]byte, oppositeBridge [32]byte, to [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.AddContractBindOverGsn(&_NodeRegistry.TransactOpts, from, oppositeBridge, to)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayer(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "createRelayer", _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactor) CreateRelayerOverGsn(opts *bind.TransactOpts, _node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "createRelayer", _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistrySession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistrySession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// CreateRelayer is a paid mutator transaction binding the contract method 0xcf9f47d8.
//
// Solidity: function createRelayer((address,address,string,bytes,uint256) _node, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayer(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _NodeRegistry.Contract.CreateRelayer(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}
func (_NodeRegistry *NodeRegistryTransactorSession) CreateRelayerOverGsn(_node NodeRegistryNode, _deadline *big.Int, _v uint8, _r [32]byte, _s [32]byte) (common.Hash, error) {
	return _NodeRegistry.Contract.CreateRelayerOverGsn(&_NodeRegistry.TransactOpts, _node, _deadline, _v, _r, _s)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoTransferOwnership", newDao)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoTransferOwnershipOverGsn(opts *bind.TransactOpts, newDao common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistrySession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoTransferOwnership(&_NodeRegistry.TransactOpts, newDao)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoTransferOwnershipOverGsn(newDao common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoTransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactor) DaoUpdateEpochRequestOverGsn(opts *bind.TransactOpts, resetEpoch bool) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistrySession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequest(&_NodeRegistry.TransactOpts, resetEpoch)
}
func (_NodeRegistry *NodeRegistryTransactorSession) DaoUpdateEpochRequestOverGsn(resetEpoch bool) (common.Hash, error) {
	return _NodeRegistry.Contract.DaoUpdateEpochRequestOverGsn(&_NodeRegistry.TransactOpts, resetEpoch)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize", forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) InitializeOverGsn(opts *bind.TransactOpts, forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize", forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistrySession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize(forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize(&_NodeRegistry.TransactOpts, forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) InitializeOverGsn(forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.InitializeOverGsn(&_NodeRegistry.TransactOpts, forwarder)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactor) Initialize2(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "initialize2", _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactor) Initialize2OverGsn(opts *bind.TransactOpts, _EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "initialize2", _EYWA, _forwarder, _poolFactory)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistrySession) Initialize2(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistrySession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xbde199e4.
//
// Solidity: function initialize2(address _EYWA, address _forwarder, address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.Initialize2(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactorSession) Initialize2OverGsn(_EYWA common.Address, _forwarder common.Address, _poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.Initialize2OverGsn(&_NodeRegistry.TransactOpts, _EYWA, _forwarder, _poolFactory)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) ReceiveRequestV2OverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "receiveRequestV2", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0x135160af.
//
// Solidity: function receiveRequestV2(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) ReceiveRequestV2OverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.ReceiveRequestV2OverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "renounceOwnership")
}
func (_NodeRegistry *NodeRegistryTransactor) RenounceOwnershipOverGsn(opts *bind.TransactOpts) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistrySession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NodeRegistry.Contract.RenounceOwnership(&_NodeRegistry.TransactOpts)
}
func (_NodeRegistry *NodeRegistryTransactorSession) RenounceOwnershipOverGsn() (common.Hash, error) {
	return _NodeRegistry.Contract.RenounceOwnershipOverGsn(&_NodeRegistry.TransactOpts)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetRelayerPoolFactory(opts *bind.TransactOpts, _poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setRelayerPoolFactory", _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactor) SetRelayerPoolFactoryOverGsn(opts *bind.TransactOpts, _poolFactory common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setRelayerPoolFactory", _poolFactory)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistrySession) SetRelayerPoolFactory(_poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactory(&_NodeRegistry.TransactOpts, _poolFactory)
}
func (_NodeRegistry *NodeRegistrySession) SetRelayerPoolFactoryOverGsn(_poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactoryOverGsn(&_NodeRegistry.TransactOpts, _poolFactory)
}

// SetRelayerPoolFactory is a paid mutator transaction binding the contract method 0x7320660d.
//
// Solidity: function setRelayerPoolFactory(address _poolFactory) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetRelayerPoolFactory(_poolFactory common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactory(&_NodeRegistry.TransactOpts, _poolFactory)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetRelayerPoolFactoryOverGsn(_poolFactory common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetRelayerPoolFactoryOverGsn(&_NodeRegistry.TransactOpts, _poolFactory)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setTrustedForwarder", _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactor) SetTrustedForwarderOverGsn(opts *bind.TransactOpts, _forwarder common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setTrustedForwarder", _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistrySession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// SetTrustedForwarder is a paid mutator transaction binding the contract method 0xda742228.
//
// Solidity: function setTrustedForwarder(address _forwarder) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetTrustedForwarder(&_NodeRegistry.TransactOpts, _forwarder)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetTrustedForwarderOverGsn(_forwarder common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetTrustedForwarderOverGsn(&_NodeRegistry.TransactOpts, _forwarder)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistryTransactor) SetUtilityToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "setUtilityToken", _token)
}
func (_NodeRegistry *NodeRegistryTransactor) SetUtilityTokenOverGsn(opts *bind.TransactOpts, _token common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "setUtilityToken", _token)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistrySession) SetUtilityToken(_token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetUtilityToken(&_NodeRegistry.TransactOpts, _token)
}
func (_NodeRegistry *NodeRegistrySession) SetUtilityTokenOverGsn(_token common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetUtilityTokenOverGsn(&_NodeRegistry.TransactOpts, _token)
}

// SetUtilityToken is a paid mutator transaction binding the contract method 0x9013ae08.
//
// Solidity: function setUtilityToken(address _token) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) SetUtilityToken(_token common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.SetUtilityToken(&_NodeRegistry.TransactOpts, _token)
}
func (_NodeRegistry *NodeRegistryTransactorSession) SetUtilityTokenOverGsn(_token common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.SetUtilityTokenOverGsn(&_NodeRegistry.TransactOpts, _token)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}
func (_NodeRegistry *NodeRegistryTransactor) TransferOwnershipOverGsn(opts *bind.TransactOpts, newOwner common.Address) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistrySession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransferOwnership(&_NodeRegistry.TransactOpts, newOwner)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransferOwnershipOverGsn(newOwner common.Address) (common.Hash, error) {
	return _NodeRegistry.Contract.TransferOwnershipOverGsn(&_NodeRegistry.TransactOpts, newOwner)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2OverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2OverGsn(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2OverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactor) TransmitRequestV2ToSolanaOverGsn(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "transmitRequestV2ToSolana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistrySession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2ToSolana is a paid mutator transaction binding the contract method 0x31b433f9.
//
// Solidity: function transmitRequestV2ToSolana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolana(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}
func (_NodeRegistry *NodeRegistryTransactorSession) TransmitRequestV2ToSolanaOverGsn(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.TransmitRequestV2ToSolanaOverGsn(&_NodeRegistry.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpoch(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.contract.Transact(opts, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactor) UpdateEpochOverGsn(opts *bind.TransactOpts, _blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return GsnExecutor(_NodeRegistry.gsn, NodeRegistryMetaData.ABI, "updateEpoch", _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistrySession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistrySession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0x4f907a69.
//
// Solidity: function updateEpoch(bytes _blockHeader, bytes _txMerkleProve, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpoch(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _NodeRegistry.Contract.UpdateEpoch(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}
func (_NodeRegistry *NodeRegistryTransactorSession) UpdateEpochOverGsn(_blockHeader []byte, _txMerkleProve []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (common.Hash, error) {
	return _NodeRegistry.Contract.UpdateEpochOverGsn(&_NodeRegistry.TransactOpts, _blockHeader, _txMerkleProve, _votersPubKey, _votersSignature, _votersMask)
}

// NodeRegistryCreatedRelayerIterator is returned from FilterCreatedRelayer and is used to iterate over the raw logs and unpacked data for CreatedRelayer events raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayerIterator struct {
	Event *NodeRegistryCreatedRelayer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryCreatedRelayerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryCreatedRelayer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryCreatedRelayer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryCreatedRelayerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryCreatedRelayerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryCreatedRelayer represents a CreatedRelayer event raised by the NodeRegistry contract.
type NodeRegistryCreatedRelayer struct {
	Owner       common.Address
	RelayerPool common.Address
	HostId      string
	BlsPubKey   []byte
	NodeId      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreatedRelayer is a free log retrieval operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) FilterCreatedRelayer(opts *bind.FilterOpts, owner []common.Address) (*NodeRegistryCreatedRelayerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryCreatedRelayerIterator{contract: _NodeRegistry.contract, event: "CreatedRelayer", logs: logs, sub: sub}, nil
}

// WatchCreatedRelayer is a free log subscription operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) WatchCreatedRelayer(opts *bind.WatchOpts, sink chan<- *NodeRegistryCreatedRelayer, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "CreatedRelayer", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryCreatedRelayer)
				if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedRelayer is a log parse operation binding the contract event 0x25fb09195adb23e35f33a9a653837bcc46342c60a800006a655a13539b5c1c66.
//
// Solidity: event CreatedRelayer(address indexed owner, address relayerPool, string hostId, bytes blsPubKey, uint256 nodeId)
func (_NodeRegistry *NodeRegistryFilterer) ParseCreatedRelayer(log types.Log) (*NodeRegistryCreatedRelayer, error) {
	event := new(NodeRegistryCreatedRelayer)
	if err := _NodeRegistry.contract.UnpackLog(event, "CreatedRelayer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the NodeRegistry contract.
type NodeRegistryNewEpochIterator struct {
	Event *NodeRegistryNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewEpoch represents a NewEpoch event raised by the NodeRegistry contract.
type NodeRegistryNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*NodeRegistryNewEpochIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewEpochIterator{contract: _NodeRegistry.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewEpoch) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewEpoch)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewEpoch(log types.Log) (*NodeRegistryNewEpoch, error) {
	event := new(NodeRegistryNewEpoch)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryNewSnapshotIterator is returned from FilterNewSnapshot and is used to iterate over the raw logs and unpacked data for NewSnapshot events raised by the NodeRegistry contract.
type NodeRegistryNewSnapshotIterator struct {
	Event *NodeRegistryNewSnapshot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryNewSnapshotIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryNewSnapshot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryNewSnapshot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryNewSnapshotIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryNewSnapshotIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryNewSnapshot represents a NewSnapshot event raised by the NodeRegistry contract.
type NodeRegistryNewSnapshot struct {
	SnapNum *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSnapshot is a free log retrieval operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) FilterNewSnapshot(opts *bind.FilterOpts) (*NodeRegistryNewSnapshotIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryNewSnapshotIterator{contract: _NodeRegistry.contract, event: "NewSnapshot", logs: logs, sub: sub}, nil
}

// WatchNewSnapshot is a free log subscription operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) WatchNewSnapshot(opts *bind.WatchOpts, sink chan<- *NodeRegistryNewSnapshot) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "NewSnapshot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryNewSnapshot)
				if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSnapshot is a log parse operation binding the contract event 0x5d18a0a8930f7bf520ae0ed5fbc4db582b4b60c0c0d2a06a3dceaeedc10c6198.
//
// Solidity: event NewSnapshot(uint256 snapNum)
func (_NodeRegistry *NodeRegistryFilterer) ParseNewSnapshot(log types.Log) (*NodeRegistryNewSnapshot, error) {
	event := new(NodeRegistryNewSnapshot)
	if err := _NodeRegistry.contract.UnpackLog(event, "NewSnapshot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestIterator struct {
	Event *NodeRegistryOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequest represents a OracleRequest event raised by the NodeRegistry contract.
type NodeRegistryOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*NodeRegistryOracleRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestIterator{contract: _NodeRegistry.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequest(log types.Log) (*NodeRegistryOracleRequest, error) {
	event := new(NodeRegistryOracleRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolanaIterator struct {
	Event *NodeRegistryOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOracleRequestSolana represents a OracleRequestSolana event raised by the NodeRegistry contract.
type NodeRegistryOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	OppositeBridge [32]byte
	ChainId        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*NodeRegistryOracleRequestSolanaIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOracleRequestSolanaIterator{contract: _NodeRegistry.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *NodeRegistryOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOracleRequestSolana)
				if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x2b0dad29f6c03635bda7007bdf022fea8d9c71e34bd592b687af9284f41aea13.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 oppositeBridge, uint256 chainId)
func (_NodeRegistry *NodeRegistryFilterer) ParseOracleRequestSolana(log types.Log) (*NodeRegistryOracleRequestSolana, error) {
	event := new(NodeRegistryOracleRequestSolana)
	if err := _NodeRegistry.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferredIterator struct {
	Event *NodeRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the NodeRegistry contract.
type NodeRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NodeRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NodeRegistryOwnershipTransferredIterator{contract: _NodeRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NodeRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryOwnershipTransferred)
				if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NodeRegistry *NodeRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*NodeRegistryOwnershipTransferred, error) {
	event := new(NodeRegistryOwnershipTransferred)
	if err := _NodeRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeRegistryReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the NodeRegistry contract.
type NodeRegistryReceiveRequestIterator struct {
	Event *NodeRegistryReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeRegistryReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeRegistryReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeRegistryReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeRegistryReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeRegistryReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeRegistryReceiveRequest represents a ReceiveRequest event raised by the NodeRegistry contract.
type NodeRegistryReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*NodeRegistryReceiveRequestIterator, error) {

	logs, sub, err := _NodeRegistry.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &NodeRegistryReceiveRequestIterator{contract: _NodeRegistry.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *NodeRegistryReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _NodeRegistry.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeRegistryReceiveRequest)
				if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_NodeRegistry *NodeRegistryFilterer) ParseReceiveRequest(log types.Log) (*NodeRegistryReceiveRequest, error) {
	event := new(NodeRegistryReceiveRequest)
	if err := _NodeRegistry.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
