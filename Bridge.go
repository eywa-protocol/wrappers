// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newEpochKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requestType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"selector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"OracleRequestSolana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reqId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeFrom\",\"type\":\"bytes32\"}],\"name\":\"ReceiveRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_listNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"addContractBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"daoTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"resetEpoch\",\"type\":\"bool\"}],\"name\":\"daoUpdateEpochRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochParticipantsNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"prepareRqId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_reqId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sel\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_bridgeFrom\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"}],\"name\":\"receiveRequestV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_selector\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiveSide\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oppositeBridge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"transmitRequestV2_solana\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_votersMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_newEpochParticipantsNum\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_newEpochNum\",\"type\":\"uint32\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60c06040526005608081905264322e322e3360d81b60a09081526200002691908162000089565b503480156200003457600080fd5b5060405162002f6d38038062002f6d83398101604081905262000057916200014c565b600080546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055620001c0565b828054620000979062000183565b90600052602060002090601f016020900481019282620000bb576000855562000106565b82601f10620000d657805160ff191683800117855562000106565b8280016001018555821562000106579182015b8281111562000106578251825591602001919060010190620000e9565b506200011492915062000118565b5090565b5b8082111562000114576000815560010162000119565b80516001600160a01b03811681146200014757600080fd5b919050565b600080604083850312156200015f578182fd5b6200016a836200012f565b91506200017a602084016200012f565b90509250929050565b6002810460018216806200019857607f821691505b60208210811415620001ba57634e487b7160e01b600052602260045260246000fd5b50919050565b612d9d80620001d06000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636f352196116100a2578063bd4a5e9011610071578063bd4a5e901461020f578063c02ae95614610222578063e27ad9a514610235578063f2a0c8c014610248578063f3635fca1461025b5761010b565b80636f352196146101d5578063757991a8146101e85780637da0a877146101ff578063aa764d7c146102075761010b565b806346dec6cb116100de57806346dec6cb14610183578063486ff0cd14610198578063572b6c05146101ad578063579de075146101c05761010b565b806305e3c05b146101105780632d0335ab1461012e578063329ef45f1461014e5780634162169f1461016e575b600080fd5b61011861026e565b6040516101259190612a7d565b60405180910390f35b61014161013c366004612045565b610281565b6040516101259190612582565b61016161015c366004612296565b6102a0565b6040516101259190612577565b61017661036b565b6040516101259190612563565b61019661019136600461205f565b61037a565b005b6101a0610514565b6040516101259190612620565b6101616101bb366004612045565b6105a2565b6101c86105b6565b6040516101259190612a8e565b6101416101e3366004612196565b6105c6565b6101f0610602565b604051610125939291906125ee565b61017661064e565b61017661065d565b61019661021d3660046121d0565b61066c565b610161610230366004612320565b6109db565b6101966102433660046120af565b610a7b565b610196610256366004612045565b610ade565b6101966102693660046120da565b610b88565b600a54600160a81b900463ffffffff1681565b6001600160a01b0381166000908152600160205260409020545b919050565b600086866102eb6001600160a01b0383166002856102bc610e7a565b6001600160a01b0390811682526020808301939093526040918201600090812091871681529252902090610eab565b6103105760405162461bcd60e51b8152600401610307906127aa565b60405180910390fd5b61031a8585610ec0565b7f5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff30878c8c8c8c60405161035396959493929190612992565b60405180910390a15060019998505050505050505050565b600a546001600160a01b031681565b600a546001600160a01b031661038e610e7a565b6001600160a01b0316146103b45760405162461bcd60e51b8152600401610307906126eb565b600060066040516020016103c89190612a5f565b604051602081830303815290604052905081156104c157600a8054600160a81b900463ffffffff169060156103fc83612cbc565b91906101000a81548163ffffffff021916908363ffffffff16021790555050610423611e66565b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa9258982826040516020016104569190612a3a565b60408051808303601f1901815290829052600a546104859392600191600160a81b900463ffffffff16906125aa565b60405180910390a1805181906006906104a19082906002611e8b565b5060208201516104b79060028084019190611e8b565b5090505050610510565b600a546040517fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589916105079184918291600191600160a81b900463ffffffff16906125aa565b60405180910390a15b5050565b6005805461052190612c66565b80601f016020809104026020016040519081016040528092919081815260200182805461054d90612c66565b801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b505050505081565b6004546001600160a01b0390811691161490565b600a54600160a01b900460ff1681565b600082828686896040516020016105e1959493929190612524565b60405160208183030381529060405280519060200120905095945050505050565b606060008060066040516020016106199190612a5f565b60408051808303601f19018152919052600a549094600160a01b820460ff169450600160a81b90910463ffffffff1692509050565b6004546001600160a01b031681565b6000546001600160a01b031681565b600a5463ffffffff8083169161068c91600160a81b909104166001612ab4565b63ffffffff16146106af5760405162461bcd60e51b81526004016103079061270d565b60006106f08a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f0992505050565b9050600061073389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f0992505050565b9050600061077688888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061107b92505050565b60065490915015158061078a575060075415155b156108e957600a546003906107aa90600160a01b900460ff166002612c04565b6107b49190612adc565b6107bd8761113f565b10156107db5760405162461bcd60e51b81526004016103079061295b565b600a5460ff600160a01b9091041661010014806108075750600a546001600160a01b90910460ff161b86105b6108235760405162461bcd60e51b8152600401610307906128cc565b6000836000015184602001518787604051602001610844949392919061247c565b60408051808303601f19018152608083018083529093506108cb92916006918391820190839060029082845b81548152602001906001019080831161087057505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116108a6575050505050815250508483858b611169565b6108e75760405162461bcd60e51b81526004016103079061277f565b505b7fb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589600660405160200161091c9190612a5f565b6040516020818303038152906040528460405160200161093c9190612a3a565b60408051601f198184030181529082905261095c929160009089906125aa565b60405180910390a1825183906006906109789082906002611e8b565b50602082015161098e9060028084019190611e8b565b5050600a805463ffffffff909616600160a81b0263ffffffff60a81b1960ff909816600160a01b0260ff60a01b199097169690961796909616949094179094555050505050505050505050565b60008686610a1b82600260006109ef610e7a565b6001600160a01b0316815260208082019290925260409081016000908120868252909252902090610eab565b610a375760405162461bcd60e51b8152600401610307906127aa565b610a418585610ec0565b6040517f11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef9061035390309089908e908e908e908e906129eb565b80610a985760405162461bcd60e51b8152600401610307906128a3565b82610ab55760405162461bcd60e51b815260040161030790612878565b60008381526002602090815260408083208584529091529020610ad890826113b3565b50505050565b600a546001600160a01b03161580610b105750600a546001600160a01b0316610b05610e7a565b6001600160a01b0316145b610b2c5760405162461bcd60e51b8152600401610307906126c9565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600654151580610b99575060075415155b610bb55760405162461bcd60e51b8152600401610307906127d6565b600a54600390610bd090600160a01b900460ff166002612c04565b610bda9190612adc565b610be38261113f565b1015610c015760405162461bcd60e51b81526004016103079061295b565b600a5460ff600160a01b909104166101001480610c2d5750600a546001600160a01b90910460ff161b81105b610c495760405162461bcd60e51b8152600401610307906128cc565b6000610c8a86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f0992505050565b90506000610ccd85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061107b92505050565b600a54604051919250600091610cfb918e918e918e918e91600160a81b900463ffffffff16906020016124c6565b60408051808303601f1901815260808301808352909350610d8292916006918391820190839060029082845b815481526020019060010190808311610d2757505050918352505060408051808201918290526020909201919060028481019182845b815481526020019060010190808311610d5d5750505050508152505084838588611169565b610d9e5760405162461bcd60e51b81526004016103079061277f565b6000610df38c6040518060400160405280601781526020017f72656365697665526571756573745632206661696c65640000000000000000008152508d6001600160a01b03166113bf9092919063ffffffff16565b9050805160001480610e14575080806020019051810190610e14919061207b565b610e305760405162461bcd60e51b8152600401610307906127fd565b7ffb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f28d8c8c604051610e639392919061258b565b60405180910390a150505050505050505050505050565b600060143610801590610e915750610e91336105a2565b15610ea5575060131936013560601c610ea8565b50335b90565b6000610eb783836113d8565b90505b92915050565b6001600160a01b038216600090815260016020526040812080548392909190610ee883612ca1565b91905055146105105760405162461bcd60e51b81526004016103079061266a565b610f11611e66565b60408051600480825260a082019092526000916020820160808036833701905050905060205b8151610f44906020612c04565b8111610f64578381015182820152610f5d602082612a9c565b9050610f37565b5080600081518110610f8657634e487b7160e01b600052603260045260246000fd5b6020908102919091010151825152805181906001908110610fb757634e487b7160e01b600052603260045260246000fd5b6020908102919091010151825160016020020152805181906002908110610fee57634e487b7160e01b600052603260045260246000fd5b6020026020010151826020015160006002811061101b57634e487b7160e01b600052603260045260246000fd5b602002015280518190600390811061104357634e487b7160e01b600052603260045260246000fd5b6020026020010151826020015160016002811061107057634e487b7160e01b600052603260045260246000fd5b602002015250919050565b611083611ec9565b60408051600280825260608201835260009260208301908036833701905050905060205b81516110b4906020612c04565b81116110d45783810151828201526110cd602082612a9c565b90506110a7565b50806000815181106110f657634e487b7160e01b600052603260045260246000fd5b60200260200101518260000181815250508060018151811061112857634e487b7160e01b600052603260045260246000fd5b602002602001015182602001818152505050919050565b60005b811561029b57611153600183612c23565b909116908061116181612ca1565b915050611142565b60408051808201909152600080825260208201819052908160015b84156111f357848116156111de5761119c8186612c23565b94506111db836111d68b600001518c60200151866040516020016111c293929190612451565b6040516020818303038152906040526113f0565b6114a9565b92505b60011b816111eb81612ca1565b925050611184565b60408051600380825260808201909252600091816020015b611213611ec9565b81526020019060019003908161120b5750506040805160038082526080820190925291925060009190602082015b611249611e66565b81526020019060019003908161124157905050905061126788611511565b8260008151811061128857634e487b7160e01b600052603260045260246000fd5b60200260200101819052506112b38b600001518c602001518b6040516020016111c293929190612416565b826001815181106112d457634e487b7160e01b600052603260045260246000fd5b6020026020010181905250848260028151811061130157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611314611594565b8160008151811061133557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250898160018151811061136257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508a8160028151811061138f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113a48282611654565b9b9a5050505050505050505050565b6000610eb78383611a24565b60606113ce8484600085611a6e565b90505b9392505050565b60009081526001919091016020526040902054151590565b6113f8611ec9565b600060028360405161140a9190612547565b602060405180830381855afa158015611427573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061144a9190612097565b90506000611466600080516020612d4883398151915283612ce0565b905060005b61147482611b2e565b9050801561149757604080518082019091529182526020820152915061029b9050565b6114a2600183612a9c565b915061146b565b6114b1611ec9565b6114b9611ee3565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050806115095760405162461bcd60e51b81526004016103079061284d565b505092915050565b611519611ec9565b61152282611b6a565b156115415750604080518082019091526000808252602082015261029b565b604051806040016040528083600001518152602001600080516020612d4883398151915284602001516115749190612ce0565b61158c90600080516020612d48833981519152612c23565b905292915050565b61159c611e66565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b82527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60208381019190915281019190915290565b600081518351146116775760405162461bcd60e51b81526004016103079061292c565b82516000611686826006612c04565b905060008167ffffffffffffffff8111156116b157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156116da578160200160208202803683370190505b50905060005b838110156119d95786818151811061170857634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828260066117229190612c04565b61172d906000612a9c565b8151811061174b57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505086818151811061177757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151828260066117919190612c04565b61179c906001612a9c565b815181106117ba57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508581815181106117e657634e487b7160e01b600052603260045260246000fd5b60209081029190910101515151826117ff836006612c04565b61180a906002612a9c565b8151811061182857634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085818151811061185457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515101518261186f836006612c04565b61187a906003612a9c565b8151811061189857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508581815181106118c457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000600281106118f057634e487b7160e01b600052603260045260246000fd5b602002015182611901836006612c04565b61190c906004612a9c565b8151811061192a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085818151811061195657634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160016002811061198257634e487b7160e01b600052603260045260246000fd5b602002015182611993836006612c04565b61199e906005612a9c565b815181106119bc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806119d181612ca1565b9150506116e0565b506119e2611f01565b6000602082602086026020860160086107d05a03fa905080611a165760405162461bcd60e51b815260040161030790612692565b505115159695505050505050565b6000611a3083836113d8565b611a6657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610eba565b506000610eba565b606082471015611a905760405162461bcd60e51b815260040161030790612739565b611a9985611b80565b611ab55760405162461bcd60e51b8152600401610307906128f5565b600080866001600160a01b03168587604051611ad19190612547565b60006040518083038185875af1925050503d8060008114611b0e576040519150601f19603f3d011682016040523d82523d6000602084013e611b13565b606091505b5091509150611b23828286611b86565b979650505050505050565b6000610eba600080516020612d4883398151915280611b4f85600383611bbf565b611b5a906003612a9c565b611b649190612ce0565b90611c0a565b8051600090158015610eba575050602001511590565b3b151590565b60608315611b955750816113d1565b825115611ba55782518084602001fd5b8160405162461bcd60e51b81526004016103079190612620565b60006040516020810160208152602080820152602060408201528560608201528460808201528360a082015260208260c0836005600019fa611c0057600080fd5b5051949350505050565b6000611c168383611deb565b600114611c2557506000610eba565b82611c3257506000610eba565b611c3d600483612ce0565b60031415611c6d57611c66836004611c56856001612a9c565b611c609190612adc565b84611bbf565b9050610eba565b6000611c7a600184612c23565b905060005b611c8a600283612ce0565b611cad57611c99600283612adc565b9150611ca6816001612a9c565b9050611c7f565b60025b611cba8186611deb565b60001914611cd457611ccd816001612a9c565b9050611cb0565b6000611cf7876002611ce7876001612a9c565b611cf19190612adc565b88611bbf565b90506000611d06888689611bbf565b90506000611d1584878a611bbf565b905084600080845b5060009050845b83821015611d5a578060011415611d3a57611d5a565b611d468160028e611bbf565b905081611d5281612ca1565b925050611d24565b81611d7157869a5050505050505050505050610eba565b611d9c856001611d818588612c23565b611d8b9190612c23565b611d96906002612b36565b8e611bbf565b92508b611da98480612c04565b611db39190612ce0565b94508b611dc08489612c04565b611dca9190612ce0565b96508b611dd78688612c04565b611de19190612ce0565b9550819350611d1d565b600080611e0f846002611dff600187612c23565b611e099190612adc565b85611bbf565b9050801580611e1e5750806001145b15611e2a579050610eba565b611e35600184612c23565b811415611e4757600019915050610eba565b60405162461bcd60e51b815260040161030790612633565b5092915050565b6040518060400160405280611e79611f1f565b8152602001611e86611f1f565b905290565b8260028101928215611eb9579160200282015b82811115611eb9578251825591602001919060010190611e9e565b50611ec5929150611f3d565b5090565b604051806040016040528060008152602001600081525090565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5b80821115611ec55760008155600101611f3e565b80356001600160a01b038116811461029b57600080fd5b60008083601f840112611f7a578182fd5b50813567ffffffffffffffff811115611f91578182fd5b602083019150836020828501011115611fa957600080fd5b9250929050565b600082601f830112611fc0578081fd5b813567ffffffffffffffff80821115611fdb57611fdb612d20565b604051601f8301601f191681016020018281118282101715611fff57611fff612d20565b604052828152848301602001861015612016578384fd5b82602086016020830137918201602001929092529392505050565b803563ffffffff8116811461029b57600080fd5b600060208284031215612056578081fd5b610eb782611f52565b600060208284031215612070578081fd5b81356113d181612d36565b60006020828403121561208c578081fd5b81516113d181612d36565b6000602082840312156120a8578081fd5b5051919050565b6000806000606084860312156120c3578182fd5b505081359360208301359350604090920135919050565b600080600080600080600080600060e08a8c0312156120f7578485fd5b8935985060208a013567ffffffffffffffff80821115612115578687fd5b6121218d838e01611fb0565b995061212f60408d01611f52565b985060608c0135975060808c013591508082111561214b578687fd5b6121578d838e01611f69565b909750955060a08c013591508082111561216f578485fd5b5061217c8c828d01611f69565b9a9d999c50979a9699959894979660c00135949350505050565b600080600080600060a086880312156121ad578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600080600080600060c08a8c0312156121ed578485fd5b893567ffffffffffffffff80821115612204578687fd5b6122108d838e01611f69565b909b50995060208c0135915080821115612228578687fd5b6122348d838e01611f69565b909950975060408c013591508082111561224c578687fd5b506122598c828d01611f69565b90965094505060608a0135925060808a013560ff81168114612279578283fd5b915061228760a08b01612031565b90509295985092959850929598565b600080600080600080600060e0888a0312156122b0578283fd5b873567ffffffffffffffff8111156122c6578384fd5b6122d28a828b01611fb0565b9750506122e160208901611f52565b95506122ef60408901611f52565b9450606088013593506080880135925061230b60a08901611f52565b915060c0880135905092959891949750929550565b600080600080600080600060e0888a03121561233a578081fd5b873567ffffffffffffffff811115612350578182fd5b61235c8a828b01611fb0565b9750506020880135955060408801359450606088013593506080880135925061230b60a08901611f52565b8060005b6002811015610ad857815184526020938401939091019060010161238b565b8060005b6002811015610ad85781548452602090930192600191820191016123ae565b600081518084526123e5816020860160208601612c3a565b601f01601f19169290920160200192915050565b600a8152691cd95d14995c5d595cdd60b21b602082015260400190565b60006124228286612387565b61242f6040830185612387565b8251612442816080850160208701612c3a565b91909101608001949350505050565b600061245d8286612387565b61246a6040830185612387565b50608081019190915260a00192915050565b60006124888287612387565b6124956040830186612387565b5060f89290921b6001600160f81b031916608083015260e01b6001600160e01b031916608182015260850192915050565b600086825285516124de816020850160208a01612c3a565b60609590951b6bffffffffffffffffffffffff191660209290950191820194909452603481019290925260e01b6001600160e01b03191660548201526058019392505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60008251612559818460208701612c3a565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9283526001600160a01b03919091166020830152604082015260600190565b6000608082526125bd60808301876123cd565b82810360208401526125cf81876123cd565b9415156040840152505063ffffffff9190911660609091015292915050565b60006060825261260160608301866123cd565b905060ff8416602083015263ffffffff83166040830152949350505050565b600060208252610eb760208301846123cd565b6020808252601d908201527f4661696c656420746f2063616c63756c617465206c6567656e6472652e000000604082015260600190565b6020808252600e908201526d0dcdedcc6ca40dad2e6dac2e8c6d60931b604082015260600190565b60208082526019908201527f50616972696e67206f7065726174696f6e206661696c65642e00000000000000604082015260600190565b6020808252600890820152676f6e6c792044414f60c01b604082015260600190565b6020808252600890820152674f6e6c792044414f60c01b604082015260600190565b6020808252601290820152713bb937b7339032b837b1b410373ab6b132b960711b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601190820152700daead8e8d2e6d2ce40dad2e6dac2e8c6d607b1b604082015260600190565b602080825260129082015271155395149554d511510810d3d395149050d560721b604082015260600190565b6020808252600d908201526c195c1bd8da081b9bdd081cd95d609a1b604082015260600190565b60208082526030908201527f726563656976655265717565737456323a20556e61626c6520746f206465636f60408201526f64652072657275726e6564206461746160801b606082015260800190565b602080825260119082015270105919081c1bda5b9d1cc819985a5b1959607a1b604082015260600190565b6020808252601190820152704e554c4c20414444524553532046524f4d60781b604082015260600190565b6020808252600f908201526e4e554c4c204144445245535320544f60881b604082015260600190565b6020808252600f908201526e6269746d61736b20746f6f2062696760881b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601590820152742837b4b73a1031b7bab73a1036b4b9b6b0ba31b41760591b604082015260600190565b60208082526017908201527f6e6f7420656e6f756768207061727469636970616e7473000000000000000000604082015260600190565b600060e082526129a460e083016123f9565b6001600160a01b0389811660208501526040840189905283820360608501526129cd82896123cd565b96811660808501529490941660a08301525060c00152509392505050565b600060e082526129fd60e083016123f9565b8860208401528760408401528281036060840152612a1b81886123cd565b6080840196909652505060a081019290925260c0909101529392505050565b6000608082019050612a4d828451612387565b6020830151611e5f6040840182612387565b60808101612a6d82846123aa565b610eba60408301600285016123aa565b63ffffffff91909116815260200190565b60ff91909116815260200190565b60008219821115612aaf57612aaf612cf4565b500190565b600063ffffffff808316818516808303821115612ad357612ad3612cf4565b01949350505050565b600082612aeb57612aeb612d0a565b500490565b80825b6001808611612b025750612b2d565b818704821115612b1457612b14612cf4565b80861615612b2157918102915b9490941c938002612af3565b94509492505050565b6000610eb76000198484600082612b4f575060016113d1565b81612b5c575060006113d1565b8160018114612b725760028114612b7c57612ba9565b60019150506113d1565b60ff841115612b8d57612b8d612cf4565b6001841b915084821115612ba357612ba3612cf4565b506113d1565b5060208310610133831016604e8410600b8410161715612bdc575081810a83811115612bd757612bd7612cf4565b6113d1565b612be98484846001612af0565b808604821115612bfb57612bfb612cf4565b02949350505050565b6000816000190483118215151615612c1e57612c1e612cf4565b500290565b600082821015612c3557612c35612cf4565b500390565b60005b83811015612c55578181015183820152602001612c3d565b83811115610ad85750506000910152565b600281046001821680612c7a57607f821691505b60208210811415612c9b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612cb557612cb5612cf4565b5060010190565b600063ffffffff80831681811415612cd657612cd6612cf4565b6001019392505050565b600082612cef57612cef612d0a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612d4457600080fd5b5056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220dad6f46213ff44cad22aa9f26cfc88d3cde6ca01da2091bd25c61115634e7ab764736f6c63430008000033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, listNode common.Address, forwarder common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, listNode, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCaller) ListNode(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "_listNode")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// ListNode is a free data retrieval call binding the contract method 0xaa764d7c.
//
// Solidity: function _listNode() view returns(address)
func (_Bridge *BridgeCallerSession) ListNode() (common.Address, error) {
	return _Bridge.Contract.ListNode(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_Bridge *BridgeCallerSession) Dao() (common.Address, error) {
	return _Bridge.Contract.Dao(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCaller) EpochNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochNum is a free data retrieval call binding the contract method 0x05e3c05b.
//
// Solidity: function epochNum() view returns(uint32)
func (_Bridge *BridgeCallerSession) EpochNum() (uint32, error) {
	return _Bridge.Contract.EpochNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCaller) EpochParticipantsNum(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "epochParticipantsNum")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// EpochParticipantsNum is a free data retrieval call binding the contract method 0x579de075.
//
// Solidity: function epochParticipantsNum() view returns(uint8)
func (_Bridge *BridgeCallerSession) EpochParticipantsNum() (uint8, error) {
	return _Bridge.Contract.EpochParticipantsNum(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCaller) GetEpoch(opts *bind.CallOpts) ([]byte, uint8, uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new([]byte), *new(uint8), *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return out0, out1, out2, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(bytes, uint8, uint32)
func (_Bridge *BridgeCallerSession) GetEpoch() ([]byte, uint8, uint32, error) {
	return _Bridge.Contract.GetEpoch(&_Bridge.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getNonce", from)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetNonce(&_Bridge.CallOpts, from)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Bridge *BridgeCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Bridge.Contract.IsTrustedForwarder(&_Bridge.CallOpts, forwarder)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCaller) PrepareRqId(opts *bind.CallOpts, oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "prepareRqId", oppositeBridge, chainId, receiveSide, from, nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// PrepareRqId is a free data retrieval call binding the contract method 0x6f352196.
//
// Solidity: function prepareRqId(bytes32 oppositeBridge, uint256 chainId, bytes32 receiveSide, bytes32 from, uint256 nonce) view returns(bytes32)
func (_Bridge *BridgeCallerSession) PrepareRqId(oppositeBridge [32]byte, chainId *big.Int, receiveSide [32]byte, from [32]byte, nonce *big.Int) ([32]byte, error) {
	return _Bridge.Contract.PrepareRqId(&_Bridge.CallOpts, oppositeBridge, chainId, receiveSide, from, nonce)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCaller) TrustedForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "trustedForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// TrustedForwarder is a free data retrieval call binding the contract method 0x7da0a877.
//
// Solidity: function trustedForwarder() view returns(address)
func (_Bridge *BridgeCallerSession) TrustedForwarder() (common.Address, error) {
	return _Bridge.Contract.TrustedForwarder(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Bridge *BridgeCallerSession) VersionRecipient() (string, error) {
	return _Bridge.Contract.VersionRecipient(&_Bridge.CallOpts)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactor) AddContractBind(opts *bind.TransactOpts, from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addContractBind", from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// AddContractBind is a paid mutator transaction binding the contract method 0xe27ad9a5.
//
// Solidity: function addContractBind(bytes32 from, bytes32 oppositeBridge, bytes32 to) returns()
func (_Bridge *BridgeTransactorSession) AddContractBind(from [32]byte, oppositeBridge [32]byte, to [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AddContractBind(&_Bridge.TransactOpts, from, oppositeBridge, to)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactor) DaoTransferOwnership(opts *bind.TransactOpts, newDao common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoTransferOwnership", newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}

// DaoTransferOwnership is a paid mutator transaction binding the contract method 0xf2a0c8c0.
//
// Solidity: function daoTransferOwnership(address newDao) returns()
func (_Bridge *BridgeTransactorSession) DaoTransferOwnership(newDao common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.DaoTransferOwnership(&_Bridge.TransactOpts, newDao)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactor) DaoUpdateEpochRequest(opts *bind.TransactOpts, resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "daoUpdateEpochRequest", resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}

// DaoUpdateEpochRequest is a paid mutator transaction binding the contract method 0x46dec6cb.
//
// Solidity: function daoUpdateEpochRequest(bool resetEpoch) returns()
func (_Bridge *BridgeTransactorSession) DaoUpdateEpochRequest(resetEpoch bool) (*types.Transaction, error) {
	return _Bridge.Contract.DaoUpdateEpochRequest(&_Bridge.TransactOpts, resetEpoch)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactor) ReceiveRequestV2(opts *bind.TransactOpts, _reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "receiveRequestV2", _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeSession) ReceiveRequestV2(_reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// ReceiveRequestV2 is a paid mutator transaction binding the contract method 0xf3635fca.
//
// Solidity: function receiveRequestV2(bytes32 _reqId, bytes _sel, address _receiveSide, bytes32 _bridgeFrom, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask) returns()
func (_Bridge *BridgeTransactorSession) ReceiveRequestV2(_reqId [32]byte, _sel []byte, _receiveSide common.Address, _bridgeFrom [32]byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ReceiveRequestV2(&_Bridge.TransactOpts, _reqId, _sel, _receiveSide, _bridgeFrom, _votersPubKey, _votersSignature, _votersMask)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2(opts *bind.TransactOpts, _selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2 is a paid mutator transaction binding the contract method 0x329ef45f.
//
// Solidity: function transmitRequestV2(bytes _selector, address receiveSide, address oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2(_selector []byte, receiveSide common.Address, oppositeBridge common.Address, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactor) TransmitRequestV2Solana(opts *bind.TransactOpts, _selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transmitRequestV2_solana", _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeSession) TransmitRequestV2Solana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2Solana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// TransmitRequestV2Solana is a paid mutator transaction binding the contract method 0xc02ae956.
//
// Solidity: function transmitRequestV2_solana(bytes _selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainId, bytes32 requestId, address sender, uint256 nonce) returns(bool)
func (_Bridge *BridgeTransactorSession) TransmitRequestV2Solana(_selector []byte, receiveSide [32]byte, oppositeBridge [32]byte, chainId *big.Int, requestId [32]byte, sender common.Address, nonce *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.TransmitRequestV2Solana(&_Bridge.TransactOpts, _selector, receiveSide, oppositeBridge, chainId, requestId, sender, nonce)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactor) UpdateEpoch(opts *bind.TransactOpts, _newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "updateEpoch", _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// UpdateEpoch is a paid mutator transaction binding the contract method 0xbd4a5e90.
//
// Solidity: function updateEpoch(bytes _newKey, bytes _votersPubKey, bytes _votersSignature, uint256 _votersMask, uint8 _newEpochParticipantsNum, uint32 _newEpochNum) returns()
func (_Bridge *BridgeTransactorSession) UpdateEpoch(_newKey []byte, _votersPubKey []byte, _votersSignature []byte, _votersMask *big.Int, _newEpochParticipantsNum uint8, _newEpochNum uint32) (*types.Transaction, error) {
	return _Bridge.Contract.UpdateEpoch(&_Bridge.TransactOpts, _newKey, _votersPubKey, _votersSignature, _votersMask, _newEpochParticipantsNum, _newEpochNum)
}

// BridgeNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Bridge contract.
type BridgeNewEpochIterator struct {
	Event *BridgeNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewEpoch represents a NewEpoch event raised by the Bridge contract.
type BridgeNewEpoch struct {
	OldEpochKey []byte
	NewEpochKey []byte
	Requested   bool
	EpochNum    uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*BridgeNewEpochIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &BridgeNewEpochIterator{contract: _Bridge.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *BridgeNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewEpoch)
				if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xb7fa9c1ca717476355c13304d9a8ddf9a8c33a03ab9095b219ea83b83aa92589.
//
// Solidity: event NewEpoch(bytes oldEpochKey, bytes newEpochKey, bool requested, uint32 epochNum)
func (_Bridge *BridgeFilterer) ParseNewEpoch(log types.Log) (*BridgeNewEpoch, error) {
	event := new(BridgeNewEpoch)
	if err := _Bridge.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestIterator is returned from FilterOracleRequest and is used to iterate over the raw logs and unpacked data for OracleRequest events raised by the Bridge contract.
type BridgeOracleRequestIterator struct {
	Event *BridgeOracleRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequest represents a OracleRequest event raised by the Bridge contract.
type BridgeOracleRequest struct {
	RequestType    string
	Bridge         common.Address
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    common.Address
	OppositeBridge common.Address
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequest is a free log retrieval operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequest(opts *bind.FilterOpts) (*BridgeOracleRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestIterator{contract: _Bridge.contract, event: "OracleRequest", logs: logs, sub: sub}, nil
}

// WatchOracleRequest is a free log subscription operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequest(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequest)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequest is a log parse operation binding the contract event 0x5c3fb349179e8d8347e69078d6b9912b9724461c39bf776a56925267afc55aff.
//
// Solidity: event OracleRequest(string requestType, address bridge, bytes32 requestId, bytes selector, address receiveSide, address oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequest(log types.Log) (*BridgeOracleRequest, error) {
	event := new(BridgeOracleRequest)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOracleRequestSolanaIterator is returned from FilterOracleRequestSolana and is used to iterate over the raw logs and unpacked data for OracleRequestSolana events raised by the Bridge contract.
type BridgeOracleRequestSolanaIterator struct {
	Event *BridgeOracleRequestSolana // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOracleRequestSolanaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOracleRequestSolana)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOracleRequestSolana)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOracleRequestSolanaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOracleRequestSolanaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOracleRequestSolana represents a OracleRequestSolana event raised by the Bridge contract.
type BridgeOracleRequestSolana struct {
	RequestType    string
	Bridge         [32]byte
	RequestId      [32]byte
	Selector       []byte
	ReceiveSide    [32]byte
	OppositeBridge [32]byte
	Chainid        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleRequestSolana is a free log retrieval operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) FilterOracleRequestSolana(opts *bind.FilterOpts) (*BridgeOracleRequestSolanaIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return &BridgeOracleRequestSolanaIterator{contract: _Bridge.contract, event: "OracleRequestSolana", logs: logs, sub: sub}, nil
}

// WatchOracleRequestSolana is a free log subscription operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) WatchOracleRequestSolana(opts *bind.WatchOpts, sink chan<- *BridgeOracleRequestSolana) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OracleRequestSolana")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOracleRequestSolana)
				if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRequestSolana is a log parse operation binding the contract event 0x11bba688fd7ea4d77c249ca3d40e94e48533d8a0a8ca4c8d3952c489d1b8ecef.
//
// Solidity: event OracleRequestSolana(string requestType, bytes32 bridge, bytes32 requestId, bytes selector, bytes32 receiveSide, bytes32 oppositeBridge, uint256 chainid)
func (_Bridge *BridgeFilterer) ParseOracleRequestSolana(log types.Log) (*BridgeOracleRequestSolana, error) {
	event := new(BridgeOracleRequestSolana)
	if err := _Bridge.contract.UnpackLog(event, "OracleRequestSolana", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousDao common.Address
	NewDao      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousDao []common.Address, newDao []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousDao []common.Address, newDao []common.Address) (event.Subscription, error) {

	var previousDaoRule []interface{}
	for _, previousDaoItem := range previousDao {
		previousDaoRule = append(previousDaoRule, previousDaoItem)
	}
	var newDaoRule []interface{}
	for _, newDaoItem := range newDao {
		newDaoRule = append(newDaoRule, newDaoItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousDaoRule, newDaoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousDao, address indexed newDao)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeReceiveRequestIterator is returned from FilterReceiveRequest and is used to iterate over the raw logs and unpacked data for ReceiveRequest events raised by the Bridge contract.
type BridgeReceiveRequestIterator struct {
	Event *BridgeReceiveRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeReceiveRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeReceiveRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeReceiveRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeReceiveRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeReceiveRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeReceiveRequest represents a ReceiveRequest event raised by the Bridge contract.
type BridgeReceiveRequest struct {
	ReqId       [32]byte
	ReceiveSide common.Address
	BridgeFrom  [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReceiveRequest is a free log retrieval operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) FilterReceiveRequest(opts *bind.FilterOpts) (*BridgeReceiveRequestIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return &BridgeReceiveRequestIterator{contract: _Bridge.contract, event: "ReceiveRequest", logs: logs, sub: sub}, nil
}

// WatchReceiveRequest is a free log subscription operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) WatchReceiveRequest(opts *bind.WatchOpts, sink chan<- *BridgeReceiveRequest) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ReceiveRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeReceiveRequest)
				if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveRequest is a log parse operation binding the contract event 0xfb4571f3f72d75f82b13143fd35e1935981b5bd063d4bc973acc83934d8777f2.
//
// Solidity: event ReceiveRequest(bytes32 reqId, address receiveSide, bytes32 bridgeFrom)
func (_Bridge *BridgeFilterer) ParseReceiveRequest(log types.Log) (*BridgeReceiveRequest, error) {
	event := new(BridgeReceiveRequest)
	if err := _Bridge.contract.UnpackLog(event, "ReceiveRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
